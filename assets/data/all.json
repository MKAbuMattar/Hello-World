[
  {
    "id": "1",
    "title": "قلب",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "‫(قول \"مرحبا يا عالم!\")"
  },
  {
    "id": "2",
    "title": "μλ",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "&gt;  EEEEEEEΔΔΘς       v\r\nv  ςΘΔEEEEEEEEEE     &lt;\r\n&gt;  EEEEEEEEEEEδδΘς   v\r\nv  ΘδδEEEEEEEEEEEς   &lt;\r\n&gt;  ς EEEEEEEEEEEΔΘ   v\r\nv  ΘΔΔΔΔEEEEς        &lt;\r\n&gt;  ςEEEΔΔΘ           v\r\nv  ΘδEEEEEEEEEEEEς   &lt;\r\n&gt;  ςEEEEEEEEEEEΔΘ    v\r\nv  ΘΔΔΔΔEEEEEEEEEEEς &lt;\r\n&gt;  ςEEEEEEEEEEEδδΘ   v\r\nv  ΘEEEEEEEEEEς      &lt;\r\n&gt;  ςEEEΔΔΔΘ          λ"
  },
  {
    "id": "3",
    "title": "--Unless",
    "description": "",
    "url": "https://esolangs.org/wiki/--Unless",
    "language_short": "c-like",
    "code": "Hello_world:\r\n    Hello_world_function:\r\n        R:\r\n            Helloworld.c\r\n        :R\r\n    :Hello_world_function\r\n:Hello_world\r\nR:\r\n    Hello_world:\r\n        Hello_world_function\r\n    :Hello_world\r\n:R"
  },
  {
    "id": "4",
    "title": "\/\/\/",
    "description": "\/\/\/ (pronounced \"slashes\") is a minimalist Turing-complete esoteric programming language, invented by Tanner Swett (User:Ihope127) in 2006 based on the \"s\/foo\/bar\/\" notation that everybody seemed to be using in IRC. The only operation is repeated string substitution, using the syntax \/pattern\/replacement\/. Despite its extreme simplicity – there isn't even an obvious way to create a loop – it was proved Turing-complete by Ørjan Johansen in 2009, who created an interpreter for the Turing-complete language Bitwise Cyclic Tag.",
    "url": "",
    "language_short": "accesslog",
    "code": "\/foo\/Hello, world!\/\/bar\/foo\/bar"
  },
  {
    "id": "5",
    "title": "~-~!",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "@|H|:@|e|:@|l|:@|l|:@|o|:@|,|@| |:@|w|:@|o|:@|r|:@|l|:@|d|:@|!|:"
  },
  {
    "id": "7",
    "title": "0587",
    "description": "0587 is a functional esolang that is made up of numeric instructions. It was created by user:InfiniteDonuts and is inspired by 0815, Unlambda, and 1337.\r\n\r\n",
    "url": "https://esolangs.org/wiki/0587",
    "language_short": "c-like",
    "code": "01040291(Hello World)"
  },
  {
    "id": "8",
    "title": "0815",
    "description": "0815 is an esoteric programming language designed and implemented between December 2012 and January 2013 by Paulo Jorente.",
    "url": "https://esolangs.org/wiki/0815",
    "language_short": "brainfuck",
    "code": "&lt;:48:x&lt;:65:=&lt;:6C:$=$=$$~&lt;:03:+\r\n$~&lt;:ffffffffffffffb1:+$&lt;:77:~$\r\n~&lt;:fffffffffffff8:x+$~&lt;:03:+$~\r\n&lt;:06:x-$x&lt;:0e:x-$=x&lt;:43:x-$"
  },
  {
    "id": "9",
    "title": "1C Enterprise",
    "description": "",
    "url": "",
    "language_short": "1c",
    "code": "Message(\"Hello, World!\");"
  },
  {
    "id": "10",
    "title": "2B",
    "description": "2B is an esoteric programming language created by David Catt (user:David.werecat) in which memory is stored in a tape where each cell is a separate tape of bytes.",
    "url": "https://esolangs.org/wiki/2B",
    "language_short": "brainfuck",
    "code": "+0+0+0+0+0+0+0+2)+0+0+9)+7))+3)-0-0-0-0-0-0-0-9)+0+0+0+0+0+0+0+0+7)-8)+3)-6)-8)-7-0-0-0-0-0-0)"
  },
  {
    "id": "780",
    "title": "2DFuck",
    "description": "2DFuck is another multidimensional brainfuck derivative esolang invented by TheWastl (wastl in PPCG). The language, as presumed by the title, runs on an infinite 2-dimensional memory tape, extending the 1-dimensional memory tape of brainfuck (There are also numerous other 2D brainfuck derivatives). There is an memory pointer which has an X value and a Y one, which indexes the 2D memory tape.",
    "url": "https://esolangs.org/wiki/2DFuck",
    "language_short": "brainfuck",
    "code": ".!.!..!.!....!..!..!.!.!.!.!..!.!..!...!..!.!..!...!..!.!....!..!.!.!..!....!.!......!.!.!.!.!...!.!..!.!....!.!...!..!.!..!..!.!..!...!..!..!.!....!.!....!."
  },
  {
    "id": "11",
    "title": "2L",
    "description": "2L (the Two Language), designed by Gregor Richards, is an esoteric programming language derived loosely from the PATH programming language and Brainfuck. 2L is Turing Complete.",
    "url": "",
    "language_short": "brainfuck",
    "code": " *+ 2L \"Hello, World!\" program by poiuy_qwert   +\r\n+                                                   +\r\n    *                                             +*\r\n    *     +                                        *+\r\n    + **                                "
  },
  {
    "id": "12",
    "title": "4D",
    "description": "",
    "url": "",
    "language_short": "c1",
    "code": "ALERT(\"Hello World!\")"
  },
  {
    "id": "13",
    "title": "4GL",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "main\r\n    display \"Hello World\"\r\nend main"
  },
  {
    "id": "14",
    "title": "4Test",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "testcase printHelloWorld()\r\n    print(\"Hello World!\")"
  },
  {
    "id": "15",
    "title": "4ThDimension (4th Dimension)",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "OPEN WINDOW (10;45;500;330;0;\"Hello Window\")\r\nWhile (True)\r\n    MESSAGE (\"Hello World!\")\r\nEnd while"
  },
  {
    "id": "16",
    "title": "8Th",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, world!\\n\" ."
  },
  {
    "id": "764",
    "title": "A++",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(print \"Hello World\")"
  },
  {
    "id": "17",
    "title": "A:;",
    "description": "A:; is an esoteric programming language created by User:OriginalOldMan. Each A:; program has a series of statements separated by semicolons. Each A:; statement has a series of arguments separated by colons. All A:; programs must be written on one line.",
    "url": "https://esolangs.org/wiki/A:;",
    "language_short": "c-like",
    "code": "j:Hello World;p:j"
  },
  {
    "id": "18",
    "title": "ABAP",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "REPORT ZHELLO_WORLD.\r\n \r\nSTART-OF-SELECTION.\r\n    WRITE: 'Hello World!'."
  },
  {
    "id": "19",
    "title": "ABC",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "WRITE \"Hello, World!\""
  },
  {
    "id": "20",
    "title": "ACIDIC",
    "description": "ACIDIC is an esoteric programming language made by User:iconmaster.",
    "url": "https://esolangs.org/wiki/ACIDIC",
    "language_short": "c-like",
    "code": "Hello, world!\r\nwP"
  },
  {
    "id": "21",
    "title": "ACL",
    "description": "ACL (Advanced Computer Language) is a language created in 2019 by User:Hanzlu. The language shall have a .adcl file extension.",
    "url": "https://esolangs.org/wiki/ACL",
    "language_short": "brainfuck",
    "code": "34344343444C3443443434343C34434344344C34434344344C34434344443C34344444C3434343434443C34434344443C34443443434C34434344344C34434434344C3434444343CC"
  },
  {
    "id": "22",
    "title": "Acpi",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "Scope(\\) {\r\n    Method(_WAK) {\r\n        Store (\"Hello World\", Debug)\r\n        Return(Package(2){0x00000000,0})\r\n    }\t\r\n}"
  },
  {
    "id": "23",
    "title": "ACRONYM",
    "description": "ACRONYM was created by Tslil Clingman in early 2008, originating from an idea the author had in late 2007. ACRONYM was created to serve the author's wishes for a highly obfuscated language in which no given programme would have major visual differences from any other given programme (with the exceptions of length and format)",
    "url": "https://esolangs.org/wiki/ACRONYM",
    "language_short": "brainfuck",
    "code": "{{&gt;&gt;{~~~~{-&lt;}~~~~~~~~~{-&lt;-&lt;}}&lt;&lt;}\r\n&lt;\/(&lt;&lt;&lt;){[&lt;]}:&gt;:{&gt;&gt;{~~~~~~~~{&lt;}~{&gt;}}&lt;&lt;}\\\r\n~&gt;{{~{v}}&gt;&gt;&gt;v{~}^&lt;&lt;&lt;}\/(&lt;&lt;&lt;){[&lt;&lt;]}:&gt;:{&gt;&gt;{~~~~~~~~{&lt;&lt;}~{&gt;&gt;}}&lt;&lt;"
  },
  {
    "id": "24",
    "title": "ACS",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#include \"zcommon.acs\"\r\nScript 1 OPEN\r\n{\r\n    Print(s: \"Hello, world!\");\r\n}"
  },
  {
    "id": "25",
    "title": "Actionscript Flashmx",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "_root.createTextField(\"mytext\",1,100,100,300,100);\r\nmytext.multiline = true;\r\nmytext.wordWrap = true;\r\nmytext.border = false;\r\n \r\nmyformat = new TextFormat();\r\nmyformat.color = 0xff0000;\r\nmyformat.bullet = false;\r\nmyformat.underline = true;\r\n \r\nmytext.tex"
  },
  {
    "id": "26",
    "title": "Actionscript",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "package \r\n{\r\n    import flash.display.Sprite;\r\n    import flash.text.TextField;\r\n    \r\n    public class actionscript extends Sprite\r\n    {\r\n        private var hello:TextField = new TextField();\r\n        \r\n        public function actionscript(){\r\n        "
  },
  {
    "id": "27",
    "title": "Actionscript2 (ActionScript 2)",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "trace( \"Hello World\" );"
  },
  {
    "id": "28",
    "title": "Actionscript3 (ActionScript 3)",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "package {\r\n \r\nimport flash.display.Sprite;\r\nimport flash.text.TextField;\r\nimport flash.text.TextFieldAutoSize;\r\nimport flash.text.TextFormat;\r\n \r\n[SWF(width='800', height='600', backgroundColor='#cccccc', frameRate='30')]\r\n \r\n    public class HelloFlash e"
  },
  {
    "id": "29",
    "title": "Ada",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "with Text_IO;\r\nprocedure Hello_World is\r\n    begin\r\n        Text_IO.Put_line(\"Hello World!\");\r\n    end Hello_World;"
  },
  {
    "id": "30",
    "title": "Advpl",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "User Function Hello()\r\nLocal cMsg := \"Hello, world!\"\r\nconout(cMsg)\r\nMsgInfo(cMsg)\r\nReturn"
  },
  {
    "id": "31",
    "title": "Aeolbonn",
    "description": "Aeolbonn (An esoteric output language based on natural numbers) is a Turing-complete esoteric language designed by Keymaker.",
    "url": "https://esolangs.org/wiki/Aeolbonn",
    "language_short": "c-like",
    "code": ":Hello, world!\r\n:"
  },
  {
    "id": "32",
    "title": "Agda",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module agda where\r\nopen import IO\r\n \r\nmain = run (putStrLn \"Hello World\")"
  },
  {
    "id": "33",
    "title": "Aheui",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "밤밣따빠밣밟따뿌\r\n빠맣파빨받밤뚜뭏\r\n돋밬탕빠맣붏두붇\r\n볻뫃박발뚷투뭏붖\r\n뫃도뫃희멓뭏뭏붘\r\n뫃봌토범더벌뿌뚜\r\n뽑뽀멓멓더벓뻐뚠\r\n뽀덩벐멓뻐덕더벅"
  },
  {
    "id": "34",
    "title": "Aime",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "integer\r\nmain(void)\r\n{\r\n    o_text(\"Hello world!\\n\");\r\n    \r\n    return 0;\r\n}"
  },
  {
    "id": "35",
    "title": "Aiml",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;aiml&gt;\r\n    &lt;category&gt;\r\n        &lt;pattern&gt;*&lt;\/pattern&gt;\r\n        &lt;template&gt;Hello World!&lt;\/template&gt;\r\n    &lt;\/category&gt;\r\n&lt;\/aiml&gt;"
  },
  {
    "id": "36",
    "title": "AIV",
    "description": "AIV is an interpreted weirdlang that uses french quotes instead of brackets.",
    "url": "https://esolangs.org/wiki/AIV",
    "language_short": "vim",
    "code": "display«\r\nThe rusted chains of prison moons are shattered by the sun.\r\n»\r\nstop«undisp»"
  },
  {
    "id": "782",
    "title": "Airline food",
    "description": "Airline food is an esoteric programming language created by User:Largejamie in April 2021 whose programs are supposed to look like Jerry Seinfeld's stand-up.",
    "url": "https://esolangs.org/wiki/Airline_food",
    "language_short": "",
    "code": "You ever notice this?\r\nWhat's the deal with this thing? It's kinda like this.\r\nWhat's the deal with airline food?\r\nWhat's the deal with it?\r\nIt's kinda like this thing. Just like it. \r\nLet's talk about this thing. It's kinda like this thing. It's kinda like this.\r\nYeah, Just like this thing. Just like it. Not like this.\r\nWhat's the deal with pilots? Just like it. Not like this. Just like it. See?\r\nLet's talk about this thing. Not like this.\r\nWhat's the deal with baggage claim? Just like this thing. Just like it. It's kinda like pilots.\r\nWhat's the deal with luggage? Just like baggage claim. It's kinda like this. It's kinda like this. Not like it. See?\r\nLet's talk about baggage claim. See? See? It's kinda like this thing. Not like this. See?\r\nLet's talk about it. Um, See? It's kinda like this. Not like this thing. Not like it. See?\r\nLet's talk about baggage claim. It's kinda like it. Not like this. See? It's kinda like this. Not like it. See? It's kinda like this thing. Not like this. \r\nSee? Not like this thing. Not like this. Not like this. See?\r\nLet's talk about luggage. Not like this. See?\r\nLet's talk about it. Um, It's kinda like this. See?');"
  },
  {
    "id": "37",
    "title": "ALAGUF",
    "description": "ALAGUF is a language made by User:iconmaster. It is an acronym for At Last, A Greatly Useful Funge. It is a fungeoid that is designed to be easy to be powerful and yet amazinly twisty.",
    "url": "https://esolangs.org/wiki/ALAGUF",
    "language_short": "c-like",
    "code": "\"Hello World!\"#!"
  },
  {
    "id": "38",
    "title": "Alda",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "piano: c8 d e f g f e d c2."
  },
  {
    "id": "39",
    "title": "Algae",
    "description": "",
    "url": "",
    "language_short": "c-like\r\n",
    "code": "printf(\"Hello world!\\n\");"
  },
  {
    "id": "40",
    "title": "ALGOL W",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "begin\r\n    write( \"Hello world!\" )\r\nend."
  },
  {
    "id": "41",
    "title": "algol60 (ALGOL 60)",
    "description": "",
    "url": "",
    "language_short": "gams",
    "code": "BEGIN\r\n    FILE F(KIND=REMOTE);\r\n    EBCDIC ARRAY E[0:11];\r\n    REPLACE E BY \"HELLO WORLD!\";\r\n    WRITE(F, *, E);\r\nEND."
  },
  {
    "id": "42",
    "title": "algol68 (ALGOL 68)",
    "description": "",
    "url": "",
    "language_short": "gams",
    "code": "begin\r\n    print((\"Hello, world!\",newline))\r\nend"
  },
  {
    "id": "43",
    "title": "Alore",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Print('Hello world!')"
  },
  {
    "id": "765",
    "title": "AlPhAbEt",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "{\r\n\r\n  0>,\r\n\r\n  1>.  2>,  3>.  4>.  5>,  6>.  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>.  6>,  7>.  8>,  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>,  8>,  9>,\r\n  1>.  2>.  3>,  4>.  5>.  6>.  7>.  8>.  9>,\r\n  1>.  2>,  3>.  4>,  5>.  6>,  7>,  8>,  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>,  8>,  9>,\r\n  1>.  2>,  3>,  4>,  5>.  6>.  7>,  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>.  6>,  7>.  8>.  9>,\r\n\r\n}"
  },
  {
    "id": "44",
    "title": "Alphaprint",
    "description": "Alphaprint is a language made by User:PythonshellDebugwindow.",
    "url": "https://esolangs.org/wiki/Alphaprint",
    "language_short": "plaintext",
    "code": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstUvwxyzabcdefghijklmnopqrstuvwXyzabcdEfghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstu"
  },
  {
    "id": "45",
    "title": "Amiga E (Amiga-E)",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "PROC main() IS WriteF('Hello World\\n')"
  },
  {
    "id": "46",
    "title": "Amos",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Print \"Hello world!\""
  },
  {
    "id": "47",
    "title": "Android",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": "package com.example.helloworld;\r\n \r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.widget.TextView;\r\n \r\npublic class HelloWorld extends Activity {\r\n    \/** Called when the activity is first created. *\/\r\n    @Override\r\n    public v"
  },
  {
    "id": "48",
    "title": "AngelScript",
    "description": "",
    "url": "",
    "language_short": "angelscript",
    "code": "void main() { print(\"Hello world\\n\"); }"
  },
  {
    "id": "49",
    "title": "Angular",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "$scope.$log = $log;\r\n$scope.message = 'Hello World!';"
  },
  {
    "id": "50",
    "title": "Ante",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "9♦8♥J♦A♦2♣3♥7♠J♦A♦7♦J♦J♦A♦3♦J♦5♥6♦4♥J♥A♥6♠6♠J♥A♦8♦J♦A♦8♠J♦A♦3♦J♦A♦6♠J♦A♦8♠J♦A♥3♦2♠J♥A♥2♣6♠J♥"
  },
  {
    "id": "51",
    "title": "AntLang",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "\"Hello World\""
  },
  {
    "id": "52",
    "title": "AnyPL",
    "description": "AnyPL is an esoteric programming language created by Peter Larsen in 2011. AnyPL stands for Any Programming Language. The most current version of AnyPL is 0001.",
    "url": "https://esolangs.org/wiki/AnyPL",
    "language_short": "brainfuck",
    "code": "HelloWor 0001 .2.. S1.. .3.. .3.. Tr.. .1.c ---- ........ [ Put the strings to the tape. ]\r\nld...... 0010 .&lt;.. 1.0. .&lt;.. .... .... .... 121= ........ [ Output.                      ]\r\n........ 0001 .... .... .... .... .... .... -11. ........ [ End e"
  },
  {
    "id": "53",
    "title": "APC",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "probe program\r\n{\r\n    on_entry log (\"Hello, World!\\n\");\r\n}"
  },
  {
    "id": "54",
    "title": "Apex",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "global with sharing class HelloWorld {\r\n    global static void main() {\r\n        System.debug('Hello World');\r\n    }\r\n}"
  },
  {
    "id": "55",
    "title": "APL",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "⎕←'Hello World!'"
  },
  {
    "id": "56",
    "title": "AppleScript",
    "description": "",
    "url": "",
    "language_short": "applescript",
    "code": "display dialog \"Hello World\""
  },
  {
    "id": "766",
    "title": "Applesoft BASIC",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "10 PRINT \"HELLO WORLD\""
  },
  {
    "id": "57",
    "title": "ARC",
    "description": "",
    "url": "",
    "language_short": "arcade",
    "code": "(prn \"Hello, World!\")"
  },
  {
    "id": "58",
    "title": "Arduino",
    "description": "",
    "url": "",
    "language_short": "arduino",
    "code": "void setup() {\r\n    \/\/ put your setup code here, to run once:\r\n    \/\/ initialize serial communication at 9600 bits per second:\r\n    Serial.begin(9600);\r\n    \/\/print message serial monitor\r\n    Serial.println(\"Hello world!\");\r\n}\r\n \r\nvoid loop() {\r\n    \/\/ p"
  },
  {
    "id": "59",
    "title": "Arena",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print(\"Hello World!\");"
  },
  {
    "id": "60",
    "title": "Argh",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "lppppppppppppsrfj\r\nHello World!*  j\r\n            qPh"
  },
  {
    "id": "767",
    "title": "ArkScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(print \"Hello World\")"
  },
  {
    "id": "61",
    "title": "ArnoldC",
    "description": "ArnoldC is an esoteric programming language created with Scala by Lauri Hartikka. The source is available here, along with tutorials and example programs.",
    "url": "https://esolangs.org/wiki/ArnoldC",
    "language_short": "plaintext",
    "code": "IT'S SHOWTIME\r\nTALK TO THE HAND \"hello world\"\r\nYOU HAVE BEEN TERMINATED"
  },
  {
    "id": "783",
    "title": "A.R.T.I.C.L.E.",
    "description": "A.R.T.I.C.L.E. is an esoteric programming language created in october 5 2020 by User:SoicBR A.R.T.I.C.L.E. stands for: Apple Random Tower Island Cat LOL Elephant",
    "url": "https://esolangs.org/wiki/A.R.T.I.C.L.E.",
    "language_short": "",
    "code": "This is the first ever \"useful\" program written\r\n in the ARTICLE. It's an esoteric programming\r\n language made by me, Soic. I don't know what else to\r\n write but i still to write code.\r\n Now, it's time to print the first character in\r\n the very cool debug console.\r\n Here i go again to write code to a dumb\r\n language. I don't really know what to. say, yes\r\n i swapped the position of a period and a comma\r\n just because i'm very, very, lazy.\r\n Now, it's time to print the first character in\r\n the very cool debug console.\r\n Here i go yet again writing code to a dumb\r\n language. Yes, i am very LAZY. Lazy Lazy Lazy\r\n Lazy, laughing out loud, yes, i did this twice.\r\n Now, i will print the first character in\r\n the cool debug console yet again.\r\n Now, i will print the first character in\r\n the cool console yet again, again.\r\n Ngl, i'm out of ideas now and i'm just\r\n writing stuff. I need to write code.\r\n I need to write a lot of code.\r\n I'm tired, now i will just filler my way\r\n out f f f f.\r\n f0 f1 f2 f3 f4\r\n f5 f6 f7 f8 f9 f10 f11. n1 n2\r\n n3 n4 n5 n6 n7 n8 n9. n1 n2 n3 n4 n5 n6 n7 n8\r\n n9 n10 n11 n12 n13 n14 n15 n16 n17 n18 n19 n20.\r\n f means filler f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11. n1 n2 n3\r\n n4 n5 n6 n7 n8 n9 n10. n1 n2 n3 n4 n5 n6 n7 n8\r\n n9 n10 n11 n12.\r\n f f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12\r\n n13.\r\n f f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8.\r\n F f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11.\r\n F f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13.\r\n F f f f f f f f f f f f f f."
  },
  {
    "id": "768",
    "title": "AsciiDots",
    "description": "",
    "url": "",
    "language_short": "",
    "code": ".-$\"Hello World\" "
  },
  {
    "id": "62",
    "title": "asdf",
    "description": "asdf is an esoteric programming language created by David Catt (user:David.werecat) which uses only 4 instructions: a, s, d and f.",
    "url": "https://esolangs.org/wiki/Asdf",
    "language_short": "brainfuck",
    "code": "asaasaasssasaasssasaaaasssasaasssasaaaaaaaasssasaaaasssasaaaasssasaasssasaasss\r\nasaasssasaasssasaaaasssasaasssasaaaasssasaaaaaasssasaaaasssasaasssasaaaasssasa\r\naaaaasssasaaaasssasaasssasaaaaaaaasssasaaaasssasaasssasaasssasaaaasssasaaaaaaa\r\nasssasaasssasaa"
  },
  {
    "id": "63",
    "title": "Ash",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "public class Ash {\r\n    public static func main(args : [String]) {\r\n        println(\"Hello, world!\")\r\n    }\r\n}"
  },
  {
    "id": "64",
    "title": "Asm2bf",
    "description": "The only true brainfuck assembler. Produces small and efficient brainfuck code based on instruction choice. asm2bf is the only true brainfuck assembler in active development since 2017. It produces small and efficient brainfuck code based on instruction choice. It's features include a Lua preprocessor, labels, a precise floating point library, conditional branching, dynamic memory allocation procedures, stack-based offsets, instruction-level move semantics, virtual instructions, effective adresses and signed arithmetic. It's possible to define recursive procedures, and do basically everything you'd expect from a normal assembler.",
    "url": "https://esolangs.org/wiki/Asm2bf",
    "language_short": "properties",
    "code": "stk 2\r\norg 0\r\ntxt \"Hello World!\"\r\ndb_ 0\r\n        psh 1\r\n        psh 0\r\n        jmp 100\r\nlbl 1\r\n        end\r\n \r\nlbl 100\r\n        pop r1\r\nlbl 102\r\n        rcl r2,r1\r\n        jz_ r2,101\r\n        out r2\r\n        inc r1\r\n        jmp 102\r\nlbl 101\r\n        out 1"
  },
  {
    "id": "65",
    "title": "ASP (Asparagus)",
    "description": "See the GitHub repository for more information. The text below was copied from the wiki's syntax page.",
    "url": "https://esolangs.org/wiki/Asparagus",
    "language_short": "vbscript",
    "code": "&lt;%@ Language= \"VBScript\" %&gt;\r\n                    &lt;%\r\n                        Response.Write(\"Hello World\")\r\n                    %&gt;"
  },
  {
    "id": "784",
    "title": "Asparagus Assembly",
    "description": "Note that this program, when assembled, is much larger than the b1 version due to technical limitations with the assembler.",
    "url": "https://github.com/all-other-usernames-were-taken/Asparagus/tree/assembler",
    "language_short": "",
    "code": "set,0,Hello  World!\r\nset,1,44\r\nprint,0,0,0\r\nstring,char,1,2,1\r\nprint,0,5,1"
  },
  {
    "id": "66",
    "title": "Aspectj",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": "System.out.println(\"Hello World!\");"
  },
  {
    "id": "67",
    "title": "Assembler 6502",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; goodbyeworld.s for C= 8-bit machines, ca65 assembler format.\r\n; String printing limited to strings of 256 characters or less.\r\n    \r\na_cr\t= $0d\t\t; Carriage return.\r\nbsout\t= $ffd2\t\t; KERNAL ROM, output a character to current device.\r\n    \r\n    .code\r\n   "
  },
  {
    "id": "68",
    "title": "Assembler 6502appleII",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "STROUT \tEQU\t$DB3A ;OUTPUTS AY-POINTED NULL TERMINATED STRING\r\n    LDY\t#&gt;HELLO\r\n    LDA\t#&lt;HELLO\r\n    JMP\tSTROUT\r\n \r\nHELLO\tASC\t\"HELLO WORLD!\",00"
  },
  {
    "id": "69",
    "title": "Assembler 6502c64",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "ldy #0\r\nbeq in\r\nloop:\r\njsr $ffd2\r\niny\r\nin:\r\nlda hello,y\r\nbne loop\r\nrts\r\nhello: .tx \"Hello World!\"\r\n        .by 13,10,0"
  },
  {
    "id": "70",
    "title": "Assembler 6809vectrex",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; Hello World for Vectrex computer with 6809 CPU\r\n; by Frog ( http:\/\/frog.enlight.ru )\r\n; 24 March 2016\r\n \r\n;***************************************************************************\r\n                org     0\r\n \r\n; this header required to identify ROM "
  },
  {
    "id": "71",
    "title": "Assembler 8048 videopac",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; Hello World for Philips Videopac (Magnavox Odyssey 2)\r\n; by Frog ( https:\/\/github.com\/petersobolev )\r\n; 25 July 2016\r\n \r\n    cpu\t8048\r\n    org\t400h\r\n \r\n; interrupt vectors\r\n    jmp     02C3h                           ; selectgame (RESET)\r\n    jmp     00"
  },
  {
    "id": "72",
    "title": "Assembler arm",
    "description": "",
    "url": "",
    "language_short": "armasm",
    "code": ".data\r\nmessage:                .asciz \"Hello World\\n\"\r\n \r\n.text\r\n.global main\r\nmain:\r\n    mov r0, #1          @ file descriptor 1\r\n    ldr r1, =message    @ load address of message\r\n    mov r7, #4          @ system call write\r\n    swi #0              @ di"
  },
  {
    "id": "73",
    "title": "Assembler Atari 2600",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ";\r\n; hello.asm\r\n;\r\n; A \"Hello, World!\" which illustrates an Atari 2600 programming\r\n; introduction talk (slides at http:\/\/slideshare.net\/chesterbr).\r\n;\r\n; This is free software (see license below). Build it with DASM\r\n; (http:\/\/dasm-dillon.sourceforge.net"
  },
  {
    "id": "74",
    "title": "Assembler Bootsect",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "[ORG\t0x7C00]\r\n \r\n    mov\tsi,HelloWorld\r\n    call\tprint_string\r\n \r\n    jmp\t$\r\n    \r\n    HelloWorld\tdb\t\"Hello world!\",0xD,0xA,0\r\n    \r\nprint_string:\r\n    mov\tah,0xE\r\n.repeat:\r\n    lodsb\r\n    cmp\tal,0\r\n    je\t.done\r\n    int\t0x10\r\n    jmp\t.repeat\r\n.done:\r\n   "
  },
  {
    "id": "75",
    "title": "Assembler DCPU16",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ";;;;;;;;;;;;;;;;;;;\r\njsr init_devices\r\njsr Hello_World\r\nset PC,end\r\n;;;;;;;;;;;;;;;;;;;\r\n:dev_screen   dat 0\r\n:device_count dat 0\r\n;;;;;;;;;;;;;;;;;;;\r\n:find_devices\r\nhwn [device_count]\r\nset I,0\r\n:find_devices_loop\r\nhwq i\r\nife A,0xf615\r\n    set [dev_scree"
  },
  {
    "id": "76",
    "title": "Assembler FASM DOS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "format MZ\r\n \r\nentry .code: start\r\n \r\nsegment .code\r\nstart:\r\n    mov ax, .data ; put data segment into ax\r\n    mov ds, ax    ; there, I setup the DS for you\r\n    mov dx, msg   ; now I give you the offset in DX. DS:DX now completed.\r\n    mov ah, 9h\r\n    int"
  },
  {
    "id": "77",
    "title": "Assembler hla",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "program HelloWorld;\r\n \r\n#include( \"stdlib.hhf\" );\r\n \r\nbegin HelloWorld;\r\n    stdout.put( \"Hello, world!\", nl );\r\nend HelloWorld;"
  },
  {
    "id": "769",
    "title": "Assembler HP85",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "010 ! Hello world in Assembler for the HP-85\r\n020         NAM HELLO\r\n030         DEF RUNTIM\r\n040         DEF TOKENS\r\n050         DEF PARSE\r\n060         DEF ERMSG\r\n070         DEF INIT\r\n100 PARSE   BYT 0,0\r\n110 RUNTIM  BYT 0,0,377,377\r\n120 TOKENS  BYT 377\r\n130 ERMSG   BYT 377\r\n140 !\r\n150 INIT    LDM R26,=MSG\r\n160         ADMD R26,=BINTAB\r\n170         LDM R36,=12D,0\r\n180         JSB =OUTSTR\r\n190         RTN\r\n200 MSG     ASC \"Hello World\"\r\n210 BINTAB  DAD 101233\r\n220 OUTSTR  DAD 35052\r\n300         FIN"
  },
  {
    "id": "78",
    "title": "Assembler IBM360",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "        LA    1,MSGAREA     Point Register 1 to message area\r\n        SVC   35            Invoke SVC 35 (Write to Operator) \r\n        BR    14            Return\r\nMSGAREA EQU   *             Message Area\r\n        DC    AL2(19)       Total area length = 19 "
  },
  {
    "id": "79",
    "title": "Assembler Intel",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; hello_world.asm intel \r\n.model small\r\n.stack 100h\r\n.data\r\nmsg db \"Hello World!\",'$'\r\n.code\r\nmain proc\r\n        mov ax,@data\r\n        mov ds, ax\r\n \r\n; hello-world is there \r\n        mov dx,offset msg\r\n        mov ah,09\r\n        int 21h\r\n \r\n        mov ax"
  },
  {
    "id": "80",
    "title": "Assembler lc-3 (Assembler lc3)",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "\t\t\t.ORIG x3000\r\n \r\n            LEA R0, HELLOWORLD\r\n            PUTS\r\n    \r\nHELLOWORLD\t.STRINGZ \"Hello world!\\n\""
  },
  {
    "id": "81",
    "title": "Assembler m68000 amigaos",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; \"Hello World\" in Motorola 68000 machine language, for AmigaOS\r\n \r\nExecBase     = 4\r\nOpenLibrary  = -552\r\nCloseLibrary = -414\r\nPutStr       = -948\r\n \r\n    section \"main\", code\r\n \r\n    ; open \"dos.library\"\r\n \r\n    move.l\tExecBase, a6\r\n    lea\tlib, a1\r\n   "
  },
  {
    "id": "82",
    "title": "Assembler MASM DOS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; 16 bit dos assembly\r\n.model small\r\n.stack\r\n.data\r\n    message   db \"Hello world!\", \"$\"\r\n.code\r\n    main    proc\r\n        mov   ax,seg message\r\n        mov   ds,ax\r\n        mov   ah,09\r\n        lea   dx,message\r\n        int   21h\r\n        \r\n        mov  "
  },
  {
    "id": "83",
    "title": "Assembler MASM Win32",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; ---------------------------------------------\r\n; Hello World for Win32 Intel x86 Assembly\r\n;\r\n; by fruel (https:\/\/github.com\/fruel)\r\n; 13 June 2016\r\n; ---------------------------------------------\r\n \r\n.386\r\n.model flat,stdcall\r\n.stack 4096\r\n \r\nEXTRN Exi"
  },
  {
    "id": "84",
    "title": "Assembler MASM Win64",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; ---------------------------------------------\r\n; Hello World for Win64 Intel x64 Assembly\r\n;\r\n; by fruel (https:\/\/github.com\/fruel)\r\n; 13 June 2016\r\n; ---------------------------------------------\r\n \r\nGetStdHandle PROTO\r\nExitProcess PROTO\r\nWriteConsoleA"
  },
  {
    "id": "85",
    "title": "Assembler MIPS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ".data\r\n    hw:        .asciiz        \"Hello, World!\"\r\n.text\r\nmain:\r\n    la $a0, hw           #load the address of hw into $a0\r\n    li $v0, 4            #load 4 into $v0\r\n    syscall              #perform the print_string syscall\r\n    li $v0, 10           "
  },
  {
    "id": "86",
    "title": "Assembler MMIX",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "t\tIS\t$255\r\n    LOC\tData_Segment\r\n    GREG\t@\r\nString\tBYTE\t\"Hello World\",#a,0\r\n \r\n    LOC\t#100\r\nMain\tLDA\tt,String\r\n    TRAP\t0,Fputs,StdOut\r\n    TRAP\t0,Halt,0"
  },
  {
    "id": "87",
    "title": "Assembler NASM FreeBSD",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "section\t.text\r\n    global _start\t\t\t;must be declared for linker (ld)\r\n_syscall:\t\t\r\n    int\t0x80\t\t;system call\r\n    ret\r\n_start:\t\t\t\t;tell linker entry point\r\n \r\n    push\tdword len\t;message length\r\n    push\tdword msg\t;message to write\r\n    push\tdword 1\t\t;fi"
  },
  {
    "id": "88",
    "title": "Assembler NASM Linux",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "section\t.text\r\n    global _start\t\t\t;must be declared for linker (ld)\r\n_start:\t\t\t\t\t;tell linker entry point\r\n \r\n    xor\tebx,ebx \t;ebx=0\r\n    mov\tecx,msg\t\t;address of message to write\r\n    lea\tedx,[ebx+len]\t;message length\r\n    lea\teax,[ebx+4]\t;system call "
  },
  {
    "id": "89",
    "title": "Assembler NASM Linux64",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "section\t.text\r\n    global _start\t\t\t;must be declared for linker (ld)\r\n_start:\t\t\t\t\t;tell linker entry point\r\n \r\n    xor\teax,eax\t\t;eax:=0\r\n    lea\tedx,[rax+len]\t;message length\r\n    mov\tal,1\t\t;system call number (sys_write)\r\n    mov\tesi,msg\t\t;message to wri"
  },
  {
    "id": "90",
    "title": "Assembler NASM Macho64",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "global start\r\n \r\nsection .text\r\nstart:\r\n    mov         rax, 0x2000004  ; write\r\n    mov         rdi, 1          ; stdout\r\n    mov         rsi, msg\r\n    mov         rdx, msg.len\r\n    syscall\r\n \r\n    mov         rax, 0x2000001  ; exit\r\n    mov         rdi,"
  },
  {
    "id": "91",
    "title": "Assembler NASM Win32",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "BITS\t32\r\nglobal\t_main\r\nextern\t_printf\r\nsection\t.text\r\n    push\tmsg\r\n    call\t_printf\r\n    add\t\tesp,4\r\n    ret\r\nsection\t.data\r\n    msg:\tdb\t\"Hello world\",0Ah,0"
  },
  {
    "id": "770",
    "title": "Assembler pdp10 midas",
    "description": "",
    "url": "",
    "language_short": "",
    "code": " TITLE Hello World\r\n\r\nA==1\r\nB==2\r\nTYO==1\r\n\r\nSTART: .OPEN TYO,[.UAO,,'TTY]\r\n .LOSE\r\n MOVE A,[440700,,HELLO]\r\nLOOP: ILDB B,A\r\n JUMPE B,[.LOGOUT 1,]\r\n .IOT TYO,B\r\n JRST LOOP\r\n\r\nHELLO: ASCIZ /Hello World/\r\n\r\n END START"
  },
  {
    "id": "771",
    "title": "Assembler pdp11 palx",
    "description": "",
    "url": "",
    "language_short": "",
    "code": " .TITLE Hello World\r\n\r\nR0=%0\r\nR1=%1\r\nTPS==177564\r\nTPB==177566\r\n\r\n .=400\r\n\r\nSTART: MOV #1,@#TPS\r\n MOV #HELLO,R0\r\nLOOP: TSTB @#TPS\r\n BPL LOOP\r\n MOVB (R0)+,R1\r\n BEQ STOP\r\n MOVB R1,@#TPB\r\n BR LOOP\r\n\r\nSTOP: HALT\r\n\r\nHELLO: .ASCIZ /Hello World/\r\n\r\n .END START"
  },
  {
    "id": "92",
    "title": "Assembler TASM DOS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "IDEAL\r\nMODEL SMALL\r\nSTACK 100h\r\n \r\nDATASEG\r\nmsg\t\t\tdb \"Hello World!\", 0dh, 0ah, \"$\"\r\n \r\nCODESEG\r\nstart:\r\n    mov\t\tax, @data\r\n    mov\t\tds, ax\r\n    \r\n    mov\t\tdx, offset msg\r\n    mov\t\tah, 9\r\n    int\t\t21h\r\n    \r\n    mov\t\tah, 4ch\r\n    int\t\t21h\r\n \r\nend start"
  },
  {
    "id": "93",
    "title": "Assembler tms9900 ti99 4a",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "* Hello World for TI-99\/4a computer with TMS9900 CPU\r\n* by Frog ( http:\/\/frog.enlight.ru )\r\n* 15 April 2016\r\n*\r\n****************************************************************************\r\n \r\n        DEF     START\r\n \r\nWRKSP   EQU     >8300\r\n \r\nVDPWD   EQ"
  },
  {
    "id": "94",
    "title": "Assembler Vax Ultrix",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": ".data\r\nhw:\r\n    .ascii \"Hello World!\\12\"\r\n.text\r\n    .align 1\r\n.globl _main\r\n_main:\r\n    .word 0\r\n    pushl $13\r\n    pushab hw\r\n    pushl $1\r\n    calls $3,_write\r\n    ret"
  },
  {
    "id": "95",
    "title": "Assembler Z80 Knightos",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "#include \"kernel.inc\"\r\n    .db \"KEXC\"\r\n    .db KEXC_ENTRY_POINT\r\n    .dw start\r\nstart:\r\n    pcall(getLcdLock)\r\n \r\n    pcall(allocScreenBuffer)\r\n    pcall(clearScreen)\r\n \r\n    kld(hl, message)\r\n    ld de, 0\r\n    pcall(drawStr)\r\n \r\n    jr $ ; Loop forever\r\n"
  },
  {
    "id": "96",
    "title": "Assembler Z80 TI83calculator",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": ".NOLIST\r\n#define   EQU   .equ\r\n#define   equ   .equ\r\n#define   END   .end\r\n#define   end   .end\r\n#include \"ti83plus.inc\"\r\n.LIST\r\n        .org 9D93h\r\n        .db $BB,$6D\r\n        ld a,0\r\n        ld (CURCOL),a\r\n        ld (CURROW),a\r\n        ld hl,text\r\n   "
  },
  {
    "id": "772",
    "title": "ATS2",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "implement main0 () = println! \"Hello World\""
  },
  {
    "id": "97",
    "title": "Assembler Z80 zxspectrum",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "org $6000\r\n    ld bc, STRING\r\n    ld de, SCR\r\n \r\nLOOP\r\n    ld a, (bc)\r\n    cp 0\r\n    jr z, EXIT\r\n    rst $10\r\n    inc bc\r\n    inc de\r\n    jr LOOP\r\n \r\nEXIT\r\n    ret\r\n    \r\nSCR equ 16384\r\n \r\nSTRING\r\n    defb \"Hello World!\"\r\n    defb 13, 0"
  },
  {
    "id": "98",
    "title": "Assembly language",
    "description": "Assembly language is a Harvard-architectured computer machine code invented by User:A. It has all the basic features of a modern computer. The machine code is inspired by Little Man Computer. The machine code is extending.",
    "url": "https://esolangs.org/wiki/Assembly_language",
    "language_short": "mipsasm",
    "code": "DAT 01 48\r\nMOV 00 01\r\nDAT 01 65\r\nMOV 00 01\r\nDAT 01 6C\r\nMOV 00 01\r\nMOV 00 01\r\nDAT 02 6F\r\nMOV 00 02\r\nDAT 01 20\r\nMOV 00 01\r\nDAT 01 77\r\nMOV 00 01\r\nMOV 00 02\r\nDAT 01 72\r\nMOV 00 01\r\nDAT 01 6C\r\nMOV 00 01\r\nDAT 01 64\r\nMOV 00 01"
  },
  {
    "id": "99",
    "title": "Attache",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Print[\"Hello, World!\"]"
  },
  {
    "id": "100",
    "title": "Aubergine",
    "description": "Aubergine is a minimalist language with 4 instructions, 4 variables, and a single constant, created by User:Boily in 2008.",
    "url": "https://esolangs.org/wiki/Aubergine",
    "language_short": "brainfuck",
    "code": "=aA-a1=oA=bi+b1-Ab-bb:bA+B1=iBGolf by Quintopia\r\n!dlroW ,olleH"
  },
  {
    "id": "101",
    "title": "Auo",
    "description": "Auo by User:XFire35 mixes ideas and changes some conventions, and may be quite logically random in its implementation. It utilises a stack which is symbolised by the '@' sign within the language. It also uses strict typing, so there is no automatic conversion of strings into numbers. Auo strictly uses lines as the ending point of an expression or command, therefore leaking onto another line will result in the new line being evaluated separately from its parent. Auo has three stacks, a normal stack, a variable stack and the jump stack.",
    "url": "https://esolangs.org/wiki/Auo",
    "language_short": "c-like",
    "code": "i.o:['Hello World!']"
  },
  {
    "id": "102",
    "title": "AutoHotKey",
    "description": "",
    "url": "",
    "language_short": "autohotkey",
    "code": "MsgBox, Hello World!"
  },
  {
    "id": "103",
    "title": "AutoIt",
    "description": "",
    "url": "",
    "language_short": "autoit",
    "code": "MsgBox(0, \"Message Box\", \"Hello World!\")"
  },
  {
    "id": "773",
    "title": "Avisynth",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "MessageClip(\"Hello World\")"
  },
  {
    "id": "104",
    "title": "Awful",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#!\/usr\/bin\/awful\r\n \r\n:writeln s\"Hello world!\""
  },
  {
    "id": "105",
    "title": "AWK",
    "description": "",
    "url": "",
    "language_short": "awk",
    "code": "# awk -f awk.awk\r\nBEGIN { print \"Hello World\" }"
  },
  {
    "id": "106",
    "title": "B",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/* Hello World in B *\/\r\n \r\nmain() {\r\n    extern a, b, c;\r\n        putchar (a); putchar (b); putchar (c); putchar ('!*n');\r\n}\r\n \r\na 'hell' ;\r\nb 'o, w' ;\r\nc 'orld' ;"
  },
  {
    "id": "785",
    "title": "Babalang",
    "description": "Babalang is a thematic, Turing-complete esoteric programming language inspired by the rule system within the (also Turing-complete) indie game Baba Is You. The language is based around statements (akin to rules in Baba Is You), each with a subject, verb, one or more targets, and an optional condition. The language supports variables, loops, functions, structs, and basic IO operations. Babalang was written in March of 2020 by User:RocketRace, and is currently in version 1.1.1.",
    "url": "https://esolangs.org/wiki/Babalang",
    "language_short": "",
    "code": "// Initialize constants\r\n// Even though these are numbers, the interpreter considers them variables.\r\n// This is important to keep in mind.\r\n1 is you and move 2 is 1 and 1 4 is 2 and 2 8 is 4 and 4 \r\n16 is 8 and 8 32 is 16 and 16 64 is 32 and 32\r\n\r\n// Initialize a stack\r\nhello_world is group\r\n\r\n// Initialize character with value \"H\" (decimal 72)\r\nH is 64 and 8\r\n\r\n// Initialize the rest of the characters\r\ne is 64 and 32 and 4 and 1\r\nl is 64 and 32 and 8 and 4\r\n// `X and not Y` stands for `X + (-Y)`\r\no is 64 and 32 and 16 and not 1\r\ncomma is 32 and 8 and 4\r\nsp is 32\r\nw is 64 and 32 and 16 and 8 and not 1\r\nr is 64 and 32 and 16 and 2\r\nd is 64 and 32 and 4\r\nexcl is 32 and 1\r\nnewline is 8 and 2\r\n\r\n// Push the appropriate characters to the stack\r\nhello_world has H and e and l and l and o and comma and sp \r\n    and w and o and r and l and d and excl and newline\r\n\r\n// Print the contents of the stack\r\nhello_world is text"
  },
  {
    "id": "774",
    "title": "BAIK",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "tulis \"Hello World\""
  },
  {
    "id": "775",
    "title": "Ballerina",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "import ballerina/io;\r\n\r\npublic function main() {\r\n    io:println(\"Hello World\");"
  },
  {
    "id": "107",
    "title": "BackFlip",
    "description": "BackFlip is a 2-D reversible programming language created by User:ais523 in 2006.",
    "url": "https://esolangs.org/wiki/BackFlip",
    "language_short": "brainfuck",
    "code": "\\72N101N108N108N111N44N32N119N111N114N108N100N33N10N\r\n\\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"
  },
  {
    "id": "108",
    "title": "Backshift",
    "description": "Backshift is another sorting algorithm that aims to implement sorting in clean code invented by User:A. It is less efficient than any other sorting algorithm; in its worst case, its algorithmic complexity is O(∞). However, it was best known as an esoteric programming language after people started to abuse the buggy algorithm to write useful programs.",
    "url": "https://esolangs.org/wiki/Backshift",
    "language_short": "plaintext",
    "code": "Hello, World"
  },
  {
    "id": "109",
    "title": "BAM128",
    "description": "BAM128 is an esoteric programming language invented by Simone Russo (User:Eafkuor). It consists of a set of instructions to manage two pointers and a square matrix M of 128x128 elements. The two pointers (from now on called P1 and P2) contain the row and column, respectively, of the matrix element we are working on. We can modify just one of these pointers at a time. Both P1 and P2 and every matrix element can assume values in the range [0, 127].",
    "url": "https://esolangs.org/wiki/BAM128",
    "language_short": "brainfuck",
    "code": "xhhhhooooooooohhhhhhxooooooooxooooooxjjjxhoooohhhxhohhhhhhhxhhhhjjjhhhxhhhhooooooooohhhhhhxjjjxxjjjjjjjxjhhhhxjhhhhhhhhjjjhh"
  },
  {
    "id": "786",
    "title": "Barely",
    "description": "Barely is an esoteric programming language created by Jeffry Johnston in 2006, with the goal of having as small a turing complete interpreter as possible. The interpreter is in MS-DOS COM binary format and is 59 bytes in size. It was written using DEBUG, so the source listing is made from disassemblies at different points in the program.",
    "url": "https://esolangs.org/wiki/Barely",
    "language_short": "",
    "code": "]xhhhhooooooooohhhhhhxooooooooxooooooxjjjxhoooohhhxhohhhhhhhxhhhhjjjhhhxhhhhooooooooohhhhhhxjjjxxjjjjjjjxjhhhhxjhhhhhhhhjjjhh~"
  },
  {
    "id": "110",
    "title": "Bash",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/bin\/bash\r\necho \"Hello World!\""
  },
  {
    "id": "776",
    "title": "BASIC 256",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "Print \"Hello World\""
  },
  {
    "id": "111",
    "title": "BASIC",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "10 REM Hello World in BASIC\r\n20 PRINT \"Hello World\""
  },
  {
    "id": "112",
    "title": "Batsh",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "@echo off\r\necho Hello, World!\r\npause"
  },
  {
    "id": "113",
    "title": "Batsh",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "println(\"Hello world\");"
  },
  {
    "id": "114",
    "title": "Battlestar",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/usr\/bin\/bts\r\nconst hello = \"Hello, world!\\n\"\r\nprint(hello)"
  },
  {
    "id": "115",
    "title": "Bauberqueue",
    "description": "Bauberqueue is a queue-based language created by User:Quintopia in 2017. It takes the data storage and syntax principles of Aubergine but replaces the single tape with a list of queues. It replaces Aubergine's conditional jump with a Resplicate-like subqueue duplication command.",
    "url": "https://esolangs.org/wiki/Bauberqueue",
    "language_short": "brainfuck",
    "code": "=b1=bB\\x11=a1=aA\\x19+aB-b1iia=a1+a1=oA=a1=aA\\x19+aB-b1iia\r\nHello, World!\\n\r\n!"
  },
  {
    "id": "777",
    "title": "BC GNU",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print \"Hello World\"\r\nquit"
  },
  {
    "id": "778",
    "title": "BC",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"Hello World\""
  },
  {
    "id": "116",
    "title": "BCDFuck",
    "description": "BCDFuck takes a stream of bytes and reads each byte as two BCD-encoded 4-bit words. Like other Brainfuck variants, BCDFuck operates on an array of cells, which in this case are 4 bits wide. The digits 0-9 are entered directly into the cells while the six 'wasted' states of 4-bit BCD encoding are translated into brainfuck-like instructions that act on the aforementioned array. Since any 4-bit word is a valid BCDFuck instruction, it would follow that all cells can be executed (as long as potential problems like unbalanced brackets can be ignored).",
    "url": "https://esolangs.org/wiki/BCDFuck",
    "language_short": "brainfuck",
    "code": "4A E4 AE 7A 7A E7 A8 AE 1A E6 AE 5A 5A E6 AE 5A 5A E4 A5 AE 3A E0 EA 3A\r\nE2 AE 7A 8A E4 A5 AE 8A E5 A6 AE 4A E6 AE 5A 5A E7 A7 AE 7A 7A E7 A8 AE\r\n0E A4 A5 AE"
  },
  {
    "id": "117",
    "title": "BCPL",
    "description": "",
    "url": "",
    "language_short": "ruby",
    "code": "GET \"LIBHDR\"\r\n \r\nLET START() BE\r\n$(\r\n    WRITES(\"Hello, world!*N\")\r\n$)"
  },
  {
    "id": "118",
    "title": "beatnik",
    "description": "Beatnik is a stack-based esoteric programming language created by Cliff L. Biffle. The code looks like English-language text (typically with sentences that don't make a lot of sense). The words are scored according to the rules of the Scrabble board game, and the score is used to determine the operation.",
    "url": "https://esolangs.org/wiki/Beatnik",
    "language_short": "plaintext",
    "code": "Soars, larkspurs, rains.\r\nIndistinctness.\r\nMario snarl (nurses, natures, rules...) sensuously retries goal.\r\nAgribusinesses' costs par lain ropes (mopes) autos' cores.\r\nTuner ambitiousness.\r\nFlit.\r\nDour entombment.\r\nLegals' saner kinking lapse.\r\nNests gli"
  },
  {
    "id": "119",
    "title": "befunge",
    "description": "Befunge is a two-dimensional esoteric programming language invented in 1993 by Chris Pressey with the goal of being as difficult to compile as possible. Code is laid out on a two-dimensional grid of instructions, and execution can proceed in any direction of that grid.",
    "url": "https://esolangs.org/wiki/Befunge",
    "language_short": "bash",
    "code": "&gt;\"dlroW olleH\",,,,,,,,,,,@"
  },
  {
    "id": "120",
    "title": "BennuGD",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "import \"mod_say\" \r\n \r\nProcess Main()\r\nBegin \r\n    say(\"Hello World!\");\r\nEnd"
  },
  {
    "id": "121",
    "title": "BestFriends.js",
    "description": "BestFriends.js is a two-dimensional esoteric programming language invented in 2006 by David Millar with the goal of creating an esoteric javascript library. A BestFriends.js script is very similar to Brainfuck. It has almost exactly the same commands, except for the addition of a few new ones.",
    "url": "https://esolangs.org/wiki/BestFriends.js",
    "language_short": "javascript",
    "code": "var c = \"+++++ [&gt;+++++&lt;-] &gt; + }|\" +\r\n        \"[&lt;++++&gt;-]&lt;.[&gt;+&gt;+&lt;&lt;-]}{|\" +\r\n        \"&gt;++++&lt;---.&gt;..+++.@  {&gt;\";\r\nalert(BF(c,\"input\") + \" world\");"
  },
  {
    "id": "122",
    "title": "beta",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "ORIGIN '~beta\/basiclib\/betaenv'\r\n-- program: Descriptor --\r\n(* Hello World in BETA *)\r\n(# do 'Hello World' -&gt; putLine #)"
  },
  {
    "id": "123",
    "title": "Betterave",
    "description": "Betterave is a functional programming language created by User:Boily in 2007.",
    "url": "https://esolangs.org/wiki/Betterave",
    "language_short": "gams",
    "code": "$\"Hello, World!\""
  },
  {
    "id": "124",
    "title": "BFI",
    "description": "BFI is a esoteric programming language invented by User:Morex in 2009, and can be defined as a Brainfuck with procedures and recursion but without square brackets. BFI is the acronym of \"BrainFuck Itself\", as a reference to its recursive nature.",
    "url": "https://esolangs.org/wiki/BFI",
    "language_short": "brainfuck",
    "code": "++}}??{?&gt;++.&gt;+.+++}?..+++.&gt;++.&lt;&lt;+++???.&gt;.+++.------.--------.&gt;+.&gt;.;\r\n&gt;+++}?&gt;++??{&gt;+++&gt;+&lt;&lt;&lt;&lt;-?;\r\n++++"
  },
  {
    "id": "125",
    "title": "Binary lambda calculus (byte oriented) (BLC)",
    "description": "Binary lambda calculus (BLC) is a version of lambda calculus with provisions for binary I/O, a standard binary encoding of lambda terms, and a designated universal machine.",
    "url": "https://esolangs.org/wiki/Binary_lambda_calculus",
    "language_short": "stata",
    "code": "*Hello, world!"
  },
  {
    "id": "126",
    "title": "Binodu",
    "description": "binodu is an esoteric programming language created by asiekierka in August 2011. It operates on the concept of very simple nodes, which can do simple logic operations or trigger different nodes.",
    "url": "https://esolangs.org/wiki/Binodu",
    "language_short": "autohotkey",
    "code": " Automatic Node Hey\r\n    Compare\r\n    Action\r\n        Output False\r\n        Output True\r\n        Fire TwoFalse\r\n        Output True\r\n        Output False\r\n        Fire TwoFalse\r\n        Fire Six\r\n        Output False\r\n        Output True\r\n        Output F"
  },
  {
    "id": "127",
    "title": "BIRL",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "HORA DO SHOW \/\/ main code block\r\n    CE QUER VER ESSA PORRA? (\"Hello, World!\\n\"); \/\/ print \"Hello, World!\"\"\r\n    BORA CUMPADE 0; \/\/ end function\r\nBIRL"
  },
  {
    "id": "128",
    "title": "BIT",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "LINENUMBERZEROCODEPRINTZEROGOTOONELINENUMBERONECODEPRINTONEGOTOONEZEROLINENUMBE\r\nRONEZEROCODEPRINTZEROGOTOONEONELINENUMBERONEONECODEPRINTZEROGOTOONEZEROZEROLINE\r\nNUMBERONEZEROZEROCODEPRINTONEGOTOONEZEROONELINENUMBERONEZEROONECODEPRINTZEROGOT\r\nOONEONEZEROL"
  },
  {
    "id": "129",
    "title": "BitBitJump",
    "description": "BitBitJump is one of the simplest OISC languages. It allows calculations by only bit copying process without using conventional logic operations like AND, OR, XOR, NAND, or NOT. Its instruction is to copy one bit from one address to another and jump.",
    "url": "https://esolangs.org/wiki/BitBitJump",
    "language_short": "brainfuck",
    "code": "       Z0:0 Z1:0\r\nstart: .deref p X\r\n        .testH X print -1\r\nprint: .out X\r\n        .add p (w+1) p\r\n        0 0 start\r\n        p:H X:0\r\n        H:72 101 108\r\n        108 111 44\r\n        32 87 111\r\n        114 108 100\r\n        33 10 -1\r\n        .include"
  },
  {
    "id": "130",
    "title": "bitch",
    "description": "bitch (alternatively bit**) is a minimalistic language created by User:Helen inspired by User:Arphimigon's BITCHWISE. It has a total of 15 instructions (one of which is no-op) and a (technically) infinite number of instruction characters, as all unrecognised characters are no-ops.",
    "url": "https://esolangs.org/wiki/Bitch",
    "language_short": "brainfuck",
    "code": "#72\/#101\/#108\/#108\/#111\/#44\/#32\/#119\/#111\/#114\/#108\/#100\/#33\/\r\n"
  },
  {
    "id": "131",
    "title": "Bitwise Cyclic Tag (BCT)",
    "description": "Bitwise Cyclic Tag (BCT) is a Turing-complete programming language using only two commands (0 and 1) to operate on a finite data-bitstring extensible without bound on the right. Its extremely simple syntax and semantics make it a useful target for simulation-based proofs of a language's computational class.",
    "url": "https://esolangs.org/wiki/Bitwise_Cyclic_Tag",
    "language_short": "brainfuck",
    "code": "1011101011101010 # H\r\n00000110000\r\n1011111010111011 # e\r\n0000000011\r\n1011111011111010 # ll\r\n000000011000\r\n1011111011111111 # o\r\n00000000\r\n1010111011111010 # ,\r\n000000\r\n111010101010     # _\r\n00011000000\r\n1011101110111111 # W\r\n00000000\r\n1011111011111111 # o"
  },
  {
    "id": "132",
    "title": "Black",
    "description": "Black is a two-dimensional esoteric programming language created in 2006 by User:ais523. It was inspired by 1L and BackFlip, as an attempt to create a symmetrical Turing-complete language with only one instruction (two counting NOP), that uses code as data (BackFlip-style).",
    "url": "https://esolangs.org/wiki/Black",
    "language_short": "brainfuck",
    "code": "           # #  \r\n \r\n                #\r\n        #         \r\n \r\n                #\r\n \r\n \r\n    #    #    # \r\n                \r\n            #    \r\n                7\r\n                2\r\n                N\r\n                1\r\n                0\r\n                1"
  },
  {
    "id": "133",
    "title": "BlackRum",
    "description": "",
    "url": "",
    "language_short": "nginx",
    "code": "slur \"Hello World\""
  },
  {
    "id": "134",
    "title": "BLC",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, world"
  },
  {
    "id": "135",
    "title": "blitz3d",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": ";Blitz3D Hello World demo by MANIAK_dobrii\r\nPrint \"Hello world\"\r\nWaitKey\r\nEnd"
  },
  {
    "id": "136",
    "title": "blub",
    "description": "Blub is an esoteric programming language designed by User: Benni++. It is almost exactly like Ook, but with following rules:\r\n<br>• It has to be readable for fish\r\n<br>• Fishfood is good",
    "url": "https://esolangs.org/wiki/Blub",
    "language_short": "brainfuck",
    "code": "blub. blub? blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub! blub?\r\nblub? blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub? bl"
  },
  {
    "id": "137",
    "title": "bolgefuck",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "wimpmodesHpsepslpslpsops psWpsopsrpslpsdpH     \/\/hello world without moving pointers in wimpmode"
  },
  {
    "id": "138",
    "title": "boo",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print \"Hello World\""
  },
  {
    "id": "139",
    "title": "Boolfuck",
    "description": "Boolfuck is an esoteric programming language based on Brainfuck, but operating only on bits. It does, however, provide input and output.",
    "url": "https://esolangs.org/wiki/Boolfuck",
    "language_short": "brainfuck",
    "code": ";;;+;+;;+;+;\r\n+;+;+;+;;+;;+;\r\n;;+;;+;+;;+;\r\n;;+;;+;+;;+;\r\n+;;;;+;+;;+;\r\n;;+;;+;+;+;;\r\n;;;;;+;+;;\r\n+;;;+;+;;;+;\r\n+;;;;+;+;;+;\r\n;+;+;;+;;;+;\r\n;;+;;+;+;;+;\r\n;;+;+;;+;;+;\r\n+;+;;;;+;+;;\r\n;+;+;+;"
  },
  {
    "id": "140",
    "title": "Brain-Flak",
    "description": "Brain-Flak is a stack-based esoteric language designed by Programming Puzzles and Code-Golf user, DJMcMayhem. The name is a cross between \"brainfuck\", which was a big inspiration for the language, and \"flak-overstow\", since the language is confusing and stack-based.",
    "url": "https://esolangs.org/wiki/Brain-Flak",
    "language_short": "brainfuck",
    "code": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
  },
  {
    "id": "141",
    "title": "brainfuck 2D",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "*\r\n    *                                          *0**************\r\n        *                                        *                *\r\n        *                                      *                  *\r\n        *9*******************                *   "
  },
  {
    "id": "142",
    "title": "brainfuck",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;."
  },
  {
    "id": "143",
    "title": "Brian & Chuck",
    "description": "Brian & Chuck is an esoteric programming language with two mutually modifying Brainfuck-like programs developed by user:Martin Ender. The language was remotely inspired by RubE on Conveyor Belts and Self-modifying Brainfuck.",
    "url": "https://esolangs.org/wiki/Brian_%26_Chuck",
    "language_short": "brainfuck",
    "code": "?Hello, World!\r\n!&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;.&gt;."
  },
  {
    "id": "144",
    "title": "broccoli",
    "description": "",
    "url": "",
    "language_short": "c-like\r\n",
    "code": "(out \"Hello World\" crlf)"
  },
  {
    "id": "145",
    "title": "BRZRK",
    "description": "BRZRK is an esoteric programming language invented on Saturday, April 19, 2008 by revcompgeek. Ans is a flexible language related to lisp, and is functional. Ans stands for Almost No Syntax.",
    "url": "BRZRK",
    "language_short": "gams",
    "code": "$\"Hello, World!\""
  },
  {
    "id": "146",
    "title": "Bucket",
    "description": "Bucket is a set of languages involving 3 basic operations invented by User:A. The language variant is described by the tuple (a,b), where a<=b.",
    "url": "https://esolangs.org/wiki/Bucket",
    "language_short": "brainfuck",
    "code": "fpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfp\r\nfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpOfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpOfpfpfpfpfpfpfpOOfpfp\r\nfpOPePePePePePePePePePePePe"
  },
  {
    "id": "147",
    "title": "bugSophia",
    "description": "bugSophia (bS for short) is a massively concurrent programming language. The language represents data as bytes being carried by bugs through a 2D field of paths. Each bug can carry only one byte. When a bug reaches an intersection it creates concurrently running copies of itself that travel down each possible path. Unary operations occur when bugs travel over commands. Binary (and higher-ary) operations occur when multiple bugs travel over commands at the same time.",
    "url": "https://esolangs.org/wiki/BugSophia",
    "language_short": "brainfuck",
    "code": " \"+-+-+-+-+-+-+-+-+-+-+-+-+\r\n` ` ` ` ` ` ` ` ` ` ` ` `\r\nH e l l o ,   W o r l d !\r\nᛥ'&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;"
  },
  {
    "id": "148",
    "title": "Bur",
    "description": "Bur is an esoteric programming language invented by Zane Porter in 2018. Bur is a simple stack-based language that features partially nondeterministic math, and no control structures other than function calls, which can be made conditionally or unconditionally.",
    "url": "https://esolangs.org/wiki/Bur",
    "language_short": "brainfuck",
    "code": "~@,#33!#100!#108!#114!#111!#87!#32!#44!#111!#108!#108!#101!#72!!.!.!.!.!.!.!.!.!.!.!.!.!v.;"
  },
  {
    "id": "149",
    "title": "burlesque",
    "description": "Burlesque is a concatenative, dynamic typed, lazy programming language by User:Feuermonster, and the successor of Stlang but less feature bloated. The name means what it means. The main design goals of Stlang still apply. Burlesque evolved to be a programming language used for both serious applications and golfing too. For a complete description of the language please refer to the Moonpage.",
    "url": "https://esolangs.org/wiki/Burlesque",
    "language_short": "vim",
    "code": "\"Hello, World!\"Q"
  },
  {
    "id": "150",
    "title": "Byte Syze",
    "description": "Byte Syze is a very simple programming language devised by User:Smjg. Source code takes the form of a binary file.",
    "url": "https://esolangs.org/wiki/Byte_Syze",
    "language_short": "brainfuck",
    "code": "000000: c7 3c 2a 3c 2a 2b 2a 5c  3c 29 5c 2a 2b 2a 5c 3c  .&lt;*&lt;*+*\\&lt;)\\*+*\\&lt;\r\n000010: 29 5c 2a 2b 2a 5c 3c 29  5c 2a 2b 2a 5c 3c 29 5c  )\\*+*\\&lt;)\\*+*\\&lt;)\\\r\n000020: 2a 2b 2a 5c 3c 29 5c 2a  2b 2a 5c 3c 29 5c 2a 2b  *+*\\&lt;)\\*+*\\&lt;)\\*+\r\n000"
  },
  {
    "id": "151",
    "title": "byter",
    "description": "Byter is a language for training brains. Byter consists of 11 instructions that are intended to move the instruction pointer on a 16 × 16 matrix and for outputting the characters which are associated with each cell. On an output operation the ascii character associated with the specific cell is printed out. The correct ascii value is determined by the position of the cell: It starts with zero in the top left corner of the matrix, and is increased from left to right.",
    "url": "https://esolangs.org/wiki/Byter",
    "language_short": "brainfuck",
    "code": "&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;V00V00V\r\n0#00A00V&lt;V00V0VV\r\n-+&gt;&gt;A00VV&lt;&lt;0$0V&gt;\r\nV0AA&lt;00V&gt;V&lt;&lt;&lt;&lt;V0\r\n&gt;&gt;V0V&lt;&lt;&lt;-&lt;000V&lt;0\r\n0AV0VV&lt;&lt;&lt;0000V&lt;0\r\n0A&gt;V+}&gt;&gt;&gt;&gt;&gt;&gt;}&lt;V-\r\n0A{&gt;&g"
  },
  {
    "id": "152",
    "title": "C-INTERCAL",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "        PLEASE NOTE THIS PROGRAM RECOGNIZES \"HELLO, WORLD\" USING COME FROM\r\n    DON'T TYPE IN ANYTHING ELSE, OR YOU'LL GET AN ERROR!\r\n \r\n    PLEASE NOTE: COMPILE WITH ick -m FOR THIS TO WORK.\r\n    \r\n    DO ,1 &lt;- #12\r\n(1)    DO WRITE IN ,1\r\n    DO GIVE "
  },
  {
    "id": "153",
    "title": "C",
    "description": "",
    "url": "",
    "language_short": "c",
    "code": "#include &lt;stdio.h&gt;\r\n \r\nint main() {\r\n    printf(\"Hello World\\n\");\r\n    return 0;\r\n}"
  },
  {
    "id": "154",
    "title": "C++",
    "description": "",
    "url": "",
    "language_short": "cpp",
    "code": "#include &lt;iostream&gt; \/\/ include API\r\n \r\nusing namespace std;\r\n \r\nint main() \/\/ the main code portion of a C++ program\r\n{\r\n    cout &lt;&lt; \"Hello World\" &lt;&lt; endl;  \/\/print Hello World on the screen \r\n    return 0; \/\/ conventional\r\n}"
  },
  {
    "id": "155",
    "title": "caml",
    "description": "",
    "url": "",
    "language_short": "ocaml",
    "code": "print_endline \"Hello world!\";;"
  },
  {
    "id": "156",
    "title": "cardinal",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "%\"Hello, world!\";x"
  },
  {
    "id": "157",
    "title": "Casio BASIC",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "\"HELLO, WORLD!\""
  },
  {
    "id": "158",
    "title": "cat",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello World"
  },
  {
    "id": "159",
    "title": "centura",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "! Hello World in Centura\r\n \r\nFunction: HelloWorld\r\nDescription:\r\nReturns\r\nParameters\r\nStatic Variables\r\nLocal variables\r\nActions\r\nCall SalMessageBox( 'Hello World','Message',MB_Ok)"
  },
  {
    "id": "160",
    "title": "Ceylon",
    "description": "",
    "url": "",
    "language_short": "ceylon",
    "code": "shared void hello() {\r\n    print(\"Hello, World!\");\r\n}"
  },
  {
    "id": "161",
    "title": "cgi",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#include &lt;stdio.h&gt;\r\n \r\nmain ()\r\n{\r\n    printf (\"Content-type: text\/html\\n\");\r\n    printf (\"\\n\");\r\n    printf (\"&lt;html&gt;\\n\");\r\n    printf (\"&lt;head&gt;\\n\");\r\n    printf (\"&lt;title&gt;Hello, world&lt;\/title&gt;\\n\");\r\n    printf (\"&lt;\/head&gt;\\n"
  },
  {
    "id": "162",
    "title": "chapel",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "writeln(\"Hello World\");"
  },
  {
    "id": "163",
    "title": "Charcoal",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, world!"
  },
  {
    "id": "164",
    "title": "cheddar",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print \"Hello, world!\""
  },
  {
    "id": "165",
    "title": "Cell",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "j0 a72 . a101 . a108 . . a111 . a44 . a32 . a87 . a111 . a114 . a108 . a100 . a33 ."
  },
  {
    "id": "166",
    "title": "chef",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello World Cake with Chocolate sauce.\r\n \r\nThis prints hello world, while being tastier than Hello World Souffle. The main\r\nchef makes a \" world!\" cake, which he puts in the baking dish. When he gets the\r\nsous chef to make the \"Hello\" chocolate sauce, it "
  },
  {
    "id": "167",
    "title": "chicken",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicke"
  },
  {
    "id": "168",
    "title": "Choon",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "AGb-A#A#+A+%A#DF-AC#"
  },
  {
    "id": "169",
    "title": "cil",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/\/ ilasm cil.il\r\n.assembly HelloWorld {}\r\n.method public static void Main() cil managed\r\n{\r\n    .entrypoint\r\n    .maxstack 1\r\n    ldstr \"Hello World\"\r\n    call void [mscorlib]System.Console::WriteLine(string)\r\n    ret\r\n}"
  },
  {
    "id": "170",
    "title": "CLC-INTERCAL",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "\tPLEASE ;1 &lt;- #12\r\n(1)\tPLEASE WRITE IN ;1\r\n    PLEASE GIVE UP\r\n \r\n    PLEASE PLEASE PLEASE (PRETTY PLEASE)\r\n    DO NOT ASK ME TO READ THE REST OF THIS PROGRAM\r\n \r\n    DO COME FROM '\".1\/'\"'¥#29¢\"';1SUB#1'~#65535\"'~'#0¢#65535'\"~\r\n                \"'¥#"
  },
  {
    "id": "171",
    "title": "CLCLC-INTERCAL",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "PLEASE ;1 &lt;- #2\r\nDO ;1 SUB #1 &lt;- #17947$#20775\r\nDO ;1 SUB #2 &lt;- #5204$#21386\r\nDO READ OUT ;1\r\nPLEASE GIVE UP"
  },
  {
    "id": "172",
    "title": "Clean",
    "description": "",
    "url": "",
    "language_short": "clean",
    "code": "module hello\r\nStart :: {#Char}\r\nStart = \"Hello, world!\""
  },
  {
    "id": "173",
    "title": "clipper",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "? \"Hello World\""
  },
  {
    "id": "174",
    "title": "clisp",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "(write-line \"Hello World\")"
  },
  {
    "id": "175",
    "title": "Clojure",
    "description": "",
    "url": "",
    "language_short": "clojure",
    "code": "(println \"Hello, World\")"
  },
  {
    "id": "176",
    "title": "cobol",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "       identification division.\r\n        program-id. cobol.\r\n        procedure division.\r\n        main.\r\n            display 'Hello, world.' end-display.\r\n            stop run."
  },
  {
    "id": "177",
    "title": "coconut",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, world!\" |&gt; print"
  },
  {
    "id": "178",
    "title": "Codd",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "λrx.r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[x]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \r\n \r\nλqw.q[q[q[q[q[q[q[q[q[q[q["
  },
  {
    "id": "179",
    "title": "CoffeeScript",
    "description": "",
    "url": "",
    "language_short": "coffeescript",
    "code": "alert \"Hello, World!\""
  },
  {
    "id": "180",
    "title": "coldfusion",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;cfset message = \"Hello World\"&gt;\r\n&lt;cfoutput&gt; #message#&lt;\/cfoutput&gt;"
  },
  {
    "id": "181",
    "title": "Commercial",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, world!\" - Satisfied Consumer of Hello\r\nHello has been selling out worldwide!"
  },
  {
    "id": "182",
    "title": "common-lisp",
    "description": "",
    "url": "",
    "language_short": "lisp",
    "code": ";; Common Lisp\r\n \r\n(defun hello-world ()\r\n    (format t \"Hello World~%\"))"
  },
  {
    "id": "183",
    "title": "ContinuousEquation",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "0 0 o'H'e'l'l'o',' 'w'o'r'l'd'!"
  },
  {
    "id": "184",
    "title": "cool",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "class Main inherits IO {\r\n    main(): Object {\r\n        out_string(\"Hello, World.\\n\")\r\n    };\r\n};"
  },
  {
    "id": "185",
    "title": "CopyPasta Language",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Copy\r\nHello, World!\r\nPasta"
  },
  {
    "id": "186",
    "title": "cor",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "func main() console.log('Hello World!')"
  },
  {
    "id": "187",
    "title": "COW",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "MoO MoO MoO MoO MoO MoO MoO MoO MOO moO MoO MoO MoO MoO MoO moO MoO MoO MoO MoO moO MoO MoO MoO MoO moO MoO MoO MoO MoO MoO MoO MoO\r\nMoO MoO moO MoO MoO MoO MoO mOo mOo mOo mOo mOo MOo moo moO moO moO moO Moo moO MOO mOo MoO moO MOo moo mOo MOo MOo MOo Mo"
  },
  {
    "id": "188",
    "title": "Crazy",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "kirmg(s + v + o + o + l + xln + yoz + d + l + i + o + w + vcx)"
  },
  {
    "id": "189",
    "title": "Crystal",
    "description": "",
    "url": "",
    "language_short": "crystal",
    "code": "puts \"Hello, world!\""
  },
  {
    "id": "190",
    "title": "csh",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/bin\/csh\r\n                    echo \"Hello, World!\""
  },
  {
    "id": "191",
    "title": "CSharp (C#)",
    "description": "",
    "url": "",
    "language_short": "csharp",
    "code": "class HelloWorld {\r\n    static void Main() {\r\n        System.Console.WriteLine(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "192",
    "title": "cson",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "{'hello': 'world'}"
  },
  {
    "id": "193",
    "title": "CSS",
    "description": "",
    "url": "",
    "language_short": "css",
    "code": "body:before {\r\n    content:\"Hello World!\"\r\n}"
  },
  {
    "id": "194",
    "title": "Cufrab",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": ":PRINT[-]~\\.;\r\n\"Hello, World!\\n\"PRINT"
  },
  {
    "id": "195",
    "title": "cuneiform",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "def greet() -&gt; &lt;out : Str&gt;\r\nin Bash *{\r\n    out=\"Hello world\"\r\n}*\r\n \r\n( greet()|out );"
  },
  {
    "id": "196",
    "title": "curry",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "-- \"Hello World\" demo for the Tcl\/Tk library\r\n \r\nimport Tk\r\n \r\nmain = runWidget \"Hello\"\r\n            (TkCol [] [TkLabel [TkText \"Hello world!\"],\r\n                        TkButton tkExit [TkText \"Stop\"]])"
  },
  {
    "id": "197",
    "title": "cypherNeo4j",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "CREATE (Hello:Word { val: 'Hello' }), (World:Word { val: 'World!' }),\r\n(Hello)-[:SPACE]-&gt;(World)\r\nRETURN Hello,World"
  },
  {
    "id": "198",
    "title": "D",
    "description": "",
    "url": "",
    "language_short": "d",
    "code": "\/\/ Hello World in D\r\nimport std.stdio;\r\n \r\nvoid main()\r\n{\r\n        writeln(\"Hello World!\");\r\n}"
  },
  {
    "id": "199",
    "title": "Daoyu",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "$$$\r\n(([]!)\/([])):\r\n((\/[])\/([]!\/[]!)):\r\n(\/[])::\r\n[\/([]!\/[])]!:\r\n[[[]]!]:\r\n[([]!)\/[\/[]!]!]:\r\n[\/([]!\/[])]!:\r\n[([]!)\/(\/[])]:\r\n((\/[])\/[]):\r\n(\/([]!)):\r\n([[]]!\/[[]!]!):\r\n[[[]\/[]]]!:"
  },
  {
    "id": "200",
    "title": "dark",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "+helloworld hell\r\nhelloworld$twist stalker io\r\nhelloworld$twist sign string\r\nio$stalk\r\nio$personal\r\nstring$scrawl \" Hello World!\r\nstring$read ~\r\nio$echo\r\nhelloworld$consume io\r\nhelloworld$consume string\r\nhelloworld$empty\r\nhelloworld$apocalypse"
  },
  {
    "id": "201",
    "title": "Dart",
    "description": "",
    "url": "",
    "language_short": "dart",
    "code": "main() {\r\n    print('Hello, World!');\r\n}"
  },
  {
    "id": "202",
    "title": "db2",
    "description": "",
    "url": "",
    "language_short": "sql",
    "code": "VALUES('hello world')"
  },
  {
    "id": "203",
    "title": "DBFV!",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Z&lt;9Z+A&lt;Z.YA:[A-*YZ].AB&lt;7C&lt;2~1A&lt;1B&lt;0C&lt;1~1A&lt;1B&lt;0C&lt;8~1A&lt;1B&lt;0C&lt;8~1A&lt;1B&lt;1C&lt;1~1.AB&lt;4C&lt;4~1.AB&lt;3C&lt;2~1A&lt;1B&lt;1C&lt;9~1A&lt;1B&lt;1C&lt;1~1A&lt;1B&lt;1C&lt;4~1A&lt;1B&lt;0C&lt;8~1A&lt;1B&lt;0C&lt;0~1.A"
  },
  {
    "id": "204",
    "title": "dc",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "[Hello World\r\n]n"
  },
  {
    "id": "205",
    "title": "DCL",
    "description": "",
    "url": "",
    "language_short": "cos",
    "code": "WRITE SYS$OUTPUT \"Hello, world!\""
  },
  {
    "id": "206",
    "title": "dd\/dd",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "&lt;!Hello,\\ World!\\0A;"
  },
  {
    "id": "207",
    "title": "Decimal",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": " 13072101108108111044032087111114108100033010D301\r\n;13                                               push string\r\n;  072                                            'H'\r\n;     101                                         'e'\r\n;        108                   "
  },
  {
    "id": "208",
    "title": "Delphi",
    "description": "",
    "url": "",
    "language_short": "delphi",
    "code": "\/\/ Hello World in Delphi\r\nProgram Hello_World;\r\n \r\n($APPTYPE CONSOLE)\r\n \r\nBegin\r\n    WriteLn('Hello World');\r\nEnd."
  },
  {
    "id": "209",
    "title": "Difficult",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "thing.console.print(\"Hello, world\")?"
  },
  {
    "id": "210",
    "title": "DigFill",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "@n _Clear a space to output 1 bits_\r\n&s&n&s&s&n&s&s&s _H_\r\n&s&n&n&s&s&n&s&n _e_\r\n&s&n&n&s&n&n&s&s _l_\r\n&s&n&n&s&n&n&s&s _l_\r\n&s&n&n&s&n&n&n&n _o_\r\n&s&s&n&s&n&n&s&s _,_\r\n&s&s&n&s&s&s&s&s _ _\r\n&s&n&s&n&s&n&n&n _W_\r\n&s&n&n&s&n&n&n&n _o_\r\n&s&n&n&n&s&s&n&s _r_"
  },
  {
    "id": "211",
    "title": "Dirst",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "dss_Hello, world-e.txt"
  },
  {
    "id": "212",
    "title": "dis",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "^!|||||||||||||||||||||||||||||||||{!!!||||||||||||||||||||||||||||||||||||||||\r\n||||||||||||||||*_&gt;_*&gt;|_*_&gt;_*_&gt;_*_&gt;_*_&gt;_*_&gt;_*_&gt;_*_&gt;_*_&gt;_*_&gt;_*&gt;__*|_&gt;*__|*|||*__\r\n&gt;*&gt;||*&gt;_|*__&gt;*__&gt;*__&gt;*__&gt;*__&gt;*"
  },
  {
    "id": "213",
    "title": "divzeros",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "(?'H+?'e+?'l+?'l+?'o+?',+?' +?'W+?'o+?'r+?'l+?'d+?'!)\/0"
  },
  {
    "id": "214",
    "title": "DL",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "CREATE (Hello:Word { val: 'Hello' }), (World:Word { val: 'World!' }),\r\n(Hello)-[:SPACE]->(World)\r\nRETURN Hello,World"
  },
  {
    "id": "215",
    "title": "DNA Sharp (DNA#)",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "                     AT\r\n                    T--A\r\n                   A----T\r\n                   T-----A\r\n                   T-----A\r\n                   G----C\r\n                    T--A\r\n                     GC\r\n                     CG\r\n                  "
  },
  {
    "id": "216",
    "title": "dogescript",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "shh such hello dogescript very next-gen wow difficulty\r\n \r\nplz console.loge with 'Hello World'"
  },
  {
    "id": "217",
    "title": "DOGO",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "roll-over roll-over heel roll-over roll-over roll-over roll-over heel heel heel \r\nheel heel heel heel heel heel sit roll-over roll-over roll-over heel roll-over \r\nroll-over roll-over heel heel heel heel heel heel heel heel roll-over roll-over \r\nheel roll-"
  },
  {
    "id": "218",
    "title": "DOS",
    "description": "",
    "url": "",
    "language_short": "dos",
    "code": "@echo Hello World!"
  },
  {
    "id": "219",
    "title": "Drive-In Window",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hi, welcome to Hello_World_Buffet. Here is a menu.\r\n \r\nRice Krispie Treat: $10\r\nIce Cream: $30\r\nCookies: $70\r\n \r\nHere are your sides.\r\n \r\nWhipped Cream: $1\r\nChocolate: $2\r\nCaramel: $3\r\n \r\nMay I take your order?\r\n \r\nPerson 1 would like the Cookies with Cho"
  },
  {
    "id": "220",
    "title": "DStack",
    "description": "",
    "url": "",
    "language_short": "dos",
    "code": "@0\r\nHello, world!\r\n@\r\nad"
  },
  {
    "id": "221",
    "title": "dtrace",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#!\/usr\/sbin\/dtrace -qs\r\nBEGIN {\r\n    printf(\"Hello World\");\r\n    exit(0);\r\n}"
  },
  {
    "id": "222",
    "title": "DUP",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "[\\[^^&gt;][$;,1+]#%%]p:\r\n0$\"Hello, world!\"p;!10,"
  },
  {
    "id": "223",
    "title": "dupdog",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "H?????????????????????????????????????????????????????????????????????????????????????????????????????????????????e????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
  },
  {
    "id": "224",
    "title": "dylan",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "define method main (#rest args)\r\n    princ(\"Hello world!\");\r\nend;\r\n \r\nmain();"
  },
  {
    "id": "225",
    "title": "Dyvil",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "class Dyvil\r\n{\r\n    static func main(args: [String]) = print 'Hello World'\r\n}"
  },
  {
    "id": "226",
    "title": "ebuild",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "# Copyright 1999-2008 Gentoo Foundation\r\n# Distributed under the terms of the GNU General Public License v2\r\n# $Header: $\r\n \r\nDESCRIPTION=\"Hello World\"\r\nHOMEPAGE=\"http:\/\/hello-world.org\/\"\r\nSRC_URI=\"http:\/\/hello-world.org\/\"\r\n \r\nLICENSE=\"GPL\"\r\nSLOT=\"0\"\r\nKEY"
  },
  {
    "id": "227",
    "title": "Eiffel",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "indexing \"Hello World in Eiffel , from http:\/\/roesler-ac.de\/wolfram\/hello.htm#Eiffel\"\r\n \r\nclass HELLO\r\n \r\ncreation\r\n    run\r\n \r\nfeature\r\n \r\n    run is\r\n        local\r\n            io : BASIC_IO;\r\n        do\r\n            !!io;\r\n            io.put_string(\"He"
  },
  {
    "id": "228",
    "title": "ELANG",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "\"\" .H .e .l .l .o ., ._ .w .o .r .l .d .! ()"
  },
  {
    "id": "229",
    "title": "Elixir",
    "description": "",
    "url": "",
    "language_short": "elixir",
    "code": "IO.puts \"Defining the function world\""
  },
  {
    "id": "230",
    "title": "Elixir",
    "description": "",
    "url": "",
    "language_short": "elixir",
    "code": "#!\/usr\/bin\/env elixir\r\nIO.puts \"Hello world\""
  },
  {
    "id": "231",
    "title": "Elm",
    "description": "",
    "url": "",
    "language_short": "elm",
    "code": "import Html exposing (text)\r\n \r\nmain =\r\n    text \"Hello, World!\""
  },
  {
    "id": "232",
    "title": "EmacsLisp",
    "description": "",
    "url": "",
    "language_short": "lisp",
    "code": ";;for emacs elisp\r\n \r\n(message \"hello,world\")"
  },
  {
    "id": "233",
    "title": "emmental",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ";#58#126#63#36!;#46#36#!;#0#1!;#0#2!;#0#3!;#0#4!;#0#5!;#0#6!;#0#7!#0#33#100#108#114#111#119#32#44#111#108#108#101#72$"
  },
  {
    "id": "234",
    "title": "Emoji gramming",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "???\r\n???\r\n???\r\n???\r\n???\r\n???\r\n?♈?\r\n?♈?\r\n??♈\r\n?♈?\r\n?♈?\r\n?♈?\r\n?♈?\r\n??♈\r\n?♉?\r\n?♉?\r\n?♉?\r\n?♉?\r\n??♉\r\n??♉\r\n?♊?\r\n?♊?\r\n?♊?\r\n?♊?\r\n?♊?\r\n?♊?\r\n??♊\r\n?♈?\r\n?♈?\r\n?♈?\r\n??♈\r\n???\r\n?♈?\r\n?♈?\r\n?♈?\r\n?♈?\r\n?♈?\r\n??♈\r\n???"
  },
  {
    "id": "235",
    "title": "Emoji",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "?Hello World?➡"
  },
  {
    "id": "236",
    "title": "Emoji Code",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "???? ???? ????\n  ???????? ???? ➡️ ???? ????\n    ???? �Hello World????\n    ???? 0\n  ????\n????\n"
  },
  {
    "id": "237",
    "title": "emoticon",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello World! :Q S::P :P"
  },
  {
    "id": "238",
    "title": "Enigma 2D",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "&gt;+++++++++[&lt;++++++++&gt;-]&lt;.&gt;+++++++[&lt;++++&gt;-]&lt;+.+++++++..+++.&gt;&gt;&gt;++++++++[&lt;++++&gt;-]D\r\n        .+&gt;&gt;.--------.------.+++.&lt;&lt;&lt;&lt;.---&lt;]-&gt;+++++++++&lt;[++++++++++&gt;&gt;&gt;.&lt;L"
  },
  {
    "id": "239",
    "title": "EnScript",
    "description": "",
    "url": "",
    "language_short": "avrasm",
    "code": "LDA A, 72\r\nOUT A\r\nLDA A, 101\r\nOUT A\r\nLDA A, 108\r\nOUT A\r\nOUT A\r\nLDA A, 111\r\nOUT A\r\nLDA A, 44\r\nOUT A\r\nLDA A, 32\r\nOUT A\r\nLDA A, 119\r\nOUT A\r\nLDA A, 111\r\nOUT A\r\nLDA A, 114\r\nOUT A\r\nLDA A, 108\r\nOUT A\r\nLDA A, 100\r\nOUT A\r\nLDA A, 33\r\nOUT A\r\nLDA A, 9"
  },
  {
    "id": "240",
    "title": "Eodermdrome",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "this (Hello, World!) says... hi!"
  },
  {
    "id": "241",
    "title": "EOOOL",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ",{,{89+(59+~1&(7~+1&2&2&((3~+1&(4~(32_((6~+((8+(38_(},}"
  },
  {
    "id": "242",
    "title": "Erlang EScript",
    "description": "",
    "url": "",
    "language_short": "erlang",
    "code": "#!\/usr\/bin\/env escript\r\n \r\nmain(_) -&gt;\r\n    io:format(\"Hello World~n\")."
  },
  {
    "id": "243",
    "title": "Erlang",
    "description": "",
    "url": "",
    "language_short": "erlang",
    "code": "-module(erlang_hw).\r\n-export([start\/0]).\r\n \r\nstart() -&gt;\r\n    io:format(\"Hello World~n\")."
  },
  {
    "id": "244",
    "title": "evil",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "    zaeeeaeeew\r\n    zaeeaeeaeaw\r\n    zaeaeeaeeaew\r\n    zaeaeeaeeaew\r\n    zuueeueew\r\n    zaeeeeew\r\n    zuueueueeeew\r\n    zuueeueew\r\n    zaeeaeeaeaeew\r\n    zaeaeeaeeaew\r\n    zaeeaeeaew\r\n    zaeeeeeaw\r\n    zaeeeeeaeawuuuw\r\n"
  },
  {
    "id": "245",
    "title": "Exp",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "{&lt;|^^^^^^^^^| x |^^^^^^^^|&gt;}\r\n{&lt;|^^^^^^^^^^| x |^^^^^^^| - |^|&gt;}\r\n{&lt;|^^^^^^^^^| x |^^^^^^^^| + |^^^^|&gt;}\r\n{&lt;|^^^^^^^^^| x |^^^^^^^^| + |^^^^|&gt;}\r\n{&lt;|^^^^^^^^^^| x |^^^^^^^^| - |^|&gt;}\r\n{&lt;|^^^^^^^^| x |^^^^| - |^|&gt;}\r\n{&lt;|^^^^^^^^^^| x |^^^^^^^^^| - |^^^|&gt;}\r\n{&lt;|^^^^^^^^^^| x |^^^^^^^^| - |^|&gt;}\r\n{&lt;|^^^^^^^^^^| x |^^^^^^^^| + |^^|&gt;}\r\n{&lt;|^^^^^^^^^| x |^^^^^^^^| + |^^^^|&gt;}\r\n{&lt;|^^^^^^^^^^^^^^^^^| x |^^^^|&gt;}"
  },
  {
    "id": "246",
    "title": "F-PULSE",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS CBGN[ NXT PLS PLS PLS PLS PLS PLS PLS NXT PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS NXT PLS PLS PLS LST LST LST MNS ]CEND NXT PLS PLS OUT NXT PLS OUT PLS PLS PLS PLS PLS PLS PLS OUT OUT PLS PLS PLS OUT NXT PLS PLS OUT LST LST PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS OUT NXT OUT PLS PLS PLS OUT MNS MNS MNS MNS MNS MNS OUT MNS MNS MNS MNS MNS MNS MNS MNS OUT NXT PLS OUT NXT PTN OUT"
  },
  {
    "id": "247",
    "title": "factor",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "USING: io ;\r\n\"Hello World\" print"
  },
  {
    "id": "248",
    "title": "FakeASM",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": " ECHO \"Hello, world!\"\r\n STP"
  },
  {
    "id": "249",
    "title": "falcon",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/usr\/bin\/env falcon\r\n \r\n&gt; \"Hello, World\""
  },
  {
    "id": "250",
    "title": "false",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World!\r\n\""
  },
  {
    "id": "251",
    "title": "fancy",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, world!\" println"
  },
  {
    "id": "252",
    "title": "fantom",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/\/ Hello from Fantom!\r\nclass HelloWorld {\r\n    static Void main() {\r\n        echo(\"Hello, World!\")\r\n    }\r\n}"
  },
  {
    "id": "253",
    "title": "ferite",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "uses \"console\";\r\nConsole.println( \"Hello World\" );"
  },
  {
    "id": "254",
    "title": "fetlang",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Make slave scream \"Hello World!\""
  },
  {
    "id": "255",
    "title": "FiM++",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": " Dear Princess Celestia: Hello World!"
  },
  {
    "id": "256",
    "title": "fish",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/usr\/bin\/env fish\r\necho \"Hello, World!\""
  },
  {
    "id": "257",
    "title": "Fishing",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "v+CCCCCCCCCCCCCCCC\r\n    `Hello, World!`N"
  },
  {
    "id": "258",
    "title": "fjoelnir",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"hello\" &lt; main\r\n{\r\n    main -&gt;\r\n    stef(;)\r\n    stofn\r\n        skrifastreng(;\"Hello World!\"),\r\n    stofnlok\r\n}\r\n*\r\n\"GRUNNUR\"\r\n;"
  },
  {
    "id": "259",
    "title": "Flip",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": " &gt;0&gt; 5+  \\\r\n@'+  \r\n    &gt;0&gt;4*+\\\r\n+,  \/    \/\r\nvXv\/   \/\r\n    \\   \\  \\  \\  \\  \\  \\  \\  \\  \\  \\  \\  \\  \\ \r\n        4@ 6@ 7@ 7@ 7@ 0@ 5@ 7@ 8@ 7@ 6@ 0@ 2@\r\n    *&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~&lt;&lt;\r\n    P++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~&lt;&lt;\r\n    Q  0@ 9@ 6@ 6@ 9@ 0@ 5@ 9@ 2@ 6@ 8@ 1@ 2@\r\n\\     \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/"
  },
  {
    "id": "260",
    "title": "fob",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": " $:#&$Hello, World!:#&lt;&gt;#="
  },
  {
    "id": "261",
    "title": "focal",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "0.1.0.1 TYPE \"HELLO WORLD\" , !"
  },
  {
    "id": "262",
    "title": "fog.fog",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;ins&gt;Hello, World!&lt;\/ins&gt;"
  },
  {
    "id": "263",
    "title": "foo",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World!\""
  },
  {
    "id": "264",
    "title": "Foobar and Foobaz and Barbaz, oh my!",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "72 and 27 and 27, oh my.\r\n101 and 101 and 101, oh my.\r\n108 and 108 and 108, oh my.\r\n108 and 108 and 108, oh my.\r\n111 and 111 and 111, oh my.\r\n44 and 44 and 44, oh my.\r\n32 and 32 and 32, oh my.\r\n119 and 119 and 119, oh my.\r\n111 and 111 and 111, oh my.\r\n114 and 114 and 114, oh my.\r\n108 and 108 and 108, oh my.\r\n100 and 100 and 100, oh my.\r\n33 and 33 and 33, oh my.\r\n10 and 10 and 10, oh my.\r\n"
  },
  {
    "id": "265",
    "title": "forobj",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello world!\\n\"d"
  },
  {
    "id": "266",
    "title": "forth",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": ".( Hello, world!)"
  },
  {
    "id": "267",
    "title": "fortob",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "@print[$!.readcom.println;$\\.push:'\\;]\\;\r\nprint \"Hello world!\"\\;"
  },
  {
    "id": "268",
    "title": "fortran",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "program helloworld\r\nprint *,'Hello World'\r\nend program helloworld"
  },
  {
    "id": "269",
    "title": "fortran77",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "    PROGRAM HELLOW\r\n    WRITE(UNIT=*, FMT=*) 'Hello World'\r\n    END"
  },
  {
    "id": "270",
    "title": "fourier",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "72a101a108aa111a44a32a119a111a114a108a100a33a10a"
  },
  {
    "id": "271",
    "title": "FRAK",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "LI 0,C'H'\r\nPUT 0\r\nLI 0,C'e'\r\nPUT 0\r\nLI 0,C'l'\r\nPUT 0\r\nLI 0,C'l'\r\nPUT 0\r\nLI 0,C'o'\r\nPUT 0\r\nLI 0,32\r\nPUT 0\r\nLI 0,C'w'\r\nPUT 0\r\nLI 0,C'o'\r\nPUT 0\r\nLI 0,C'r'\r\nPUT 0\r\nLI 0,C'l'\r\nPUT 0\r\nLI 0,C'd'\r\nPUT 0\r\nLI 0,C'!'\r\nPUT 0"
  },
  {
    "id": "272",
    "title": "FrancePROG",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Alors en gros, on va commencer un programme.\r\nCe serait bien si on écrivait «Hello, world!».\r\nAprès, on arrête le programme un instant! C'est bien ça."
  },
  {
    "id": "273",
    "title": "FSharp (F#)",
    "description": "",
    "url": "",
    "language_short": "fsharp",
    "code": "printfn \"Hello World!\""
  },
  {
    "id": "274",
    "title": "fstar",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module Hello\r\n \r\nlet main = FStar.IO.print_string \"Hello World\\n\""
  },
  {
    "id": "275",
    "title": "Fueue",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "72 101 108 108 111 44 32 119 111 114 108 100 33 10 H"
  },
  {
    "id": "276",
    "title": "Full 0",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "{6}[(a0)(?H)]{3}[a0]{2}[(a0)(?e)]{3}[a0]\r\n{2}[(a0)(?l)]{3}[a0]~{1}[a0]~{4}[(a0)(?o)]\r\n{3}[a0]{2}[(a0)(?,)]{3}[a0]{2}[(a0)(? )]\r\n{3}[a0]{2}[(a0)(?w)]{3}[a0]{2}[(a0)(?o)]\r\n{3}[a0]{2}[(a0)(?r)]{3}[a0]{2}[(a0)(?l)]\r\n{3}[a0]{2}[(a0)(?d)]{3}[a0]{2}[(a0)(?!)]\r\n{3}[a0]"
  },
  {
    "id": "277",
    "title": "Funciton",
    "description": "",
    "url": "",
    "language_short": "lsl",
    "code": "    ╔═══════════════╗\r\n    ║ 2388215291394 ║\r\n    ║ 5970717094395 ║\r\n    ║ 9830070909071 ║\r\n    ║ 3359207734160 ║\r\n    ║ 6896177782105 ║\r\n    ║ 7169552834632 ║\r\n    ╚═══════╤═══════╝\r\n            │"
  },
  {
    "id": "278",
    "title": "gammaplex",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "X\"Hello World!\"XXSXrRE"
  },
  {
    "id": "279",
    "title": "GASOIL",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "main\r\n(\"Hello World!\"; WRITE)"
  },
  {
    "id": "280",
    "title": "gecho",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "print 'hello '&lt;&gt; 'world"
  },
  {
    "id": "281",
    "title": "gentzen",
    "description": "",
    "url": "",
    "language_short": "gml",
    "code": "&lt;- \"stdlib\";\r\n&lt;- \"iolib\";\r\nmain : () \/ ($1(iosys) |- $2(++));\r\nmain = [x,y] cut \"Hello, World!\" [z] outtext x z y;\r\n-&gt; main;"
  },
  {
    "id": "282",
    "title": "geojson",
    "description": "",
    "url": "",
    "language_short": "json",
    "code": "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-103.35937499999999,66.93006025862448],[-104.4140625,39.90973623453719],[-94.21875,39.36827914916011],[-93.8671875,50.28933925329178],[-85.78125,50.28933925329178],[-85.78125,39.639537564366684],[-75.5859375,39.639537564366684],[-77.6953125,67.06743335108298],[-86.484375,66.79190947341796],[-85.78125,57.7041472343419],[-92.8125,57.32652122521709],[-94.21875,66.51326044311188],[-103.35937499999999,66.93006025862448]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-71.3671875,67.47492238478702],[-40.42968749999999,67.60922060496382],[-40.78125,64.01449619484472],[-61.52343749999999,63.548552232036414],[-61.52343749999999,57.89149735271031],[-50.625,57.89149735271031],[-50.625,51.39920565355378],[-60.1171875,51.39920565355378],[-61.17187499999999,42.032974332441405],[-42.1875,42.293564192170095],[-42.1875,36.87962060502676],[-68.203125,34.88593094075317],[-71.3671875,67.47492238478702]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-32.6953125,67.60922060496382],[-32.34375,39.36827914916011],[-4.21875,40.713955826286046],[-4.21875,47.754097979680026],[-20.7421875,47.040182144806664],[-21.796875,67.87554134672945],[-32.6953125,67.60922060496382]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[4.5703125,68.78414378041504],[5.9765625,42.553080288955826],[37.265625,43.83452678223682],[37.265625,49.61070993807422],[18.6328125,50.28933925329178],[15.468749999999998,69.03714171275197],[4.5703125,68.78414378041504]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[41.8359375,43.068887774169625],[41.8359375,68.65655498475735],[95.625,68.65655498475735],[95.625,43.068887774169625],[41.8359375,43.068887774169625]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[50.9765625,47.27922900257082],[50.9765625,66.93006025862448],[89.296875,66.93006025862448],[89.296875,47.27922900257082],[50.9765625,47.27922900257082]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-115.6640625,18.312810846425442],[-98.7890625,18.979025953255267],[-84.72656249999999,-15.961329081596634],[-75.5859375,-4.565473550710278],[-69.2578125,-4.214943141390639],[-65.7421875,-15.284185114076433],[-53.0859375,19.973348786110602],[-39.7265625,21.28937435586041],[-65.0390625,-41.244772343082076],[-73.828125,-42.0329743324414],[-76.640625,-28.613459424004414],[-84.375,-41.50857729743933],[-94.921875,-42.0329743324414],[-115.6640625,18.312810846425442]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-34.80468749999999,-39.09596293630548],[-34.80468749999999,21.28937435586041],[14.414062499999998,21.28937435586041],[14.414062499999998,-39.09596293630548],[-34.80468749999999,-39.09596293630548]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-28.125,-31.05293398570514],[-28.125,14.944784875088372],[8.7890625,14.944784875088372],[8.7890625,-31.05293398570514],[-28.125,-31.05293398570514]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[23.203125,21.616579336740603],[22.148437499999996,-38.27268853598096],[32.34375,-37.99616267972812],[33.75,-15.961329081596634],[45.3515625,-36.597889133070204],[59.765625,-36.03133177633187],[39.0234375,-5.266007882805485],[54.84375,-3.513421045640032],[53.0859375,23.241346102386135],[23.203125,21.616579336740603]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[28.828124999999996,2.811371193331128],[28.828124999999996,16.972741019999035],[46.7578125,16.972741019999035],[46.7578125,2.811371193331128],[28.828124999999996,2.811371193331128]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[65.0390625,22.917922936146045],[66.09375,-34.30714385628803],[111.4453125,-34.30714385628803],[110.390625,-25.79989118208832],[78.3984375,-24.206889622398023],[76.9921875,23.56398712845123],[65.0390625,22.917922936146045]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[117.0703125,25.165173368663954],[121.640625,-33.13755119234615],[135.35156249999997,-31.653381399663985],[146.25,-20.3034175184893],[148.7109375,-9.79567758282973],[148.359375,0],[145.1953125,7.36246686553575],[140.2734375,14.604847155053898],[135.703125,20.632784250388028],[128.671875,24.206889622398023],[121.9921875,26.11598592533351],[117.0703125,25.165173368663954]]]}}]}"
  },
  {
    "id": "283",
    "title": "gibberish",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "[Hello, world!\r\n]eo"
  },
  {
    "id": "284",
    "title": "Gibberish\/JavaScript",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "${echo:Hello, World!}"
  },
  {
    "id": "285",
    "title": "glass",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "+{M[m(_o)O!\"Hello World!\"(_o)o.?]}"
  },
  {
    "id": "286",
    "title": "GML (Game Maker Language)",
    "description": "",
    "url": "",
    "language_short": "gml",
    "code": "\/\/ Draws \"Hello, world!\" onto the screen at position 1, 1\r\ndraw_text(1, 1, \"Hello, world!\");"
  },
  {
    "id": "287",
    "title": "Go",
    "description": "",
    "url": "",
    "language_short": "go",
    "code": "package main\r\n \r\nfunc main() {\r\n    println(\"Hello, World\")\r\n}"
  },
  {
    "id": "288",
    "title": "Goldfish",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "0 iisiiiisiiiiiiiioniiisisioiiiiiiiooiiioniisiisddddoniisiiiiisiiiiiioniiisiisddddddddddoiiioddddddoddddddddoniiisio"
  },
  {
    "id": "289",
    "title": "golfscript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello World\""
  },
  {
    "id": "290",
    "title": "golfuck",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello, world!"
  },
  {
    "id": "291",
    "title": "Golo",
    "description": "",
    "url": "",
    "language_short": "golo",
    "code": "module hello.world\r\n \r\nfunction main = |args| { \r\n    println(\"Hello world\")\r\n}"
  },
  {
    "id": "292",
    "title": "google app script",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "function helloWorld() {\r\n    Logger.log('Hello World');\r\n}"
  },
  {
    "id": "293",
    "title": "Grass",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "wv\r\nwwWWwWWWwv\r\nWwwww\r\nWWw\r\nWWWw\r\nWWWWw\r\nWWWWWw\r\nWWWWWWw\r\nWWWWWWWw \r\nWwwwwwwwwwwww\r\nWWWWw\r\nWWWWWWWw\r\nWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWww\r\nWWWWWWWWWWww\r\nWWWWWWWWWWWWw\r\nWWWWWWWWWWww\r\nWWWWWWWWWWwwwwwww\r\nWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWWWWww\r\nWWWWWWWWWWWWWWWWWWww\r\nWWWWWWWWWWWWWWWWWWwwwww\r\nWWWWWWWWWWWWWWWWWWWWWww\r\nWWWWWWWWWWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwwww\r\nWwwwwwwwwwww\r\nWWwwwwwww\r\nWWWwwwwwww\r\nWWWWw\r\nWWWWWwwwwwwww\r\nWWWWWWwwwwwwwwwwwwwwwww\r\nWWWWWWWwwwwwwwwwwwwwwwwwwwww\r\nWWWWWWWWwwwwwwwwwwwwwwwww\r\nWWWWWWWWWwwww\r\nWWWWWWWWWWwwwwwwwwwww\r\nWWWWWWWWWWWwwwwwww\r\nWWWWWWWWWWWWwwwwwwwwwwwwwwwwww\r\nWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwww"
  },
  {
    "id": "294",
    "title": "gosu",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print(\"Hello World from Gosu!!\")"
  },
  {
    "id": "295",
    "title": "gravity",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "func main() {\r\n    System.print(\"Hello World\");\r\n}"
  },
  {
    "id": "296",
    "title": "Green Marl",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "procedure hello_world() {\r\n    println(\"Hello World\");\r\n}"
  },
  {
    "id": "297",
    "title": "gri",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "show \"hello world\""
  },
  {
    "id": "298",
    "title": "GridScript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "#HELLO WORLD.\r\n \r\n@width 3\r\n@height 1\r\n \r\n(1,1):START\r\n(3,1):PRINT 'Hello World' "
  },
  {
    "id": "299",
    "title": "grin",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "(Hello, world!)"
  },
  {
    "id": "300",
    "title": "Groovy",
    "description": "",
    "url": "",
    "language_short": "groovy",
    "code": "println \"Hello World\""
  },
  {
    "id": "301",
    "title": "Gui4Cli",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "G4C MyGui\r\nWindow 10 10 200 300 \"My window\"\r\n \r\nxOnLoad\r\n    GuiOpen MyGui\r\n \r\nxButton 10 10 100 20 \"Hello World\"\r\n    GuiQuit MyGui"
  },
  {
    "id": "302",
    "title": "Gulp",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello, world!"
  },
  {
    "id": "303",
    "title": "hack",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "&lt;?hh \r\necho 'Hello World';"
  },
  {
    "id": "304",
    "title": "Hanoi Love",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ".'...,;';';;';';';'.,...;\"'.'...,;;';;';';;'.,...;\"';;;;;;;\"'\"';;;\r\n\"'.'.,...'...,;';';';';'.,...;\"'..'...,'...,;;';';';'.,...`\"'.'...,\r\n;;';';';'.,...;\"';;;\"'``````\"'````````\"'.'.,..;\"'.'.,..;;;;;;;;;;\"'"
  },
  {
    "id": "305",
    "title": "Haskell",
    "description": "",
    "url": "",
    "language_short": "haskell",
    "code": "module Main where\r\n \r\nmain = putStrLn \"Hello, World!\""
  },
  {
    "id": "306",
    "title": "Haxe",
    "description": "",
    "url": "",
    "language_short": "haxe",
    "code": "class HelloWorld {\r\n    static function main() {\r\n        trace(\"Hello World!\");\r\n    }\r\n}"
  },
  {
    "id": "307",
    "title": "Hello",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "h"
  },
  {
    "id": "308",
    "title": "HEX",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "GBL;\r\nBug(\"1\", \"Hello, World!\");\r\nScuttle(\"1\");\r\nWrite;"
  },
  {
    "id": "309",
    "title": "Hexadecimal Stacking Pseudo-Assembly Language",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "200021\r\n400000\r\n200064\r\n400000\r\n20006C\r\n400000\r\n200072\r\n400000\r\n20006F\r\n400000\r\n200057\r\n400000\r\n200020\r\n400000\r\n20002C\r\n400000\r\n20006F\r\n400000\r\n20006C\r\n400000\r\n20006C\r\n400000\r\n200065\r\n400000\r\n200048\r\n400000\r\n140000"
  },
  {
    "id": "310",
    "title": "Hexagony",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "H;e;l;d;*;r;o;Wl;;o;*433;@.&gt;;23&lt;\\4;*\/"
  },
  {
    "id": "311",
    "title": "hexish",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "0902160E48656C6C6F20776F726C6421001001161508"
  },
  {
    "id": "312",
    "title": "Higher Subleq",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "int printf();\r\nint main()\r\n{\r\n    printf(\"Hello, World!\\n\");\r\n}"
  },
  {
    "id": "313",
    "title": "HighFive",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "-----------------------------------\/\/\/\/++++++++\/\/\/\/\r\n\/+++++++++\/+++++++++++++\/++++\/-\/\/\/\/*\/\r\n.\/---.+++++++..+++.\/.\/\/\/\/\/\/+++++++++++++++.\/.+++.------.--------.\/+."
  },
  {
    "id": "314",
    "title": "hodor",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "hodor.hod('Hhodor? Hodor!? Hodor!? o, Hooodorrhodor orHodor!? d!');"
  },
  {
    "id": "315",
    "title": "hollow",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "{Hello, world!.9}:?"
  },
  {
    "id": "316",
    "title": "holyc",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, world!\";"
  },
  {
    "id": "317",
    "title": "homespring",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Universe bear hatchery powers world.\r\n    bear hatchery powers o.      bear hatchery powers hell     marshy marshy marshy a snowmelt"
  },
  {
    "id": "318",
    "title": "HOP",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "(define-service (hello-world)\r\n(&lt;HTML&gt;\r\n    (&lt;HEAD&gt;\r\n        (&lt;TITLE&gt; \"Hello, world!\"))\r\n    (&lt;BODY&gt;\r\n        \"Hello, world!\")))"
  },
  {
    "id": "319",
    "title": "hq9+",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "h"
  },
  {
    "id": "320",
    "title": "HTML",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;Hello World HTML&lt;\/title&gt;\r\n    &lt;\/head&gt;\r\n    &lt;body&gt;\r\n        &lt;h1&gt;Hello World&lt;\/h1&gt;\r\n    &lt;\/body&gt;\r\n&lt;\/html&gt;"
  },
  {
    "id": "321",
    "title": "Hy",
    "description": "",
    "url": "",
    "language_short": "hy",
    "code": "(print \"Hello World!\")"
  },
  {
    "id": "322",
    "title": "hypertalk",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "put \"Hello, World!\""
  },
  {
    "id": "323",
    "title": "H?",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "hw"
  },
  {
    "id": "324",
    "title": "ibm1401",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ",008015,022029,036043,050054,055062,063065,066077\/333\/M0762502F1.HELLO\r\nWORLD"
  },
  {
    "id": "325",
    "title": "IcedCoffeeScript",
    "description": "",
    "url": "",
    "language_short": "coffeescript",
    "code": "console.log \"Hello, World!\""
  },
  {
    "id": "326",
    "title": "ici",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "printf(\"Hello World\\n\");"
  },
  {
    "id": "327",
    "title": "icon",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "procedure main()\r\n    write(\"Hello World\");\r\nend"
  },
  {
    "id": "328",
    "title": "IDL",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print, \"Hello, world!\"\r\nend"
  },
  {
    "id": "329",
    "title": "idris",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module Main\r\n \r\nmain : IO ()\r\nmain = putStrLn \"Hello World\""
  },
  {
    "id": "330",
    "title": "il",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/\/ compile:\r\n\/\/ ilasm <this file's name>\r\n\/\/ (if ilasm cannot be found, it's in the .NET directory (%windir%\\Microsoft.NET\\Framework\\v4.0.30319\\ilasm.exe))\r\n \r\n\/\/ assembly references\r\n.assembly extern mscorlib\r\n{\r\n    .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         \/\/ .z\\V.4..\r\n    .ver 4:0:0:0\r\n}\r\n \r\n\/\/ assembly manifest\r\n.assembly ilhw\r\n{"
  },
  {
    "id": "331",
    "title": "INCAL",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "send,66#111#102#&lt;101#42#93#101#120#102#110#43#\r\ndie"
  },
  {
    "id": "332",
    "title": "Incident",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "A1.A2.A3,A4.A5,A6,A7;A8;B1;B2,B3.B4,B5;B6.B7.B8;C1,C2.C3;C4.C5,C6;C7,\r\nC8.D1;D2,D3.D4,D5.D6;D7.D8,E1;E2;E3;E4,E5,E6.E7,E8.F1;F2.F3.F4,F5.F6;\r\nF7.F8;G1,G2;G3,G4;G5.G6.G7.G8;H1.H2;H3.H4.H5.H6,H7;H8;I1,I2.I3;I4,I5.\r\nI6,I7.I8,J1;J2,J3,J4,J5;J6;J7.J8;K1;K2;K3;K4,K5,K6;K7.K8,L1;L2,L3;L4,\r\nL5;L6;L7,L8,M1.M2.M3.M4,M5,M6,M7,M8,N1.N2;N3,N4.N5;N6,N7.N8,Z4;a1,a1.\r\nZ3.A1,a1;a2,a2,A1,A2.a2,a3.a3.A2,A3,a3.a5,a5,A3;A5.a5,a6,a6.A5;A6.a6.\r\na8.a8.A6;A8.a8;b2,b2.A8;B2.b2,b4.b4,B2,B4;b4.b5;b5;B4;B5;b5.b8.b8,B5.\r\nB8.b8.c1;c1,B8,C1;c1,c2,c2;C1;C2,c2.c5,c5;C2,C5,c5.c8.c8,C5;C8;c8,d1;\r\nd1.C8,D1;d1.d2;d2.D1.D2.d2.d5,d5,D2.D5.d5.d8,d8;D5;D8.d8,e5.e5.D8;E5,\r\ne5,e8,e8,E5,E8;e8,f1.f1.E8.F1;f1;f2,f2;F1.F2.f2;f5.f5;F2;F5,f5;f7;f7.\r\nF5,F7,f7;f8.f8;F7.F8,f8,g1;g1.F8;G1.g1,g2;g2.G1,G2,g2,g3;g3;G2,G3;g3,\r\ng4,g4.G3;G4.g4.g5.g5,G4,G5.g5;g7;g7.G5;G7,g7,g8;g8.G7,G8;g8;h4.h4,G8;\r\nH4,h4;h8,h8,H4.H8,h8.i5.i5;H8;I5;i5.i8;i8.I5,I8,i8.j1;j1;I8,J1;j1.j3.\r\nj3;J1,J3;j3;j4,j4.J3,J4.j4,j8,j8.J4;J8,j8.k1.k1.J8.K1,k1,k2.k2;K1,K2;\r\nk2.k5;k5;K2,K5.k5,k8;k8,K5.K8,k8;l1,l1;K8;L1;l1,Z1;Z2;Z2,Z3.Z2;Z1.Z1,\r\nl2;l2;L1;L2,l2;l4.l4.L2.L4;l4.l5.l5.L4;L5;l5.l8.l8,L5.L8;l8;m2;m2.L8;\r\nM2.m2,m3,m3,M2,M3,m3;m4.m4.M3;M4.m4,m5.m5.M4,M5,m5;m7,m7.M5.M7;m7.m8.\r\nm8,M7,M8,m8,n1;n1.M8,N1;n1.n3,n3;N1;N3,n3.n5,n5;N3,N5;n5,n6.n6.N5.N6.\r\nn6,n7;n7;N6.N7;n7.n8,n8;N7,N8;n8,a4,a4;Z3;A4,a4;a7.a7.A4.A7;a7,b1.b1;\r\nA7;B1,b1;b3;b3,B1,B3.b3,b6.b6;B3;B6,b6;b7;b7,B6,B7,b7;c3,c3.B7,C3,c3.\r\nc4.c4,C3,C4.c4;c6.c6,C4,C6.c6;c7,c7;C6.C7,c7.d3;d3.C7,D3,d3;d4;d4.D3,\r\nD4,d4;d6,d6,D4,D6.d6;d7,d7,D6,D7.d7,e1,e1;D7,E1.e1,e2,e2;E1;E2,e2.e3;\r\ne3,E2,E3,e3.e4;e4.E3.E4;e4,e6;e6;E4,E6,e6.e7.e7;E6.E7.e7,f3,f3.E7,F3;\r\nf3.f4;f4,F3;F4,f4;f6;f6.F4.F6,f6,g6.g6;F6.G6.g6.h1;h1;G6;H1,h1.h2;h2.\r\nH1;H2,h2.h3,h3,H2,H3,h3.h5.h5;H3,H5;h5;h6;h6;H5.H6.h6,h7.h7.H6,H7.h7;\r\ni1,i1,H7.I1,i1.i2;i2;I1;I2,i2,i3.i3,I2,I3.i3;i4;i4;I3,I4,i4.i6,i6,I4.\r\nI6,i6.i7.i7,I6;I7;i7.j2;j2;I7.J2;j2,j5;j5.J2.J5;j5.j6,j6.J5,J6,j6;j7;\r\nj7;J6,J7.j7;k3,k3;J7.K3.k3.k4.k4,K3.K4;k4,k6;k6,K4.K6;k6,k7.k7;K6,K7.\r\nk7,l3.l3.K7;L3;l3.l6;l6,L3;L6,l6;l7,l7,L6;L7.l7,m1.m1,L7;M1;m1,m6;m6,\r\nM1;M6,m6;n2;n2;M6,N2,n2;n4.n4,N2;N4,n4.N8.N4,Z4,Z4"
  },
  {
    "id": "333",
    "title": "InDec",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "add2   @ N { N ++   ++ }\r\nadd4  @ N { N add2  add2 } \r\nadd8   @ N { N add4  add4 }\r\nadd16 @ N { N add8  add8 }\r\nadd32  @ N { N add16 add16 }\r\nadd64 @ N { N add32 add32 }\r\n \r\nSPACE add32 \r\nH   add64 add8\r\nd,H add add16 add8 add4\r\ne,d add ++\r\nl,e add add4 add2 ++\r\no,l add add2 ++\r\nW,H add add8 add4 add2 ++\r\nr,o add add2 ++\r\n \r\nH&,e&,l&,l&,o&,SPACE&,W&,o&,r&,l&,d& ."
  },
  {
    "id": "334",
    "title": "inform",
    "description": "",
    "url": "",
    "language_short": "inform7",
    "code": "\"Hello World\" by \"I.F. Author\"\r\n \r\nThe world is a room.\r\n \r\nWhen play begins, say \"Hello, world.\""
  },
  {
    "id": "335",
    "title": "ink",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, world!"
  },
  {
    "id": "336",
    "title": "Integ",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "](104)](101)](108)](108)](111)](44)](32)](119)](111)](114)](108)](100)](10)"
  },
  {
    "id": "337",
    "title": "intercal",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "DO ,1 <- #13\r\nPLEASE DO ,1 SUB #1 <- #238\r\nDO ,1 SUB #2 <- #108\r\nDO ,1 SUB #3 <- #112\r\nDO ,1 SUB #4 <- #0\r\nDO ,1 SUB #5 <- #64\r\nDO ,1 SUB #6 <- #194\r\nDO ,1 SUB #7 <- #48\r\nPLEASE DO ,1 SUB #8 <- #22\r\nDO ,1 SUB #9 <- #248\r\nDO ,1 SUB #10 <- #168\r\nDO ,1 SUB #11 <- #24\r\nDO ,1 SUB #12 <- #16\r\nDO ,1 SUB #13 <- #162\r\nPLEASE READ OUT ,1\r\nPLEASE GIVE UP"
  },
  {
    "id": "338",
    "title": "Io",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, world!\\n\" print"
  },
  {
    "id": "339",
    "title": "ioke",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, World!\" println"
  },
  {
    "id": "340",
    "title": "irc",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\/timer 1 9999 1 Hello World"
  },
  {
    "id": "341",
    "title": "iscom",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "\"Hello, world!\" @=10"
  },
  {
    "id": "342",
    "title": "ISLISP",
    "description": "",
    "url": "",
    "language_short": "clojure",
    "code": "(format (standard-output) \"Hello, world!\")"
  },
  {
    "id": "343",
    "title": "J",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/opt\/local\/bin\/jc\r\necho 'Hello World'\r\nexit '"
  },
  {
    "id": "344",
    "title": "jade",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "helloWorld();\r\n \r\nbegin\r\n    write \"Hello World\";\r\nend;"
  },
  {
    "id": "345",
    "title": "jai",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#import \"Print\"\r\n \r\nmain::(){\r\n \r\n    print(\"hello world!\");\r\n \r\n}"
  },
  {
    "id": "346",
    "title": "Jasmin",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": ".class public Jasmin\r\n.super java\/lang\/Object\r\n \r\n.method public static main([Ljava\/lang\/String;)V\r\n    .limit stack 2\r\n    getstatic java\/lang\/System\/out Ljava\/io\/PrintStream;\r\n    ldc \"Hello world!\"\r\n    invokevirtual java\/io\/PrintStream\/println(Ljava\/lang\/String;)V\r\n    return\t\r\n.end method"
  },
  {
    "id": "347",
    "title": "jason",
    "description": "",
    "url": "",
    "language_short": "llvm",
    "code": "!greeting.\r\n+!greeting : true &lt;- .print(\"Hello World\")."
  },
  {
    "id": "348",
    "title": "Java",
    "description": "",
    "url": "",
    "language_short": "jva",
    "code": "public class Java {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "349",
    "title": "JavaScript",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "console.log(\"Hello World\");"
  },
  {
    "id": "350",
    "title": "jess",
    "description": "",
    "url": "",
    "language_short": "lisp",
    "code": "(printout t \"Hello World\")"
  },
  {
    "id": "351",
    "title": "JSON (JavaScript Object Notation)",
    "description": "",
    "url": "",
    "language_short": "json",
    "code": "{ \"hello\": \"world\" }"
  },
  {
    "id": "352",
    "title": "JSONiq",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World!\""
  },
  {
    "id": "353",
    "title": "jsx",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "var React = require('react');\r\n \r\nvar HelloWorld = function() {\r\n    return &lt;span&gt;Hello World&lt;\/span&gt;;\r\n};\r\nHelloWorld.displayName = 'HelloWorld';\r\n \r\nconsole.log(React.renderToString(&lt;HelloWorld \/&gt;));"
  },
  {
    "id": "354",
    "title": "Julia",
    "description": "",
    "url": "",
    "language_short": "julia",
    "code": "println(\"Hello World\")"
  },
  {
    "id": "355",
    "title": "K",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello World\\n\""
  },
  {
    "id": "356",
    "title": "karel",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "PROGRAM hello_world\r\nBEGIN\r\n    WRITE('Hello, world!', CR)\r\nEND hello_world"
  },
  {
    "id": "357",
    "title": "Keg",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello\\, World\\!"
  },
  {
    "id": "358",
    "title": "KimL",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": "io.out \"Hello World!\""
  },
  {
    "id": "359",
    "title": "kipple",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "33&gt;o&lt;100 108&gt;o&lt;114 111&gt;o&lt;87 32&gt;o&lt;111 108&gt;o&lt;108 101&gt;o&lt;72"
  },
  {
    "id": "360",
    "title": "kitten",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World\" say"
  },
  {
    "id": "361",
    "title": "Kotlin",
    "description": "",
    "url": "",
    "language_short": "kotlin",
    "code": "package hello\r\n \r\nfun main(args: Array<String>) {\r\n    println(\"Hello, world!\")\r\n}"
  },
  {
    "id": "362",
    "title": "ksh",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/bin\/ksh\r\necho \"Hello, World!\""
  },
  {
    "id": "363",
    "title": "Labyrinth",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "72.101.108:..111.44.32.87.111.114.108.100.33.@"
  },
  {
    "id": "364",
    "title": "Lazy K",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "k``s``si`k``s`k```sii``s``s`kski``s``s`ksk``s``s`ksk```s``siii``s``s`kski`k``s``si`k``s``s`ksk```s``s`ksk\r\ni``s`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k\r\n``s``si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski``s``s`ksk`\r\n`s`k``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k````s``s`ksk```s``siii``s``s`kski`s``s`ksk```sii``s``\r\ns`ksk``s``s`kski`k``s``si`k``s`k``s``s`kski```s``siii``s``s`kski`k``s``si`k``s`k``s``s`ksk``s`k``s``s`kski\r\n``s``s`ksk``s``s`kski``s``s`ksk```s``siii``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski``s``s`ksk``s`k``\r\ns``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s`k``s``s`kski``s``s`ksk``s`k``s``s`kski``s``s`ksk```sii`\r\n`s``s`ksk``s``s`kski`k``s``si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k```s``s`kski``s\r\n`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski```s``siii``s``s`kski`k``s``s\r\ni`k``s`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k```sii```sii``s``s`kski`k```sii```sii``s``s`kski"
  },
  {
    "id": "365",
    "title": "Leszek",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "\\O\\C\\.1.Hello World!"
  },
  {
    "id": "366",
    "title": "Licorne",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "hurler.$.aux licornes; $Hello, world!\r\ns'arrêter discrétos"
  },
  {
    "id": "367",
    "title": "Linguine",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": " 1[0=72,0$,0+29,0$,0+7,0$,0$,0+3,0$,1=32,1$,0-24,0$,0+24,0$,0+3,0$,0-6,0$,0-8,0$,1+1,1$,1-23,1$]0"
  },
  {
    "id": "368",
    "title": "LNUSP",
    "description": "",
    "url": "",
    "language_short": "yaml",
    "code": "--- Hello World!\r\n---\r\n000        .INPUT          .OUTPUT          .STOP\r\n001 .                      .                .\r\n001  .                     .                .\r\n001   .                    .                .\r\n001    . !.!               .                .\r\n001     .   !              .                .\r\n001    ! .  !              .                .\r\n001    .  !!               .                .\r\n001    *                   .                .\r\n072    + H                 .                .\r\n001    *                   .                .\r\n101    + e                 .                .\r\n001    *                   .                .\r\n108    + l                 .                .\r\n001    *                   .                .\r\n108    + l                 .                .\r\n001    *                   .                .\r\n111    + o                 .                .\r\n001    *                   .                .\r\n032    + (sp)              .                .\r\n001    *                   .                .\r\n087    + W                 .                .\r\n001    *                   .                .\r\n111    + o                 .                .\r\n001    *                   .                .\r\n114    + r                 .                .\r\n001    *                   .                .\r\n108    + l                 .                .\r\n001    *                   .                .\r\n100    + d                 .                .\r\n001    *                   .                .\r\n033    + !                 .                .\r\n001    *                   .                .\r\n013    + (cr)              . -------------- .\r\n001    *                   .                .\r\n001    !                   .                .\r\n001     .                  .                .\r\n001      .        !!       .                .\r\n001       . !.!  !  !      .    !......!    .\r\n001        .   ! .  !   ?......!.....?  !   .\r\n001       ! .  ! . @   ?   .   .??    ? .   .\r\n001       .  !!  .\/.   .   .   ?  ?   . .   .\r\n016       .      . * --.-- . --.  .---.-.-- .\r\n001       .      ! .   ?   .   *  ?   . !   .\r\n001       .       !.....?..@.....?.....!....@\r\n001       .        .           ?      ?    .\r\n001       !        !           ..    .    .\r\n001        !......!            ! ?..?    .\r\n001                             !.......!"
  },
  {
    "id": "369",
    "title": "Log",
    "description": "",
    "url": "",
    "language_short": "accesslog",
    "code": "(A)\r\n((A))\r\n(A)\r\n(A)\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n((A))\r\n(A)\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n(A)\r\n(A)"
  },
  {
    "id": "370",
    "title": "Logical",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "COMET DEFN !DLROW_,OLLEH"
  },
  {
    "id": "371",
    "title": "logOS",
    "description": "",
    "url": "",
    "language_short": "accesslog",
    "code": "print [Hello World]"
  },
  {
    "id": "372",
    "title": "LOLA",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ":H,:e,2:l,,:o,:',:_,:w,:o,:r,:l,:d,:!,:%,:\\\\b,\\\\a,,,,,,,,,,,,,,\r\n \r\n+\\\\\\cb,ba,,\r\n*\\\\ba+,,\\\\a,\r\n:\\\\\\a\\c,c,\r\n \r\nH*+8,,8,\r\ne+d,\r\nl8+,d,\r\no3+,l,\r\n'_+,^,\r\nw8+,o,\r\nr+^,+,e,\r\nd2%,\r\n_52,\r\n!+_,\r\n \r\n2\\\\bba,,\r\n3+2,\r\n5+22,,\r\n832,\r\n%*2,5,\r\n^2*2,,3,"
  },
  {
    "id": "373",
    "title": "lolcode",
    "description": "",
    "url": "",
    "language_short": "nginx",
    "code": "HAI\r\nCAN HAS STDIO?\r\nVISIBLE \"Hello World\"\r\nKTHXBYE"
  },
  {
    "id": "374",
    "title": "lolpython",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "VISIBLE \"Hello World\""
  },
  {
    "id": "375",
    "title": "Losescript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "H"
  },
  {
    "id": "376",
    "title": "LSL (Linden Scripting Language)",
    "description": "",
    "url": "",
    "language_short": "lsl",
    "code": "default\r\n{\r\n    state_entry()\r\n    {\r\n        llSay(0, \"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "377",
    "title": "Lua",
    "description": "",
    "url": "",
    "language_short": "lua",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "378",
    "title": "M code (M-code)",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "4[28]j[4]}[15].i[5]}[5]?[4];_Hello,[32]world!"
  },
  {
    "id": "379",
    "title": "M4",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello"
  },
  {
    "id": "380",
    "title": "Macmac",
    "description": "",
    "url": "",
    "language_short": "accesslog",
    "code": "put(72)\r\nput(101)\r\nput(108)\r\nput(108)\r\nput(111)\r\nput(44)\r\nput(32)\r\nput(119)\r\nput(111)\r\nput(114)\r\nput(108)\r\nput(100)\r\nput(33)"
  },
  {
    "id": "381",
    "title": "macsyma",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": "\/* Macsyma *\/\r\nprint(\"Hello World\");"
  },
  {
    "id": "382",
    "title": "magic",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "HELLO.WORLD\r\n \r\n\"Hello, world!\"^#;"
  },
  {
    "id": "383",
    "title": "MailBox",
    "description": "",
    "url": "",
    "language_short": "lisp",
    "code": "box 0\r\n(once)\r\nsend \"outputHello, world!\" to 0\r\n(contains \"output\")\r\noutput without \"output\""
  },
  {
    "id": "384",
    "title": "malbolge",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "(=&lt;`#9]~6ZY32Vw\/.R,+Op(L,+k#Gh&}Cdz@aw=;zyKw%ut4Uqp0\/mlejihtfrHcbaC2^W\\&gt;Z,XW)UTSL53\\HGFjW"
  },
  {
    "id": "385",
    "title": "Malbolge Unshackled",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "bCBA@?&gt;=&lt;;:9876543210\/.-,I*)(E~%$#\"RQ}|{zyxwvutsrD0|nQl,+*)(f%dF\"a3_^]\\[ZYXWVUTSRQJmNMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210\/.-,+*)('&%$#dc~}|_^yrwZutsrqpinPlOjihgf_dcEaD_^]\\UZYX:V9TSRQPONGLK.IHGF?DCB$@#&gt;=&lt;;4987w\/v3210\/.-,+$k('&%|#\"!~w`{zyxwputslUponmlkjiKgf_Hcba`_^]\\[ZYXWP9TSRQPONMFKJCHA*EDCBA@?&gt;=&lt;|:98y6543210).-,%*#j'&%$#\"!~}|^ty\\wvutslkTonmlkjcLafedc\\aD_X]\\[TY&lt;WVOTSLQ4ONMFKDC,GFEDC&lt;A$9&gt;=&lt;;49z765.3,+r\/.-,l*)(!h%$#\"!~}|{zyxwvunWrqponmlkjihgfed]Fa`_^]\\[ZYXW9UTSRK4ONMLKJIHGFEDCBA@?8!&lt;;:9876543210\/.-,%l)('&%$#\"!~}|^t]xqvYnsrqpinQlejihafIdc\\a`Y^A\\[ZSXQ:8NSRQJ3NMLKJIHGFEDC%;$?8=&lt;}49876543210qp',+*)('&%$#\"!b}`{zyrwpuXmrqpohmlOdihgfedcba`_^]\\?=S&lt;WPU8SRQJOHM0EJIHG@ED'&lt;A@?&gt;=&lt;;:987654us+r\/(-,m*#('&%$#\"!~a`{tyxwvutsrqpoRmPkjibg`eHcb[`_X]@UZYXWPUT7RKPONMLKJIHGFED'%;$?8=~;:387054u2+0\/.-,+*)('&%$ecyb}v{z]xwputsrqponQPkjchgfedcba`_B]@[ZSXWPU8SLQPOHML\/JIBGFEDCBA@?&gt;=&lt;}{3z705v321*\/(om%*)j'&}$#\"!~}|{zyxwZXnWrkpoRmlkdihgfedcFE`_^W\\[ZYXWVUT7R5PONGLEJ-HG@ED=B%@9&gt;=&lt;5:9z765.3210\/.-,+*)jh~g${\"c~}v{zsxwZutslqponmlkjihgJH^Gb[`_B]\\[ZSXWVUTS65PONMFKJIHGFED'B%@?&gt;7&lt;5:9z7654-210\/.-,+*)jh~g${dbx}|_zyxwputsrqponmlOMcLg`edGba`_^W\\[ZYX;:UTSRQJONMLKJI,G*EDC&lt;A:?\"=&lt;5:927x5.321*\/p',+*)\"'&g$#\"!~w|{zyxwvutWUkTohmlOjihgf_dcba`_^]\\?=S&lt;WPUT7RQPONMLEJIH+*EDCBA@?8=&lt;;:9z7x543,1*\/.o,+*)('&}$#\"!~}|_]s\\wputWrqponmlejihgfedGE[D_X]\\?ZYXWVUTSLQP32MLKJIHGF?DCBA$?\"=&lt;;4927x54-21*\/p-&+*)\"'h}$#\"!x}|_zyxwvutslqponmlOMcLg`edGba`_^]\\[TYXWVUT75K4OHML\/JIHGFEDCBA@9\"=~;:987654321*\/p-n+*)\"'~%f#\"y~}v{^sxwvunsrUponmlkjihgf_dcbECYB]V[&gt;YXQVUNSR5PONMLKJIHGF?DCB%#9\"=6;:{876543210\/.-&m*)j'&%$#\"!~}|{zs\\wZutslqjoRmfkjibgfIdcba`_^]\\[ZYRWV97M6QJ31GLK.IHGFEDCBA@?&gt;7&lt;;|z2y6\/43t10\/.-,+*)('&%|e\"!~a|{zyxwvutsrqpiRmlOjibgf_dGb[`_^W\\[&gt;YXWVUTSRQPONMFK.,B+F?DC&A@?&gt;=&lt;;:98765.3tr*q.',+l)('&%$#\"!~}|{zs\\wvutWrqponmlkjihgfe^Gba`C^]\\UZSX;VUNSRKP3HMLKJCHG*EDCBA@?&gt;=&lt;;:981xv.u2+0\/p-,+*)('&%$#\"!~w`^t]xqvuXsrqponmlkjihgfe^Gba`_^A\\[ZYXWVUTSRQPONG0KJIH+FED=B;@?\"=&lt;;:9876543210\/(o,l$k(!hf|#\"c~}|{zyxwvutsrqpiRmOeNibgfIdcba`_^]\\[ZYXWVUN7RQPONM0KJIHGFEDCBA@?&gt;=&lt;5|98765v3,10\/(-n%*)('~%$e\"!~}|{zyxwvutsrqjSnmOeNibgJe^cbaZ_^A\\[ZYXWVUTSRQPONMF\/JI+A*E&gt;CB%@?&gt;=&lt;;:9876543210)p-,+*)('h%$#\"!~}|{zyxwvutslUponmlkNihg`e^cbE`_^]\\[ZYXWVUTSRQPI2MLK-C,G@E(CB;@?8=~;498705v-210\/(om%*)j'&%$#\"!~}|{zyxwvunWrqpRhQlejiLgfedcba`_^]\\[ZYXWVO87RQ4ONMLKJIHGFEDCBA@?&gt;7~}:{876\/4-2s0\/(-,%*k\"'&%${\"!b}|{zyxwvutsrqponmleNihgfH^Gb[`C^]V[ZSXW:UTSRQPONMLKJIHGFED=&A@?&gt;~6}:387x543210\/.-,+*)('&%$#zc~a|{^yxwvutsrqponmlkjihg`IdGbE`_X]\\UZ=XQVUTMRQ4ONMLKJIHGFEDCBA@?&gt;=6}:9876v.u2+0q.-,%*#jh~%$e\"!~}|{zyxwvutsrqpongPkjihgI_Hc\\a`C^]\\?TY&lt;WVUTSR5PO2MLK.CH+FEDCBA$?\"=&lt;;4927x54-21*\/p-&+*)\"'h}$#\"!x}|_zyx[puXsrqponmlkjLbKf_dGba`Y^W\\?ZSXWVOTS6QPO2GL\/JIHGFEDCBA#9\"=6;:{876w4321*\/.o,+*)('&%$#\"c~}`{zy\\wvutmrqTonmlkjihgfeHcFa`_X]V[&gt;YRWVUNS6KPONMFKJ-HGF)DCBA:?&gt;!&lt;;:9876543210\/.n&m*#('h%$#d!~}|uzy\\wvutsrqponmlkjiKaJe^cbED_XA\\[ZYXWVUTSR5PO21LE.IHGFEDCBA@?\"=~;:92705v32+0\/(-n%*)('~%$ed!xa|{zyxwvutsrqponPfOjchgJId]Fa`_^]\\[ZYXWVUTS5K4OHML\/.IHA*EDCBA@?&gt;=&lt;;:{87xw43,s0\/.-,+*)('&%f#\"cb}|u^yxwvutsrqponmlkjLbKf_dcFE`_XA\\[ZYXWVUTSRQPONM\/E.IBGF)(CBA:#&gt;=&lt;;:98765432s0\/po,+*#j'&%$#\"!~}|{zy\\wZunsrqjoRglkjibgfIHcbaZC^]\\[ZYXWVUTSRQPON0F\/JCH+F?DCB;@?\"!&lt;;:3z76543210\/.-,+*)('g}f#z!~a`{zyxqvutsrqponmlkjihKfeHGba`_X]\\[ZYXWVUTSRQPO2M0KJCHG@E(=BA@?8=&lt;}|9876\/43210\/.-,+*)('&%$#\"bxa|uzy\\[vutslqponmlkjihgfedcba`_AW@[TYX;:UTSRQJONMLKJIHGFEDCB%@?\"!&lt;;:9816543210\/.-,+*)j'h%$#z!x}`uzyxwputWVqponmfkjihgfedcba`_^]\\[Z&lt;R;VOT7RQPINGL\/DIHGF?DC&%@?&gt;=&lt;5:9876543210\/.-,+*)i!h%|#\"cb}|{zyxqvutsrqponmlkjMhgJIdcba`_X]\\[ZYXWVUTSRQ4O2MLKDIBG*ED=BA:?\"7&lt;;:9276wv3210\/.',+*)('&%$#\"!~}|{z\\r[votWrqjonglkNMhgfedc\\a`_^]\\[ZYXWVUTSRQ3I2MFKJ-,GFEDCBA:?&gt;=&lt;;:987654u21rq.-,+*)(!&%$#\"!~}|{zy\\wZutmrqjoRmfkjibgfIHcba`_^]V[ZYXWVUTSRQPONML.D-HAF)DCB;@9\"~6;:{z7654321*\/.-,+*)('&%$#\"!~`v_zsxwvutmVqponmlkjihgJedcbaZC^]\\[ZYXWVUT7R5PONGLEJ-HG@ED=B%@9&gt;=&lt;5:{27654-210\/.'n+*)('&%$#\"!~}|{]s\\wpuXsrqjohmPkdihg`edcbaZC^]\\[ZYXWVUTSRQP2H1LEJIHGFEDCBA:#&gt;=&lt;;:98765432+r\/.-,+*)('&%$#zc~`v_zs\\ZputsrqponmleNiKaJe^cba`_^]\\[ZYRWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:98y65432s0\/.-,+*)('&}$#\"!~}|{zyxwvutsrqponmlkjihgfedcFa`_^]@[&gt;YXWPUNSRQPONMLKJIBGFEDCBA@?&gt;=&lt;;:9876543210\/.-,+*)(i&%$#\"!~}|^t]xqvutsrqponmlejihgfedcba`_^]\\[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9876543210\/(-,+*)('&%$#\"!~}|{zyxwvutsrqponQlkjihKfedcba`_^]\\[ZSXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;|98765v3t10).-&+l)\"'&%|#dy~}|{tyxwvutsrqponmfkjihgfedcba`_^]\\[ZYXWVUTSRQPON1LKJIHGFED&&lt;%@9&gt;!&lt;;49816w4-210).-,+*)('&%$#\"y~}|{zyxwvutsrqponmlkjihgfedcbaD_^]\\[ZYXW9O8SLQPONMLKJIHGFED=BA@?&gt;=&lt;;:9876543210\/.-,+*)('&g$#\"!~a|{zyxwvutsrqpohmlkjihgfedcba`_^]\\[ZYXWVUTSRQ4ONMLK.I,GFE&gt;C&lt;A$?8=&lt;;49z16543,10\/.-,+*)('&%${\"!~}|{zyxwvutsrqponmlkjihgfedGba`_^]\\[Z&lt;R;VOT7RQPINGL\/JCHGF?DCBA@?&gt;=&lt;;:9870543210\/.-,+*)('&%$#\"!~}|{zyxwZutsrqponmOeNibgfedcba`_^]\\[ZYRWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;}:9876w43210\/.-,+*)('&}$#\"!~}|{zyxwvutsrqponmlkjihgJedcbaD_^]\\[ZYXWVUTSRQJONMLKJIHGFEDCBA@?&gt;=&lt;;:987654u210\/.-,+*j\"i&}$e\"y~}|uz]rwvutmVTjonmlkjihgfedcbaZ_^]\\[ZYXWVUTSRQPONMLKJIHGFED'BA@?&gt;=&lt;;:z2y6\/43210q(-,+*)('&%$#\"!~}|{zyxwvutsrqTonmlkNihgfeH]ba`_^]\\[ZYXWVUTSRQPONMLKJIH+FEDCB%@#&gt;=6;:387654u,10\/.-,+*)('&%$#\"!~}|{zyxwvuXsrqponmlkMcLg`eHc\\a`_X]@UZYXWP97MRQPON1FKJIHGFEDCBA@?&gt;=&lt;;:987654321r\/.-,+*)('g}f#z!~}|{^yrwvutsrqponmlkjihgfedcba`_^A\\[ZYX;VUTSR5PINMLKJIHGFEDCBA@?&gt;=&lt;;:98765v3210\/p-,+*)j'~%$#\"!~}|{zyxwvutsrqponmlkjMhgfedcba`BXA\\UZ=XWPUTMR5JONMLE.,BGFEDC&A:?&gt;=&lt;;:9876543210\/.-,+*)('&g$#\"!~}|{z\\r[votsrqpSnmfkjihgfedcba`_^]\\[ZYXWVUTS6QPONM0KJIHG*ED=BA@?&gt;=&lt;;:9876543210\/.-,+*k('&%$e\"c~}v{zsx[votsrkponmlOjibgfedcba`_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\"=6;:9276543t10).-,+*)('&%$#\"!~}|{zyxwvutWrqponmlkjLbKf_dcba`C^]\\UZYXWVUTSRQPONMLKJIHGFEDC&A@?&gt;=~;:987x543,10\/.-,+*)('&%$#\"!~}|{zyx[vutsrUponmlOjihafedcba`_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\"=&lt;;4927x5.321*\/p',+*)\"ig}$#\"!~a|{zsxwvutsrqponmlkjihgfedcbaD_^]\\[ZYXW9O8SLQPONM0KJIHGFEDCB;@?&gt;=&lt;;:9876543210q.-,+*k('&%$e\"!~}|{zyxwputsrqponmlkjihgfeHcba`_B]@[ZYRWPU8SRKPOHM0KDIHG@E(=BA@?8=&lt;;:9z76543210\/.',+*)('&%$#\"!~}|{z]xwvutsrqpRhQlejMhg`ed]bE`Y^]\\UZ=RWVUTMRQPON1LKJIHGFEDC&lt;A@?&gt;=&lt;;:987654321r\/.-,+*)('g}f#z!~}|{^yxwvutsrUjonmlkjihgfedcbE`_^]\\?ZYXWV9TSRQPONM0EJIHGFEDCBA@?&gt;=~;:987x5v321*\/(-n+$)('~%f{\"!~}v{zyxwZutsrqponQfkjihgfedcba`_^A\\[ZYXWVUT6L5PIN1LKJCHAF)D=BA@9&gt;=&lt;;:{87654321r).-,+*)('&%$#\"!b}|{zyxwvuWmVqjonmPeNihgfedcba`_^]\\[ZY&lt;WVUTS6QPO2G0KJIHGFEDCBA@?&gt;=&lt;;|98765v3t10\/(-&+l)\"'&%|#dy~}|{tyxwZoXsrqponmlkjihgfedcFa`_^]\\[ZY;Q:UNSRQ4I2MLKJIHGFEDCBA@?&gt;=~;:9876543s+r\/(-,+l)\"'h%$#\"!~}|{zyxwvutsVqponmPkjiLg`eHcba`_^]\\[ZYXWVUTS6QPONM0K.IHG@E&gt;C&A:?&gt;=6;|38765.321r\/(-n+*)('&%$#\"!~}|{zy\\wvutsrqpoQgPkdihgJe^cFa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C&lt;A@?\"=&lt;5|9876543210\/.-,+*)j'&%$#d!~}`{zs\\wvutsrqponmlkjihgJedcbaD_B]\\UZYRW:OTSRQJONM0KJC,GFEDCBA@?&gt;=&lt;;:987x543210\/.-m%l)\"'h}$#\"!x}|{^yxqZutsrqponmlkjihgfeHcba`_^]\\[=S&lt;WPUTS6QPOHM0KJIHGFEDCBA@?&gt;=&lt;;|98765v321r\/.-&+l)('&%$#\"!~}|{zyxwZutsrqToRmlkdibgJed]baZ_BW\\[ZYRWVU8SRQJO2MLKJIHGFEDCBA@?&gt;=~;:9876543s+r\/(-,+l)('~%f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\a`_B]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=&lt;;|98765.3t10\/.-,+*)('&%$#\"!b}|{zy\\wZunsrqjoRglkjibgfeHcba`_X]@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;|92765.321r\/.-,+$)j'&%$#\"!~}|{zyxwvuXsrqponmlkMcLg`edcFa`_^]\\U&gt;YXWVUTSRQPONMLKJI,GFEDC&A@?\"=&lt;;:981x543210\/.-,+*)('&%f#\"!~}`{^yxwpunsVqpinmfkNchgfe^cbaD_^]\\[ZS&lt;WVUTSRQPONMLKJIHG*EDCBA@?&gt;=}5|92765v3210\/.'n+*)('&%$#\"!~}|{zy\\wvutsrqpoQgPkdihgJedcba`_^W@[ZYXWVUTSRQPONMLK.IHGFE(CBA$?&gt;=&lt;;:981x543210\/.-,+*)('&%f#\"!~}`{^yrwvunsVkponmfkjiLgfedcba`YB]\\[ZYXWVUTSRQPONM0KJIHGFEDC%;$?8=~;49870543t10\/.-,+*#j'&%$#\"!~}|{zyxwvuXsrqponmlkMcLg`edcFa`_^]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=&lt;;|987654321*\/p-,+*)('&%$#\"!~}|{^yxwvuXsVqpohmfkNihafe^cF[`_^]V[ZY&lt;WVUTSRQPOHM0KJIHGFEDCBA@?&gt;=&lt;;|987654321q)p-&+*)j'&%$#\"!~}v{^yxwvutsrqponmlkjiLgfedcba`_AW@[TYXW:UTSRQPONMLKDI,GFEDCBA@?&gt;=&lt;;:987x54321r\/.-n+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfeHcFaZ_^]V[&gt;SXWVUNSRQ4ONMLKJIHGFE&gt;C&A@?&gt;=&lt;;:987654321r\/.-,+*)('g}f#z!b}v{zyrwvuXsrqponmlkjibgJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?&gt;=&lt;;:9876\/v3210\/.-,+*)('&%$#d!~}|{^yxwZutsrqponmlkjcLgfedcba`_^]\\[ZYXW:UTSRQ4O2MLKDIBG*ED=BA:?\"7&lt;;:92765v3210\/.-,+*)(!h%$#\"!~}|{zyxwvutsVqponmlkjiKaJe^cbaD_^]\\[ZYXWVUTM6QPONMLKJIHGFEDCBA$?&gt;=&lt;;:987w\/v3,10\/p-,+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfeHcbaD_^]\\[ZYXWVUTSLQ4ONMLKJIHGFEDCBA@?\"=&lt;;:9z765v3210\/.-,+*)('~%f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\ECY^]\\?ZYXWVUTSRQPONGL\/JIHGFEDCBA@?&gt;=&lt;;:{876543210p(o,%*)(i&%$#\"!~}|{zyxwpYtsrqponmlkjihgfedGba`_^A\\[Z=XWVUTSRQPONMLKD-HGFEDCBA@?&gt;=&lt;;:98y65432s0q.',+*#(i~%$#\"y~}|_zyxwvutsrqponmfOjihgfedcba`_^]\\[Z=XWVUTSRQP2H1LEJ-HAFED=BA@#&gt;=&lt;;:987654321*q.-,+*)('&%$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\[ZSX;VUTSRQPONMLKJIHGF)DCBA@#&gt;=&lt;}:9876543210\/.-,%*k('&%$#\"!~}|{zyxwvYtsrqpSnQlkdihafI^cba`Y^]\\?ZYXWVUTSRQPONMLEJ-HGFEDCBA@?&gt;=&lt;;:98y6543210\/.n&m*#('&g$#\"!~}|{zyxwvutmrUponmlkjihgfedcba`C^]\\[ZYXWV8N7RKPON1LKJIHGFEDCBA@?&gt;=6}:9876543210\/.-,+*k('&%$e\"!~a|{zyxwvutsrqponmfOjihgfedcba`_^]\\[Z=XWVUT7R5PONGLEJ-HG@ED=B%:?&gt;=&lt;5:98y6543210\/.-,+*)('~g$#\"!~}|{zyxwvutsrUponmlkjihJ`Id]bE`_X]\\UZYX;VUTSRQPONMLKJIHG@)DCBA@?&gt;=&lt;;:987654u210\/.-,+*j\"i&}$#\"c~}|{zyxwvutsrqponglOjihgfedcba`_^]\\[Z=XWVUT7RQP3NMLKJIHGFEDCBA@?&gt;7&lt;}:9876543210\/.-,+*k('&%$e\"c~}|uzsx[votsrkponQlkjihgfedcba`_^]\\UZ=XWVUTSRQPONMLKJIH+FEDCBA@?&gt;~6}:3zx0543t10\/.-,+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfedcbaCYB]V[ZY&lt;WVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:98765432+r\/.-,+*)('&%$#\"!~}`{zyxwZutsVqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLE.IHGFEDCBA@?&gt;=&lt;;:9z76543t1r\/.-&+$)j'~%$#z!bw|{zyrwvuXsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONG0KJIHGFEDCBA@?&gt;=&lt;;|987654321q)p-&+l)('~%|#d!x}|{ty\\qvutslqpoRmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHA*EDCBA@?&gt;=&lt;;:98765v3210\/.-,+k#j'~%$#d!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=&lt;;|9876543210\/.-,+*)('&%$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXW:U8SRQJOHM0KDIHG@E(=BA@?8=&lt;;|9876543210\/.-,+*)('&%$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXWVUTS5K4OHMLK.IHGFEDCBA@?&gt;=&lt;;:9876543210\/.-,+*)('&%$#z!b}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[&gt;YXWVUTSRQPONM0E.IHGFEDCBA@?&gt;=&lt;;:9z76543t10\/p-,+*)('&%$#\"!bw`{zyxwvutsrqponmlkNihgfeHcFa`_X]V[&gt;YRWVUNS6KPONMFKJI,GFEDCBA@?&gt;=&lt;;|3z76543210\/.-,+*)('h%$#\"!~}|{]s\\wputsVqponmlkjihgfeH]Fa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C&lt;A@?\"=&lt;;:987654321r\/(-n+*)('&%$#\"!~}|{zy\\wvutsVqpoRmlkjihgfedcbaD_X]@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|92765.3t+0\/.-&+*)j'&%$#\"!~}|{zy\\wpuXsrqponmlkjihgfedcFa`_^]\\[ZY;Q:UNSRQ4ONMLKJIHGFEDC&A:?\"=&lt;;:9876543210\/.-n+*)('&%$#cyb}v{zy\\wvutsrqponmlkNihaJedcba`_^]\\[ZYXWVU8SRQPO2MLK.IHGFEDCBA@?&gt;=~;:3z76543210\/.-,+*)('h%$#\"!b}`{zyrwpuXslqpohmPejihg`edcFa`_^]\\[ZYXWVU8SRK4ONMLKJIHGFEDCBA@?\"=&lt;;:98765u-t1*\/p-,+$)\"'h%|#\"!x}`uzyxwputsVqponmlkjihgfeHcb[D_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?&gt;=~;:9876543210\/p-,+$)j'&%$#\"!~}|{zyxwvuXsrqpoRmlkNihgfedcba`_^]@[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=~;:92705v3,10\/(-n%*)('~%$#d!~}|{zyxwvutsVqpohmPkjihgfedcba`_^]\\[&gt;YXWVUTSRQ3I2MFKJI,GFEDCBA@?&gt;=&lt;;|98705v3210\/.-,+*)('&%$#d!~}|{zyxwYoXslqpoRmlkjihgfedcbaD_^]\\U&gt;YXWVUTSRQPONMLKJI,GFEDC&A@?\"=&lt;;:987654321r\/.-,%l)('&%$#\"!~}|{zyxwZutsrqToRmlkdibgJe^cbaZ_BW\\[ZYRWVU8SRQPONMLKJIHG*EDCB;$?&gt;=&lt;;:9876543210\/p-,+*)('&%e{d!x}|{^yxwvutsrqponmPkjihaJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?&gt;=&lt;;:98765v3210\/(-n+*)('&%$#\"!~}|{zy\\wvutsVqpoRmlkjihgfedcbaD_^]\\[TY&lt;WVUTSRQPONMLKJIHG*EDCBA$?\"=&lt;;4927x5.321*\/p',+*)\"'&%f#\"!~}|{zyxwvuXsrqpohmPkjihgfedcba`_^]\\[&gt;YXWVUTSRQ3I2MFKJI,GFEDCBA@?&gt;=&lt;;|98765.3t10\/.-,+*)('&%$#\"!b}|{zyxwvuWmVqjonmPkjihgfedcba`_B]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?\"=&lt;;|9876543210\/.-n+*)('&}f#\"!~}|{zyxwvutsrqTonmlkNiLgfe^c\\aD_X]\\[TY&lt;QVUTSLQPO2MLKJIHGFEDCBA$?&gt;=&lt;;:3z76543210\/.-,+*)('h%$#\"!~}|{]s\\wputsVqponmlkjihgfeHcba`_^W@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9z76543210\/.-,+l)('&%$#z!b}|{zyxwvutsrqponmPkjihgJedcFa`_^]\\[ZYXWVU8SRQPONMFK.IHGFEDCBA@?&gt;=&lt;;:9z76543t1r\/.-&+$)j'~%$#z!bw|{zyrwvuXsrqponmlkjihgJedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9z76543210\/.-,+l)('&%$#z!b}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[&gt;YXWVUTSRQPONM0KJIHGFED=&A@?&gt;=&lt;;:987654321r\/.-,+l)('h%$#\"!~}|{zyxwZutsrqpongPkjihgfedcba`_^]\\[&gt;YXWVU8S6QPOHMFK.IBGFE&gt;C&;@?&gt;=6;:9z76543210\/.-,+l)('&%$#\"yb}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[&gt;YXWVUTSRQPONM0KJIHGFED=&A@?&gt;=&lt;;:987654321r\/.-,+*)('g}f#z!~}`{zyxwvutsrqpoRmlkjihgfe^cFa`_^]\\[ZYXWVUTSRQ4ONMLK.IHG*EDCBA@?&gt;=&lt;;:9z76543210\/(-n+*)('&%$#\"!~}|{zy\\wvutsVqTonmfkdiLgf_dc\\aD_X]\\[TY&lt;QVUTSLQPO2MLKJIHGFEDCBA$?&gt;=&lt;;:98705v3210\/.-,+*)('&%$#d!~}|{zyxwYoXslqpoRmlkjihgfedcbaD_^]\\[ZYXWPU8SRQPONMLKJIHGFEDC&A@?&gt;=&lt;;:9y1x5.321r\/.-,+*)('&%$#d!~}|{zyxwvoXsrqponmlkjihgfedcFa`_^]@[ZY&lt;WVUTSRQPONMLK.IHGFEDCBA@9\"=&lt;;:9876543210\/.-n+*)('h%f#\"y~}v{^sxwvunsrqTonmlkjihgfedcFa`_^]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?&gt;=&lt;;{3z70543t10\/.-,+*)('&%f#\"!~}|{zyxqZutsrqponmlkjihgfeHcba`_^]\\[=S&lt;WPUTS6QPONMLKJIHGFE(CBA@?&gt;=&lt;;:927x543210\/.-,+*)('&%f#\"!~}`{zy\\wvutsrqponmlkNihgfedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|98165.3t1*\/.-&+l#('&%|#\"!b}|{zyxwvutsrqTonmlkjihgfe^cFa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C&lt;A@?\"=&lt;;:987654321r\/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjihgfeG]FaZ_^]@[ZYXWVUTSRQPO2MLKJIHGFEDCBA@9\"=&lt;;:9876543210\/.-n+*)('h%$#d!~}|{zyxwvutsVqponmlkjihgfed]Fa`_^]\\[ZYXWVUTSRQ4ONMLK.I,GFE&gt;C&lt;A$?&gt;7&lt;;49z70543,1r).-,+$)('h%$#\"!~}|{zyxwZutsrqponmlkjihaJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?&gt;=&lt;;:98765v3210\/.-,+*)('&}f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\a`_B]\\[ZYXWVUTSRQ4ONMLKJIHGFEDCBA@?8=~;:9876543210\/.-,+l)('&%f#\"!b}|{zyxwvutsrqTonmlkjihgfedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFE(CBA$?&gt;=&lt;;:9876543t10\/.-,+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfedcbaCYB]V[&gt;YXQVUNS6QJONMFK.CHGFE&gt;'%;@?&gt;!&lt;;:9876543210q.-,+*)('&%$#\"!~}|uz]xwvutsrqponmlkjihKfedcba`_^@V?ZSXWV9TSRQPONMLKJIH+FEDCBA@?&gt;=&lt;;:98765.u210\/.-,+*)('&%$#\"c~}|{z]xwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUN7RQPONMLKJIHGFEDCB%@?&gt;=&lt;}:{876\/4-2s*\/.-,%*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfe^Gba`_^]\\[ZYXWVUTSR5PONMLKJIH*@)D=B%:?&gt;=&lt;5:98y6543210\/.-,+*k('&%$#\"!~}|{zyxwvunWrqponmlkjihgfedcbE`_^]\\[ZYX:P9TMRQP3NMLKJIHGFEDCB%@?&gt;=&lt;;:9876543210\/.',m*)('&%$#\"!~}|{zyx[vutsrUponQlkjihgfedcba`C^]\\[ZYXWVUTSRQPONMLEJ-HGFEDCBA@?&gt;=&lt;;:98y65432s0q(-,+*#('&g$#\"!~}|{zyxwvYtsrqponmlkjihgfedcb[`C^]\\[ZYXWVUTSRQPON1LKJIHGFED&&lt;%@9&gt;!6;:981654u210\/.-,+*)('&g$#\"!~}|{zyxwvutsrqpinQlkjihgfedcba`_^]\\?ZYXWVUTSR4J3NGLKJ-HGFEDCBA@?&gt;=&lt;}:9876543210\/.-,+*)('~g$#\"!~}|{zyxwvutsrUponmlOjihKfedcba`_^]\\[Z=XWVUTSRQPONMLKJIHGFE&gt;'BA@?&gt;=&lt;;:98765432s0\/.-,m*k('&}${\"c~}v{zsxwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUTSL5PONMLKJIHGFEDCBA@#&gt;=&lt;;:9876v.u2+rp(-,+l)('&%$#\"!~}|{^yxwvutsrqponmlkjihgf_Hcba`_^]\\[ZYXWVUTS6QPONMLKJI+A*E&gt;CBA$?&gt;=&lt;;:9876543t10\/.-,+*)('&%$#\"!~}|{ty\\wvutsrqponmlkjihgJedcbaD_^]@[ZYXWVUTSRQPO2MLKJIHGFEDCBA@?&gt;=&lt;;:927x543210\/.-,+*)('&%f#\"!~}`{^yxwpunsVqjonmfkjiLgfedcba`_^]\\[&gt;YXWVUTSRQPONMLKJIHGFE&gt;C&A@?&gt;=&lt;;:987654321r\/.-,+*)('g}f#z!b}|uzyr[YotsrUponmlkjihgfedGba`_^]\\[ZYXWVUTSRQPONGL\/JIHGFEDCBA@?&gt;=&lt;;:{876543210p(o,%*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfedcbaZC^]\\[ZYXWVUTSRQPON1LKJIH+FED'BA@?&gt;=&lt;;:9876w43210\/.-,+*)('&%$#\"!~}v_zyxwvutsrqponmlkjMhgfedGbE`_^W\\UZYX;VUTSRQPONMLKJ-HGFEDCBA@?&gt;=&lt;;:9876543,s0\/.-,+*)('&%$#\"!~a|{zyxwvutVlUpiRPfkjiLgfedcba`_^]\\[&gt;YXWVUTSRQPONMLKJIHGFED=&A@?&gt;=&lt;;:987654321r\/.-,+*)('g}f#z!~}`{zyxwvutsrqpoRmlkjihgfedcba`_^]\\[ZYXWPU8SRQPONMLKJIHGFEDC&A@?&gt;=~;:9z76543210\/.-,+l)('&%$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXW:UTS6QPONMLKJIHGFE(CBA@?&gt;=&lt;;:9876543210\/.-&+l)('&%$#\"!~}|{zyxwZutsrqponmOeNibgJedc\\aZCAW\\[Z=XWVUTSRQPONML\/JIHGFEDCBA@?&gt;=&lt;;:987654-2s0\/.-,+*)('&%$#\"!~a|{zyxwvutVlUpinmlOjihgfedcba`_^A\\[ZYXWVUTSRQPONMLKJIHGFE&gt;'BA@?&gt;=&lt;;:98765432s0\/.-,m*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfedcba`_XA\\[ZYXWVUTSRQPONML\/JIHGF)DCB%@?&gt;=&lt;;:987654u210\/.-,+*)('&%$#\"!~}|{zyr[vutsrqponmlkjihgfIdcba`_^]\\&gt;T=XQV9TSLQPIN1LEJIHAF)&gt;CBA@9\"~6;:9z76543210\/.-,+l)('&%$#\"!~}|{zyxwvutsrqpiRmlkjihgfedcba`_^]@[ZYXWVUTS5K4OHMLK.IHGFEDCBA@?&gt;=~;:9876543210\/.-,+*)('&%$#z!b}|{zyxwvutsrqponmPkjihgJedcFa`_^]\\[ZYXWVU8SRQPONMLKJIHGFEDCBA@?&gt;=&lt;;49z76543210\/.-,+*)('h%$#\"!b}|{^yxwvutsrqponmPkjihgfedcba`_^]\\[ZYXWVUTSLQ4ONMLKJIHGFEDCBA@?\"=&lt;;:98765u-t1*\/.-n+*)('&%$#\"!~}`{zyxwvutsrqponmlkjihgfedc\\aD_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?&gt;=~;:9876543210\/p-,+*)('&%$#\"!~}|{zyxwvutsrkTonmlkjihgfedcba`_B]\\[ZY&lt;WVU8SRQPONMLKJIHG*EDCBA@?&gt;=&lt;;:9876543210\/.-,%l)('&%$#\"!~}|{zyxwZutsrqToRmlkdibgfeHcba`_^]\\[ZYXW:UTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;5|9876543210\/.-,+*)j'&%$#\"!~}_u^yrwZutmrqjoRmfkjibgJ_dcbaZCAW\\[Z=XWVUTSRQPONML\/JIHGFEDCBA@?&gt;=&lt;;:987654321*q.-,+*)('&%$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\?ZYXWVUTSRQPONMLKJIHGFEDCBA@9&gt;!&lt;;:9876543210\/.-,m*)('&g$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVOT7RQPONMLKJIHGFEDCB%@?&gt;=&lt;}:{876\/4-2s*\/.-,%*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfedcba`_^]\\UZ=XWVUTSRQPONMLKJIH+FEDCBA@?&gt;~6}:38y654-2+0q(-,+*#('&g$#\"!~}|{zyxwvYtsrqponmlkjihgfedcba`_^]\\[ZSX;VUTSRQPONMLKJIHGF)DCBA@?&gt;=&lt;|4{81654u210\/.-,+*)('&g$#\"!~}|{zyxwvutsrqponmlkjihg`Idcba`_^]\\[ZYXWVUT7RQPON1LKJ-HGFEDCBA@?&gt;=&lt;}:9876543210\/.-,+*)('&%$#\"!~}v_zyxwvutsrqponmlkjMhgfedGbE`_X]\\UZ=RWVUTMRQP3NMLKJIHGFEDCB%@?&gt;=&lt;;:9876543210\/.-,+*)('&%|e\"!~}|{zyxwvutsrqpSnmlkjihgfH^Gb[`_^A\\[ZYXWVUTSRQP3NMLKJIHGFEDCBA@?&gt;=&lt;;:9876543,s0\/.-,+*)('&%$#\"!~a|{zyxwvutVlUpinmlOjihgfedcba`_^A\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@9&gt;!&lt;;:9876543210\/.-,m*)('&g$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTMR5PONMLKJIHGFEDCBA@#&gt;=&lt;;:{8y654-2+0q.-&+*#(i~%$#\"y~}|_zyxwvutsrqponQlkjihgfedcba`_^]\\[ZYXWVUTSRQPIN1LKJIHGFEDCBA@?&gt;=&lt;}:98765432r*q.',m*)\"'&}$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTMR5PONMLKJIHGFEDCBA@#&gt;=&lt;;:9876v.u2+0\/.o,+*)('&%$#\"!~a|{zyxwvutsrqponmlkjihgfedcba`_XA\\[ZYXWVUTSRQPONML\/JIHGF)DCB%@?&gt;=&lt;;:987654u210\/.-,+*)('&%$#\"!~}|{zyxwvutslUponmlkjihgfedcba`C^]\\[Z=X;VUTMRKP3NMFKJCH+F?DCB;@?&gt;!&lt;;:9876543210q.-,+*)('&%$#\"!~}|{zyxwvutsrqpohQlkjihgfedcba`_^]\\?ZYXWVUTSR4J3NG0.DIHG*EDCBA@?&gt;=&lt;;:9z76543210\/.-,+*)('&%$#\"!~}|{zyxqZutsrqponmlkjihgfeHcba`_^]\\[=S&lt;WPUTS6QPONMLKJIHGFE(CBA@?&gt;=&lt;;:9876543210\/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjiLgfeHcba`_^]\\[ZYXW:UTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:98705v3210\/.-,+*)('&%$#d!~}|{^y\\wvotslqTinmlkdihgJedcba`_^]\\[ZY&lt;WVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:927x543210\/.-,+*)('&%f#\"!~}|{zy[qZunsrqTonmlkjihgfedcFa`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDC&lt;A$?&gt;=&lt;;:9876543210\/p-,+*)('&%e{d!x}|{^yxwvutsrqponmPkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLE.IHGFEDCBA@?&gt;=&lt;;:9z76543t10\/p-,+*)('&%$#\"!b}|{zyxwvutsrqponmlkjihgfedcba`_^W@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|98165.3t+0\/.-&+*)j'&%$#\"!~}|{zy\\wvutsrqponmlkjihgfedcba`_^]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?&gt;=&lt;;{3z705v32+0\/(-,+l)('&%$#\"!~}|{^yxwvutsrqponmlkjihgfedcba`_^]\\[ZS&lt;WVUTSRQPONMLKJIHG*EDCBA@?&gt;=}5|92765v3210\/.-,+*)('h%$#\"!~}|{zyxwvutsrqponmlkjihgfedc\\aD_^]\\[ZYXWVUTSRQPO2MLKJI,GFE(CBA@?&gt;=&lt;;:987x543210\/.-,+*)('&%$#\"!~}|{zyxwvutslqTonmlkjihgfedcba`_B]\\[ZY&lt;WVU8SRQPONMLKJIHG*EDCBA@?&gt;=&lt;;:9876543210\/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjihgfeG]FaZ_B]\\UZYRW:OTSRQJ31GLKJ-HGFEDCBA@?&gt;=&lt;}:9876543210\/.-,+*)('&%$#\"!~}|{zyxqvYtsrqponmlkjihgfedGba`_^]\\[Z&lt;R;VOTSR5PONMLKJIHGFED'BA@?&gt;=&lt;;:9876543210\/.-,+*)('&%$#\"!xa|{zyxwvutsrqponmlOjihgfIdcbE`_^]\\[ZYXWVUT7RQPONMLKJIHGFEDCBA@?&gt;=&lt;;:987654321*q.-,+*)('&%$#\"!~}|_zyxwvYtWrqjonglOdihgf_dcbE`_^]\\[ZYXWVUT7RQPONMLKJIHGFEDCBA@?&gt;=&lt;;:987654321*q.-,+*)('&%$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\?ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:92y6543210\/.-,+*)('&g$#\"!~}|{z\\r[votsrUponmlkjihgfedGba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@9&gt;!&lt;;:9876543210\/.-,m*)('&g$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONGL\/JIHGFEDCBA@?&gt;=&lt;;:{87654u2s0\/.',%*k('~%${\"cx}|{zsxwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFED=B%@?&gt;=&lt;;:9876543210q.-,+*)('&f|e\"y~a|{tyxqvutWrqponmlkjihgfIdcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCB;@#&gt;=&lt;;:9876543210\/.o,+*)('&%$dzc~w|{z]xwvutsrqponmlOjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHG@)DCBA@?&gt;=&lt;;:987654u210\/.o,+*k('&%$#\"!~}|{z]xwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUN7RQPONMLKJIHGFEDCB%@?&gt;=&lt;}:98y6543210\/.-,+*k('&%$#\"!~}|{zyxwvutsrqponmlkjihgfedc\\E`_^]\\[ZYXWVUTSRQP3NMLKJIHGF(&gt;'B;@#&gt;=&lt;5:38y6\/432+0q(-,+*#jh~%$#d!~}|{zyxwvutsVqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONG0KJIHGFEDCBA@?&gt;=&lt;;|98765v3210\/.-,+*)('&%$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311LKJIHGFED'%%@?&gt;=&lt;;:98yww43210\/.-,mkk('&%$#\"!~a__zyxwvutsrUSSnPlkjiLaJedcba`CXA\\&gt;ZS&lt;QV97ML53O20FE.,,**((&&$$\"&gt;=~5|9y70w.32s*q.n,+*)('h}f#\"!~}|{z]r[vXtmVkpSQgfOMiLJ`_HFbECYXA??==;;99775Q42HG0.JIHG*?(C%A:#8=~|43zx6wu-,sqqoommkkiig%fdzyb`|{zy\\qZutsrqponmlO*ihgfedcba`_^]\\[ZYXWVUTS6QPONML\/--gGFEDCBA@#!!&lt;;:987654uss0\/.-,+*)(igg$#\"!~}|{z][[vutsrqponQOOjihgfedcbECC^]\\[ZYXWV977RQPONMLKJ-++FEDCBA@?&gt;!}}:98765432sqq.n,+*)j!h%$#\"!~av_z\\xqZotWUkjSQQOkNLbaJHHFbECYXA??==;;997SR5J3N0LE.CH+)?&gt;'%%##!!}}{98y0w4t210\/.-n%l)('&%$#\"cxa|^zs\\qvYWmlUSoRPfeNLLJJHdGE[ZCA]@&gt;TS&lt;::88664P31GF\/-IHGF)&gt;'B$@9\"7&lt;}{32ywwuussqqo-nl$#jhhffddb~a_ut][wvutWlUponmlkjihgJ%dcba`_^]\\[ZY&lt;WVUTSR533mMLKJIHGF)''BA@?&gt;=&lt;;:{yy6543210\/.omm*)('&%$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311LKJIHGFED'%%@?&gt;=&lt;;:98yww4t210\/p'n+*)('&g|e\"b~w`uz][qpYWsVTjiRPPNNLLJJHdcF[D_A]V?TY&lt;:PO86R53IH1\/\/--++))'CB%:#&gt;~&lt;;:987x\/v3210\/.-,m$k(h&}f{\"cawv_]y\\ZpoXVrUSihQOkNLbaJHHFFD`CAWV?==;;9U86LK42NMLK.C,G)E&gt;'&lt;A$\"87~||zzx6wu-,sqqoom+lj\"!hf$#\"!bw`{zyxwvutsrU0onmlkjihgfedcba`_B]\\[ZYX;99srRQP3NMLKJIHG*((CBA@?&gt;=&lt;;|zz76543210\/pnn+*)('&%$#dbb}|{zyxwvuXVVqponmlkjiLJJedcba`_^]@&gt;&gt;YXWVUTSRQ422MLKJIHGFE(&&A@?&gt;=&lt;;:9zxx5u3210q(o,+*)('h}f#c!xav{^\\rqZXXVrUSihQOkNLbaJHHFFDDBB@\\[&gt;S&lt;W9UN7LQ42HG0..,H+)?&gt;'%A$\"87~||zzxxvvt21r)p-m+*)('&g|e\"!~}|{zy\\qZuWslUjoRPfeNLhKI_^GEaDBXW@&gt;Z=;QP97S64JI20L\/-CB+))''%A$\"87~|:987x\/v3s1*q(-nl$#jhhf$ecyxa_{^\\rqZXXVVTpSQgfOMihgfI^Gba`_^]\\[ZY&lt;uVUTSRQPONMLKJIHGFED'BA@?&gt;=~||X87654321rpp-,+*)('&%fdd!~}|{zyxwZXXsrqponmlkNLLgfedcba`_B@@[ZYXWVUTS644ONMLKJIHG*((CBA@?&gt;=&lt;;|zz76543210\/pnn+*)('&%$#dbb}_{zyx[pYtsrqpoRgPkMibK`eHF\\[DB^A?UT=;W:8NM64P31GF\/--++))''%%#?&gt;!6}:z81x\/4us+*qo-nl$#jhhffddbb``^zy\\qZuWsrqponQfOjihgfedcF[D_A]V?TY&lt;:PO8664P31GF\/-I,*@?(&&$@#!76}{{yyw5vt,+rp.-,+l#j'g%|ez!b`vu^\\\\ZvYWmlUSoRPfeNLLJJHHFFD`CAWV?=YXWV9N7RQPONMLKJI,eFEDCBA@?&gt;=&lt;}:98765vttP0\/.-,+*)jhh%$#\"!~}|{^\\\\wvutsrqpoRPPkjihgfedcFDD_^]\\[ZYXW:88SRQPONMLK.,,GFEDCBA@?\"~~;:9876543trr\/.-,+*)('hff#\"!~}|{zy\\ZZuWsrqpShQlkjihgJ_HcEaZCX]@&gt;TS&lt;:V97ML5331M0.DC,**((&&$$\"\"~&lt;;|3z7w5.u,1rp('nllj(ig}|eccaa__]][[YutWlUpRnmlkjiLaJedcba`_^AV?Z&lt;XQ:OT75KJ311\/\/--+G*(&gt;=&$@#!76}{{yyw5vt,+rp.-,+l#j'g%|ez!b`vu^\\xwvuXmVqponmlkjihK&edcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:987x543210qooK+*)('&%$ecc~}|{zyxwvYWWrqponmlkjMKKfedcba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?&gt;=&lt;;:{yy6543210\/.omm*)('&%$#\"caa|{zyxwvutWUUpRnmlkNcLgfedcbEZC^@\\U&gt;SX;9ON7553O20FE.,H+)?&gt;'%A$\"87~||zzxxvvt21r)p-m+$k\"'hf|{db~a_ut][wZXnmVTTRRPPNNLhgJ_HcEa`_^]\\?T=XWVUTSRQ4I2M\/KD-BG*(&gt;=&$@#!76}{9zx0\/vt2sq)(om+lj\"!hffddb~a_ut][[YuXVlkTRnmlkNcLgIe^G\\aDBXW@&gt;&gt;&lt;X;9ON755331M0.DC,**(D'%;:#!=&lt;;:{2y6543210\/.-nI*k('&%$#dbb&gt;|{zyxwvuXVVqponmlkjiLJJedcba`_^]@&gt;&gt;YXWVUTSRQ422MLKJIHGFE(&&A@?&gt;=&lt;;:9zxx543210\/.-nll)('&%$#\"!b``{zyxwvutsVTTonmlkjihgJHHcEa`_^AV?ZYXWVU8M6Q3OH1FK.,BA*((&B%#98!};|z21xvvttrrppn,+l#j'g%|ez!b`vu^\\\\ZvYWmlUSoRPfeNLLJJHHFFD`_BW@[=YXWVUT7L5PONMLKJI,A*E'C&lt;%:?\"~65|zzx6wu-,sqqo-nl$#jhhf$ecyxa_{zyx[pYtVrkTinQOedMKKIeHF\\[DB^]\\[&gt;S&lt;WVUTSRQPON1jKJIHGFEDCBA@?&gt;=&lt;;:9876543210\/.-,+*)('&%$#\"!~}|_zyxwvuXVV2ponmlkjiLJJedcba`_^]@&gt;&gt;YXWVUTSRQ422MLKJIHGFE(&&A@?&gt;=&lt;;:9zxx543210\/.-nll)('&%$#\"!b``{zyxwvutsVTTonmlkjihgJHHcba`_^]\\[&gt;&lt;&lt;W9UTSR5J3NMLKJI,A*E'C&lt;%:?\"~65|zzx6wu-,sq\/pn&%ljjhhffddb~}`u^y[wpYnsVTjiRPlOMcbKIIGGEECCA]\\?T=X:VUTSRQ4I2MLKJIHGF)&gt;'B$@9\"7&lt;}{32yw5vt,+rppn,mk#\"igge#dbxw`^z][qpYWWUqTRhgPNjihgJ_HcEaZCX]@&gt;TS&lt;:V97ML5331M0.DC,*FEDC&;$?&gt;=&lt;;:9876wR3210\/.-,+*)('&%$#\"!~}`{zyxwvYWW3qponmlkjMKKfedcba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?&gt;=&lt;;:{yy6543210\/.omm*)('&%$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==X:VUTS6K4ONMLKJ-B+F(D=&;@#!76}{9zx0\/vttrrppnnl*)j!h%e#zcx}`^ts\\ZvYWmlUSSQQOOMMKgfI^GbD`_^]\\[&gt;S&lt;WVUTSRQP3H1L.JC,AF)'=&lt;%#?\"~65|z8yw\/.us1rp('nllj(ig}|ec!b`vu^\\x[YonWUUSoRPfeNLhgfeH]FaC_XAV[&gt;&lt;RQ:8866442N1\/ED-+G*(&gt;=&$$\"&gt;!}54{y7654u,s0\/.-,+*)('hC$e\"!~}|{^\\\\8vutsrqpoRPPkjihgfedcFDD_^]\\[ZYXW:88SRQPONMLK.,,GFEDCBA@?\"~~;:9876543trr\/.-,+*)('hff#\"!~}|{zy\\ZZutsrqponmPNNihgfedcbaDBB]?[ZYX;P9TSRQPO2G0K-IB+@E(&&lt;;$\"\"~&lt;}{32ywwu3tr*)pnnlljjhhf$#dyb}_{t]rwZXnmVTTRRPPNjMKa`IGGEECCAA?[Z=R;V8TSRQPO2G0KJIHGFED'&lt;%@\"&gt;7~5:{y10wu3tr*)pn,mk#\"igge#dbxw`^z][qpYWWUqTRhgPNjihgJ_HcEaZCX]@&gt;TS&lt;::8866442N1\/ED-++)E(&&lt;;$\"&gt;=&lt;;|3z76543210\/.oJ+*)('&%$#\"!~}|{zyxwvutsrqponmPkjihgfIGG#a`_^]\\[Z=;;VUTSRQPON1\/\/JIHGFEDCB%##&gt;=&lt;;:9876wuu210\/.-,+*kii&%$#\"!~}|_]]xwvutsrqpSQQlkjihgfedGEE`_^]\\[ZYX;99TSRQPONML\/--H*FEDC&;$?&gt;=&lt;;:{2y6v4-t+0qo'&mkki'hf|{dbb``^^\\\\ZZXtsVkToQmfOdiLJ`_HFFDDBB@@&gt;&gt;&lt;XW:O8S5QPONML\/D-HGFEDCBA$9\"=};4{27xv.-trrp.om%$ki'hf|{db~a_ut][wZXnmVTpSQgfOMMKgJH^]FD`_^]@U&gt;Y;WP9NS64JI200.J-+A@)'C&$:9\"~~||z8yw\/.ussq\/pn&%lj('&%f{d!~}|{zyxwvY4srqTonmlkjMKK'edcba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?&gt;=&lt;;:{yy6543210\/.omm*)('&%$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311L.JIHG*?(CBA@?&gt;!6}:z81x\/4us+*qoom+lj\"!hffddbb``^^\\\\ZvuXmVqSohQfkNLbaJHHFbECYXA??==;;9977553ON1F\/J,HGFEDC&;$?&gt;=&lt;;:98y0w4t2+r).om%$kiiggeec!b`vu^\\\\ZvYWmlUSSQmPNdcLJfedcF[D_A]V?TY&lt;:PO86644220L\/-CB+))''%%#?\"~65|z8765v-t10\/.-,+*)(iD%$#\"!~}|{zyxwvutsrqpoRmlkjihKII%pba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:987654RQ"
  },
  {
    "id": "386",
    "title": "Markdown",
    "description": "",
    "url": "",
    "language_short": "markdown",
    "code": "Hello, World!"
  },
  {
    "id": "387",
    "title": "mathematica online",
    "description": "",
    "url": "",
    "language_short": "mathematica",
    "code": "Notebook[{Cell[\r\nBoxData[RowBox[{\"Print\",\"[\",\"\\\"Hello World\\\"\",\"]\"}]],\"Input\",CellID-&gt;1]},\r\nStyleDefinitions-&gt;\"Default.nb\",FrontEndVersion-&gt;\"10.0 for Wolfram Cloud Platform (June 2 2014)\"]"
  },
  {
    "id": "388",
    "title": "MATL",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello, World!'"
  },
  {
    "id": "389",
    "title": "Matlab",
    "description": "",
    "url": "",
    "language_short": "matlab",
    "code": "disp('hello world')"
  },
  {
    "id": "390",
    "title": "maxscript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "print \"Hello, world!\"\r\n-- \"Hello, world!\"\r\n \r\n \r\n-- Note that MAXScript is expression-based, so simply writing \"Hello, world!\" is\r\n-- sufficient to echo it for the reader. Like Haskell, all MAXScript expressions\r\n-- *must* return values, even if they're unused."
  },
  {
    "id": "391",
    "title": "Maze",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "##,##,##\r\n##,^^,## \/\/Car Starts\r\n##,AA,## \/\/Do AA to Car\r\n##,&gt;&gt;,## \/\/Print Car\r\n##,(),## \/\/Destroy Car\r\n##,##,##\r\n \r\nAA-&gt; =\"Hello World!\""
  },
  {
    "id": "392",
    "title": "MEL (Maya Embedded Language)",
    "description": "",
    "url": "",
    "language_short": "mel",
    "code": "proc helloWorld () {\r\n    print \"Hello World\\n\";\r\n}\r\nhelloWorld;"
  },
  {
    "id": "393",
    "title": "meq",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ".==++&gt;:+&gt;+[&gt;:++++++++]&gt;:=+&gt;===++&gt;.===+++++++&gt;:=+&gt;:=++++&gt;:++++++++&gt;:rp&gt;p&gt;&gt;p&gt;p&gt;p&gt;p&gt;p&gt;p&gt;p&gt;p&gt;p!"
  },
  {
    "id": "394",
    "title": "Mercury",
    "description": "",
    "url": "",
    "language_short": "mercury",
    "code": ":- interface.\r\n:- import_module io.\r\n:- pred main(io::di, io::uo) is det.\r\n \r\n:- implementation.\r\nmain(!IO) :-\r\n    io.write_string(\"Hello, World!\\n\", !IO)."
  },
  {
    "id": "395",
    "title": "Migol",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "'H&gt;,'e&gt;,'l&gt;,'l&gt;,'o&gt;,',&gt;,' &gt;,'w&gt;,'o&gt;,'r&gt;,'l&gt;,'d&gt;,'!&gt;,10&gt;"
  },
  {
    "id": "396",
    "title": "MiLambda",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "&gt;  EEEEEEEΔΔΘς       v\r\nv  ςΘΔEEEEEEEEEE     &lt;\r\n&gt;  EEEEEEEEEEEδδΘς   v\r\nv  ΘδδEEEEEEEEEEEς   &lt;\r\n&gt;  ς EEEEEEEEEEEΔΘ   v\r\nv  ΘΔΔΔΔEEEEς        &lt;\r\n&gt;  ςEEEΔΔΘ           v\r\nv  ΘδEEEEEEEEEEEEς   &lt;\r\n&gt;  ςEEEEEEEEEEEΔΘ    v\r\nv  ΘΔΔΔΔEEEEEEEEEEEς &lt;\r\n&gt;  ςEEEEEEEEEEEδδΘ   v\r\nv  ΘEEEEEEEEEEς      &lt;\r\n&gt;  ςEEEΔΔΔΘ          λ"
  },
  {
    "id": "397",
    "title": "minecraft",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "\/tellraw @p [\"\",{\"text\":\"Hello World\"}]"
  },
  {
    "id": "398",
    "title": "Mineso",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "-1 &lt;111111111111111111111111111111111111111111111111111111111111111111111111 &gt;111111\r\n&lt;11111111111111111111111111111 &gt;111111 &lt;1111111 &gt;111111 &gt;111111 &lt;111 &gt;111111\r\n=11111111111111111111111111111111 &gt;111111\r\n&lt;1111111111111111111111111111111111111111111111111111111 &gt;111111 &lt;111111111111111111111111\r\n&gt;111111 &lt;111 &gt;111111 &gt;11 -11 &lt;111111 &gt;111111 &lt;11111111 &gt;111111\r\n=111111111111111111111111111111111 &gt;111111"
  },
  {
    "id": "399",
    "title": "mips",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": ".data\r\nhello_world: .asciiz \"Hello World!\"\r\n \r\n.text\r\nmain:\r\n    li $v0, 4            # Load syscommand print_string\r\n    la $a0, hello_world  # Load hello_world string into register $a0\r\n    syscall              # Print the string\r\n    jr $ra               # Return"
  },
  {
    "id": "400",
    "title": "mirc",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "echo -a Hello World!"
  },
  {
    "id": "401",
    "title": "Mmmm()",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Mmm=m[m.m()].m(m.m());\r\nMmmm=m[mm].m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();Mmmmm=mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();m[mmmm].m(mmm.m());\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();Mmmmmm=mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nMmmmmmmmm=mmm.m();\r\nm[mmmm].m(mmm.m());\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();Mmmmmmm=mmm.m();\r\nm[mmmm].m(mmmmmm);m[mmmm].m(mmmmmm);\r\nmmm.m();mmm.m();\r\nMmmmmmmm=mmm.m();\r\nm[mmmm].m(mmmmmmm);\r\nmmm.m();mmm.m();\r\nMmmmmmmmmm=mmm.m();\r\nMmmm=m[mm].m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();\r\nMmmmmmmmmmm=mmm.m();\r\nMmmmmmmmmmmm=mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();\r\nm[mmmm].m(mmm.m());\r\nm[mmmm].m(mmmmmmmmmm);\r\nm[mmmm].m(mmmmm);\r\nm[mmmm].m(mmmmmmm);\r\nm[mmmm].m(mmmmmmmmm);\r\nm[mmmm].m(mmmmmm);\r\nm[mmmm].m(mmmmmmmm);\r\nm[mmmm].m(mmmmmmmmmmm);"
  },
  {
    "id": "402",
    "title": "modiscript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "mitroon\r\nbhaiyo aur behno \"ek nambar do"
  },
  {
    "id": "403",
    "title": "modula 2",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\n \r\nFROM Terminal2 IMPORT WriteString, WriteLn;\r\n \r\nBEGIN\r\n \r\n    WriteString(\"Hello World\");\r\n    WriteLn;\r\n    \r\nEND HelloWorld."
  },
  {
    "id": "404",
    "title": "modula 3",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\nIMPORT Io;\r\nBEGIN\r\n    IO.Put (\"Hello World\\n\")\r\nEND HelloWorld."
  },
  {
    "id": "405",
    "title": "mongo",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "print(\"Hello World!\")"
  },
  {
    "id": "406",
    "title": "Monkey",
    "description": "",
    "url": "",
    "language_short": "monkey",
    "code": "1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 LEFT\r\n1 LEFT\r\n2 LEFT\r\n2 UP\r\n2 RIGHT\r\n2 LEFT\r\n2 DOWN\r\n2 UP\r\n2 RIGHT\r\n2 LEFT\r\n2 DOWN\r\n2 RIGHT\r\n2 BOND\r\n1 YELL\r\n1 LEFT\r\n1 LEFT\r\n1 UP\r\n1 UP\r\n1 LEFT\r\n1 LEFT\r\n1 UP\r\n1 UP\r\n1 LEFT\r\n1 DOWN\r\n1 DOWN\r\n1 LEFT\r\n1 UP\r\n1 UP\r\n1 LEFT\r\n1 DOWN\r\n1 DOWN\r\n1 RIGHT\r\n1 DOWN\r\n1 LEFT\r\n1 TEACH\r\n1 DOWN\r\n1 RIGHT\r\n1 UP\r\n1 UP\r\n1 UP\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 DOWN\r\n1 DOWN\r\n1 UP\r\n1 RIGHT\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 TEACH\r\n4 YELL\r\n1 RIGHT\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 DOWN\r\n1 LEFT\r\n1 YELL\r\n1 YELL\r\n1 LEFT\r\n1 LEFT\r\n1 LEFT\r\n2 LEFT\r\n2 DOWN\r\n2 RIGHT\r\n2 UP\r\n2 UP\r\n2 LEFT\r\n2 LEFT\r\n2 LEFT\r\n2 DOWN\r\n2 DOWN\r\n2 DOWN\r\n2 RIGHT\r\n2 RIGHT\r\n2 RIGHT\r\n2 RIGHT\r\n2 UP \r\n2 UP\r\n2 UP\r\n2 LEFT\r\n2 LEFT\r\n2 DOWN\r\n2 RIGHT\r\n2 YELL\r\n3 YELL\r\n1 YELL\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 YELL\r\n4 DOWN\r\n4 TEACH\r\n4 DOWN\r\n4 DOWN\r\n4 DOWN\r\n4 DOWN\r\n4 DOWN\r\n2 RIGHT\r\n6 LEFT\r\n6 DOWN\r\n6 RIGHT\r\n6 UP\r\n6 UP\r\n6 LEFT\r\n6 DOWN\r\n6 RIGHT\r\n6 YELL\r\n4 YELL\r\n2 YELL"
  },
  {
    "id": "407",
    "title": "MoonScript",
    "description": "",
    "url": "",
    "language_short": "moonscript",
    "code": "print 'hello world'"
  },
  {
    "id": "408",
    "title": "morsecode",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ".... . .-.. .-.. ---   .-- --- .-. .-.. -.."
  },
  {
    "id": "409",
    "title": "mouse",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "\"Hello, World\"\r\n'! !'\r\n$"
  },
  {
    "id": "410",
    "title": "move",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "alert 'Hello World'"
  },
  {
    "id": "411",
    "title": "mozart",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "functor\r\nimport\r\n    Application\r\n    System\r\ndefine\r\n    {System.showInfo 'Hello World!'}\r\n    {Application.exit 0} \r\nend"
  },
  {
    "id": "412",
    "title": "MSG",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "main 'passon stdout 'Hello, world!' '"
  },
  {
    "id": "413",
    "title": "MSM",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "!dlrow ',olleH............"
  },
  {
    "id": "414",
    "title": "muf",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": ": main\r\n    me @ \"Hello World\" notify\r\n;"
  },
  {
    "id": "415",
    "title": "mumps",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": " w \"Hello World!\",!"
  },
  {
    "id": "416",
    "title": "Muriel",
    "description": "",
    "url": "",
    "language_short": "abnf",
    "code": ".\"Hello, World!\";"
  },
  {
    "id": "417",
    "title": "mushcode",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "say Hello World."
  },
  {
    "id": "418",
    "title": "myrddin",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "use std\r\n \r\nconst main = {\r\n    std.put(\"Hello world!\\n\")\r\n}"
  },
  {
    "id": "419",
    "title": "mysql",
    "description": "",
    "url": "",
    "language_short": "sql",
    "code": "SELECT 'Hello World!';"
  },
  {
    "id": "420",
    "title": "Myth",
    "description": "",
    "url": "",
    "language_short": "josn",
    "code": "{\"_\":\"Hello, world!\"}"
  },
  {
    "id": "421",
    "title": "Mathematica",
    "description": "",
    "url": "",
    "language_short": "mathematica",
    "code": "Print[\"Hello world\"]"
  },
  {
    "id": "422",
    "title": "naz",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "9a8m1o\r\n9a9a9a2a1o\r\n7a2o\r\n3a1o\r\n3d7a1o\r\n9s3s1o\r\n8a2m7a1o\r\n9a9a6a1o\r\n3a1o\r\n6s1o\r\n8s1o\r\n3d1o"
  },
  {
    "id": "423",
    "title": "neko",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "$print(\"hello world\\n\");"
  },
  {
    "id": "424",
    "title": "nemerle",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "class Hello\r\n{\r\n    static Main () : void\r\n    {\r\n        System.Console.WriteLine (\"Hello world!\");\r\n    }\r\n}"
  },
  {
    "id": "425",
    "title": "newtonscript",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "baseview :=\r\n{viewBounds: {left: -3, top: 71, right: 138, bottom: 137},\r\n    viewFlags: 581,\r\n    declareSelf: 'base,\r\n    _proto: protoFloatNGo,\r\n    debug: \"baseview\"\r\n};\r\n \r\ntextview := * child of baseview *\r\n{text: \"Hello World!\",\r\n    viewBounds: {left: 33, top: 24, right: 113, bottom: 46},\r\n    viewFlags: 579,\r\n    _proto: protoStaticText,\r\n    debug: \"textview\"\r\n};"
  },
  {
    "id": "426",
    "title": "nice",
    "description": "",
    "url": "",
    "language_short": "clike",
    "code": "void main(String[] args){ \r\n    println(\"hello world\"); \r\n}"
  },
  {
    "id": "427",
    "title": "Nim",
    "description": "",
    "url": "",
    "language_short": "nim",
    "code": "echo(\"hello world\")"
  },
  {
    "id": "428",
    "title": "nit",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": "print \"Hello World\"\r\n"
  },
  {
    "id": "429",
    "title": "No Literals, Gotos Only, Final Destination!",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\\,1\r\n1+1,2\r\n2+1,3\r\n3+1,4\r\n4+1,5\r\n5+1,6\r\n6+2,8\r\n \r\n8+1,9\r\n9+1,A\r\nA+1,B\r\nB+2,D\r\n \r\nD+1,E\r\nE+1,F\r\nF+1,G\r\nG+10\r\n0,0\r\n \r\n0,0\r\n5D\r\n5D\r\n15,b\r\n55\r\n5G\r\n26\r\n60\r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+4B\r\n0:D9*0+18\r\n \r\n3F\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+1D\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+56\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+5G\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+1E\r\n0:D9*0+11,a\r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+a+1,a\r\n \r\n \r\n0:D9*0+b+1,b\r\n \r\n \r\n0:D9*0+5D"
  },
  {
    "id": "430",
    "title": "nodejs",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "#!\/usr\/bin\/env node\r\n \r\nconsole.log('Hello world!');"
  },
  {
    "id": "431",
    "title": "NOR",
    "description": "",
    "url": "",
    "language_short": "arduino",
    "code": "1\r\n0 REM store the H in line values\r\n    10 NOR 0, 1\r\n    20 NOR 0, 0\r\n    30 NOR 0, 1\r\n    40 NOR 0, 1\r\n    50 NOR 0, 0\r\n    60 NOR 0, 1\r\n    70 NOR 0, 1\r\n    80 NOR 0, 1\r\n90 REM print it all out\r\n    100 OUT #10:0\r\n    110 OUT #20:0\r\n    120 OUT #30:0\r\n    130 OUT #40:0\r\n    140 OUT #50:0\r\n    150 OUT #60:0\r\n    160 OUT #70:0\r\n    170 OUT #80:0\r\n    175 OLN\r\n180 REM Change to little e\r\n    190 NOR #30:0, 0\r\n    200 NOR #50:0, 0\r\n    210 NOR #60:0, 0\r\n    230 NOR #80:0, 0\r\n240 REM Output with replaced values\r\n    250 OUT #10:0\r\n    260 OUT #20:0\r\n    270 OUT #190:0\r\n    280 OUT #40:0\r\n    290 OUT #200:0\r\n    300 OUT #210:0\r\n    310 OUT #70:0\r\n    320 OUT #230:0\r\n    325 OLN\r\n330 REM Change to little l\r\n    340 NOR #200:0, 0\r\n    350 NOR #230:0, 0\r\n    360 REM Output little l twice\r\n    370 OUT #10:0\r\n    380 OUT #20:0\r\n    390 OUT #190:0\r\n    400 OUT #40:0\r\n    410 OUT #340:0\r\n    420 OUT #210:0\r\n    430 OUT #70:0\r\n    440 OUT #350:0\r\n    445 OLN\r\n    450 OUT #10:0\r\n    460 OUT #20:0\r\n    470 OUT #190:0\r\n    480 OUT #40:0\r\n    490 OUT #340:0\r\n    500 OUT #210:0\r\n    510 OUT #70:0\r\n    520 OUT #350:0\r\n    525 OLN\r\n530 REM Change to little o\r\n    540 NOR #70:0, 0\r\n    550 NOR #350:0, 0\r\n560 REM Output little o\r\n    570 OUT #10:0\r\n    580 OUT #20:0\r\n    590 OUT #190:0\r\n    600 OUT #40:0\r\n    610 OUT #340:0\r\n    620 OUT #210:0\r\n    630 OUT #540:0\r\n    640 OUT #550:0\r\n    645 OLN\r\n650 REM Pause at end\r\n    660 INP in0"
  },
  {
    "id": "432",
    "title": "novice",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "a\r\na-Hello, world!_*\r\nHello, world!_*"
  },
  {
    "id": "433",
    "title": "Nqubl",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"!dlrow ,olleH\"ex"
  },
  {
    "id": "434",
    "title": "nu",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "(puts \"Hello World\")\r\n"
  },
  {
    "id": "435",
    "title": "Numberix",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "A0000159006CA9006C590057A9006F590064A90021000000000000000000000000000000000000\r\n59004809006559006F09002059007209006CFF0000"
  },
  {
    "id": "436",
    "title": "nxc",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "task main()\r\n{\r\n    TextOut(0, LCD_LINE1, \"Hello world!\");\r\n}"
  },
  {
    "id": "437",
    "title": "oberon 2",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\nIMPORT Out;\r\nBEGIN\r\n    Out.String( \"Hello World\" );\r\n    Out.Ln;\r\nEND HelloWorld."
  },
  {
    "id": "438",
    "title": "oberon",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\n \r\nIMPORT Out;\r\n \r\nBEGIN\r\n    Out.Open;\r\n    Out.String('Hello World');\r\nEND HelloWorld."
  },
  {
    "id": "439",
    "title": "obix",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "system.console.write_line ( \"Hello, world!\" )"
  },
  {
    "id": "440",
    "title": "obj",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "stdout println:'Hello World!'."
  },
  {
    "id": "441",
    "title": "Objective C",
    "description": "",
    "url": "",
    "language_short": "objectivec",
    "code": "\/*\r\n    Build on OS X: \r\n    clang -framework Foundation -fobjc-arc objc.m -o objc\r\n \r\n    Build on Linux with GNUstep:\r\n    clang `gnustep-config --objc-flags` `gnustep-config --base-libs` -fobjc-nonfragile-abi -fobjc-arc objc.m -o objc\r\n*\/\r\n \r\n#import <Foundation\/Foundation.h>\r\n \r\nint main(void)\r\n{\r\n    NSLog(@\"Hello World\");\r\n}"
  },
  {
    "id": "442",
    "title": "objective j",
    "description": "",
    "url": "",
    "language_short": "objectivec",
    "code": "document.write(\"Hello, World!\");"
  },
  {
    "id": "443",
    "title": "ObjectStar",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "CALL ENDMSG('HELLO WORLD');"
  },
  {
    "id": "444",
    "title": "OCaml",
    "description": "",
    "url": "",
    "language_short": "ocaml",
    "code": "print_string \"Hello World\\n\""
  },
  {
    "id": "445",
    "title": "octave",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "#Hello World in Octave (http:\/\/www.octave.org\/)\r\nprintf(\"Hello World\\n\");"
  },
  {
    "id": "446",
    "title": "omgrofl",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "lol iz 72\r\nrofl lol\r\nlol iz 101\r\nrofl lol\r\nlol iz 108\r\nrofl lol\r\nrofl lol\r\nlool iz 111\r\nrofl lool\r\nloool iz 44\r\nrofl loool\r\nloool iz 32\r\nrofl loool\r\nloool iz 87\r\nrofl loool\r\nrofl lool\r\nlool iz 114\r\nrofl lool\r\nrofl lol\r\nlol iz 100\r\nrofl lol\r\nlol iz 33\r\nrofl lol"
  },
  {
    "id": "447",
    "title": "ooc",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "main: func {\r\n    \"Hello World\" println()\r\n}"
  },
  {
    "id": "448",
    "title": "Ook (Ook!)",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.\r\nOok! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?\r\nOok! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook.\r\nOok. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.\r\nOok? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.\r\nOok! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!\r\nOok! Ook. Ook. Ook? Ook. Ook? Ook. Ook. Ook! Ook."
  },
  {
    "id": "449",
    "title": "OOLANG",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, World!.println;"
  },
  {
    "id": "450",
    "title": "opa",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "jlog(\"Hello world\")"
  },
  {
    "id": "451",
    "title": "OpenLaszlo",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "<canvas>\r\n    <text>Hello World!<\/text>\r\n<\/canvas>"
  },
  {
    "id": "452",
    "title": "Oracle SQL",
    "description": "",
    "url": "",
    "language_short": "sql",
    "code": "SELECT 'Hello World!' FROM DUAL;"
  },
  {
    "id": "453",
    "title": "Orc",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "{- HelloWorld.orc -- Orc program HelloWorld\r\n    -\r\n    - $Id$\r\n    -\r\n    - Created by xbony2 on Nov 8, 2014 8:30:25 PM\r\n    - Licensed under public domain.\r\n-}\r\nPrintln(\"Hello World!\") >>\r\nstop"
  },
  {
    "id": "454",
    "title": "ORK",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "When this program starts:\r\nThere is a scribe called Writer.\r\nWriter is to write \"Hello, world!\""
  },
  {
    "id": "455",
    "title": "Ouroboros",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World!\"ooooooooooooo1("
  },
  {
    "id": "456",
    "title": "OZ",
    "description": "",
    "url": "",
    "language_short": "json",
    "code": "{Show 'Hello World'}"
  },
  {
    "id": "457",
    "title": "P0pCrn",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "_P    _0    _p    _!\r\n@o    #o    $o    st\r\np_    p_    p_    r_\r\nTh    ms    P0    op\r\nis    g_    pC \r\nis    op    rn\r\nwh    P0    =_\r\nat    pC    He\r\nco    rn    ll\r\nmm          o_\r\nen          wo\r\nts          rl\r\nlo          d!\r\nok\r\nli \r\nke \r\nin\r\nP0\r\npC\r\nrn\r\n!\r\n \r\nOutputs \"Hello, world!\""
  },
  {
    "id": "458",
    "title": "Packlang",
    "description": "",
    "url": "",
    "language_short": "json",
    "code": "Package : IO {\r\n    Integer main {\r\n        charPut(72);\r\n        charPut(101);\r\n        charPut(108);\r\n        charPut(108);\r\n        charPut(111);\r\n        charPut(44);\r\n        charPut(32);\r\n        charPut(87);\r\n        charPut(111);\r\n        charPut(114);\r\n        charPut(108);\r\n        charPut(100);\r\n        charPut(33);\r\n        charPut(13);\r\n        charPut(10);\r\n        0;\r\n    }\r\n} helloWorld;"
  },
  {
    "id": "459",
    "title": "Paintfuck",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "*s*s*s*s*enn*enn*s*s*s*s*ee*n*n*n*n*e*e*ssw\r\n*ss*e*ee*e*e*wwn*n*n*n*eeee*s*s*s*s*e*e*een\r\n*n*n*en*es*s*s*sw*eee*sw*wwwwwn[ww]seess*s*\r\ns*s*se*e*n*n*n*n*ee*s*s*s*sw*eeee*wn*n*n*ne\r\n*es*s*s*ees*n*n*n*n*e*es*ws*es*s*ee*n*n*n*n\r\n*[s]ne*e*ee*n*n*n*n*e*es*s*s*sw*eee*nn*n*n*"
  },
  {
    "id": "460",
    "title": "parenthetic",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Parenthetic - https:\/\/github.com\/cammckinnon\/Parenthetic\r\n \r\n((()()())(()(()()))((()(()))((())()()()()()()())((()()(()))((())()()()()()()()()())\r\n((())()()()()()()()()()()))))((()()())(()(()()()))((()(())(())())((())()()()()()()(\r\n)()()()()()()()()()()()()()()()()()()()()()()()()())))((()(()))((()(())(())())((()(\r\n()))(()(()()))((())()()()()()()())))((()(())(())())((()(()))(()(()()))((())()()()()\r\n)))((()(())(())())((()(()))(()(()()))((())()()()()()()()()()()())))((()(())(())())(\r\n(()(()))(()(()()))((())()()()()()()()()()()())))((()(())(())())((()(()))(()(()()))(\r\n(())()()()()()()()()()()()()()())))(()(()()()))((()(())(())())((()(()))(()(()()))((\r\n())()()()()()()()()()()()()()()()()()()()()()())))((()(())(())())((()(()))(()(()())\r\n)((())()()()()()()()()()()()()()())))((()(())(())())((()(()))(()(()()))((())()()()(\r\n)()()()()()()()()()()()()())))((()(())(())())((()(()))(()(()()))((())()()()()()()()\r\n()()()())))((()(())(())())((()(()))(()(()()))((())()()()))))"
  },
  {
    "id": "461",
    "title": "parser",
    "description": "",
    "url": "",
    "language_short": "parser3",
    "code": "@main[]\r\n    ^rem{Will print \"Hello, World!\" when run as CGI script}\r\n    $hello[Hello, World!]\r\n    $result[$hello]"
  },
  {
    "id": "462",
    "title": "pascal",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "program HelloWorld(output);\r\nbegin\r\n        writeln('Hello World');\r\n        readln;\r\nend."
  },
  {
    "id": "463",
    "title": "PATH",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "\\\/\\   \/\\          \/\\  \/\\ \r\n+++   ++          ++  ++\r\n+++   ++  \/++++\\  ++  ++  \/++++\\ \r\n++\\++\\++  +    +  ++  ++  +    +\r\n++   +++  +\/+++\/  ++  ++  +    +\r\n++   +++  ++      ++  ++  +    +\r\n\\\/   \\\/\\  \/\\+++   \/\\  \/\\  \/++.+\/  \r\n                            \\        \\ \r\n\/++++.+++++++++++++++++++++++++++  \/  \\ \r\n                            \/\\       -  -#\r\n                            ++       .  -.\r\n+      \/  \\++++\\  \/++++\\  ++  \/---\\-  -+\r\n+  \/\\  +  +    +  +    +  +.  -   .-  -}\r\n+  +.  +  +    +  +       +-  -   +-  \r\n.  +}  +  +    +  +       +-  -   +-  -.\r\n\\.+\/\\++\/  \\++++\/  +       +\\  \/-.+\/-  --\r\n            \\      \/    \\.{\/   \\    \/  \\\/"
  },
  {
    "id": "464",
    "title": "pawn",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#include <core>\r\n \r\nmain(){\r\n    print(\"Hello World!\");   \r\n}"
  },
  {
    "id": "465",
    "title": "pb",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "; Hello World in \"PowerBatch Plus+\" from Computing Systems Design, Inc.\r\n \r\nVariable        Msg,13,\"Hello, World!\"\r\n \r\nWrite           Msg"
  },
  {
    "id": "466",
    "title": "pbwin",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#COMPILE EXE\r\n#DIM ALL\r\n \r\nFUNCTION PBMAIN () AS LONG\r\n \r\n    MSGBOX \"Hello World\"\r\n \r\nEND FUNCTION"
  },
  {
    "id": "467",
    "title": "pebble",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#include <pebble.h>\r\n \r\nstatic Window* main_window;\r\nstatic TextLayer* text_layer, *world_layer;\r\n \r\nstatic void main_window_load(Window* window) {\r\n    Layer *window_layer = window_get_root_layer(window);\r\n    window_set_background_color(main_window, GColorBlack);\r\n    GRect bounds = layer_get_bounds(window_layer);\r\n    text_layer = text_layer_create(\r\n        GRect(0, bounds.size.h \/ 2 - 42, bounds.size.w, 120));\r\n    text_layer_set_text(text_layer, \"Hello\");\r\n    text_layer_set_background_color(text_layer, GColorClear);\r\n    text_layer_set_text_color(text_layer, GColorWhite);\r\n    text_layer_set_font(text_layer, fonts_get_system_font(FONT_KEY_BITHAM_42_BOLD));\r\n    text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\r\n \r\n    world_layer = text_layer_create(\r\n        GRect(0, bounds.size.h \/ 2, bounds.size.w, 120));\r\n    text_layer_set_background_color(world_layer, GColorClear);\r\n    text_layer_set_text(world_layer, \"World\");\r\n    text_layer_set_text_color(world_layer, GColorLightGray);\r\n    text_layer_set_font(world_layer, fonts_get_system_font(FONT_KEY_BITHAM_42_BOLD));\r\n    text_layer_set_text_alignment(world_layer, GTextAlignmentCenter);\r\n    \r\n    layer_add_child(window_layer, text_layer_get_layer(text_layer));\r\n    layer_add_child(window_layer, text_layer_get_layer(world_layer));\r\n}\r\nstatic void main_window_unload(Window* window) {\r\n    text_layer_destroy(text_layer);\r\n    text_layer_destroy(world_layer);\r\n}\r\n \r\nstatic void init() {\r\n    main_window = window_create();\r\n    window_set_window_handlers(main_window, (WindowHandlers) {\r\n        .load = main_window_load,\r\n        .unload = main_window_unload\r\n    });\r\n    window_stack_push(main_window, true);\r\n}\r\n \r\nstatic void deinit() {\r\n    window_destroy(main_window);\r\n}\r\n \r\nint main(void) {\r\n    init();\r\n    app_event_loop();\r\n    deinit();\r\n}"
  },
  {
    "id": "468",
    "title": "Perl",
    "description": "",
    "url": "",
    "language_short": "perl",
    "code": "   #!\/usr\/local\/bin\/perl -w\r\n    use CGI;                                # load CGI routines\r\n    $q = CGI->new;                          # create new CGI object\r\n    print $q->header,                       # create the HTTP header\r\n        $q->start_html('hello world'),      # start the HTML\r\n        $q->h1('hello world'),              # level 1 header\r\n        $q->end_html;                       # end the HTML\r\n \r\n# http:\/\/perldoc.perl.org\/CGI.html"
  },
  {
    "id": "469",
    "title": "Perl",
    "description": "",
    "url": "",
    "language_short": "perl",
    "code": "#!\/usr\/bin\/perl\r\nprint \"Hello World\\n\";"
  },
  {
    "id": "470",
    "title": "Perl6",
    "description": "",
    "url": "",
    "language_short": "perl",
    "code": "#!\/usr\/bin\/env perl6\r\n \r\nv6;\r\n \r\nsay \"Hello, World!\";"
  },
  {
    "id": "471",
    "title": "perseus",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "link CUI entry main\r\n \r\ninclude \"Windows.inc\"\r\ninclude \"Console.inc\"\r\n \r\nfunc main()\r\n{\r\n    Console.Init(\"Console\")\r\n    Console.Write(\"Hello World!\")\r\n}"
  },
  {
    "id": "472",
    "title": "pharo",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello World' crLog"
  },
  {
    "id": "473",
    "title": "PHL 1.0",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "main[\r\n    println(Hello world!);\r\n]"
  },
  {
    "id": "474",
    "title": "PHP",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "&lt;?php\r\n \r\n    echo 'Hello World';"
  },
  {
    "id": "475",
    "title": "Pi",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "14159265358979323842264332327250288412716939927513582397492459230721640628220899867803480534311206298214838653322233664709084463955358323172235940832848311725028410370193853110525964460294895293032196422880097562591344612147514823378178346528120090214562856642346134861345532264821332360736034914137372428700663631558417448152392396222925459170536432789259026051133013014882046252138214295194153160243205227036275959395309212613732192261379310211855807440237946274952735182575273489122743848301134912983467436444065634308652133494633522473749030217386093370277033921317659317670238267581846066440"
  },
  {
    "id": "476",
    "title": "picat",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "main =>\r\n    println('Hello World')."
  },
  {
    "id": "477",
    "title": "Pieces",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "                                                                    #      #                                                             #                        #   +                                                +                     #      #                                                                            +                              #\r\n###+++# #+++# #+++# #+++# #+++####+++###+ +###+ +###+ +###+ +###+ +## #+ +## #++###+ +###+ +###+ +###++++###+++# #+++# #+++# #++ +# #+++## #+++###+ +###+ +###+ +## #++ +###+ +###++ +###++###+++# #+++# #+++# #+++# #++ +# #+++# #+++# #+ +## #+ +## #+++##+++###+ +###+ +###+ +###+ +###+++####+++###+ +###+ +###+ +###+ +## #++ +# #+ +## #++ +####+++# #+ +## #+ +## #++ +## #++ +## #++++## #++ +## #++ +## #++ +## #++ +## #+++##+++####\r\n####+++###+++###+++###+++###+++####+++###+++###+++###+++###+++##++++###+++####+++###+++###+++###+++###++++###+++###+++###++####+++###++++###++++###+++###+++###+++####++++###+++###++++##+++###+++###+++###+++###+++###++++##++####++####++####++++#####++###+++###+++###+++###+++###+++###+++####+++###+++###+++###+++###+++####+++###++++####++++####++###+++####++++####++++####++++####++++####++++####++++####++++####++++####++###+++####\r\n###++####++####++####++####++####++++##++++##++++##++++##++++##+++####+++####+++##++++##++++##++++##++++####++####++####++###++++###++++###++++##++++##++++##++++####++++##++++##+++++##+++###++####++####++####++####++++####+++###+++###+++###++++###++###+++##++++##++++##++++##++++##+++####++++##++++##++++##++++##++++###++++###+++####++++####+++###+++####+++####++++####++++####++++####++++####++++####++++####++++#####++###++####\r\n###+++###+++###+++###+++###+++# ##+++###+++###+++###+++###+++###+++# ##+++# ##++###+++###+++###+++###+ ++###+++###+++###+++###+ ++###+ +# ##+ +###+++###+++###+++# ##+ ++###+++###+ ++###++###+++###+++###+++###+++###+ ++###+++###+++###+++# ##+++# ##+++##+++###+++###+++###+++###+++###+++# ##+++###+++###+++###+++###+++####+ ++###+++####++++## #+++###+++# ##+++####++++####++++####+ ++####++++####++++####++++####++++# ##+++##+++# ##\r\n                                #                                     #                                +                         +                                                                                      +                      #                                               #                                  +"
  },
  {
    "id": "478",
    "title": "pig",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, World!PIGHello, World!"
  },
  {
    "id": "479",
    "title": "pike",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "int main() {\r\n    write(\"Hello World!\\n\");\r\n    return 0;\r\n}"
  },
  {
    "id": "480",
    "title": "pit",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "NOT 1\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 0\r\nOFF 0"
  },
  {
    "id": "481",
    "title": "Pixiedust",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "++.*+..+...\r\n++.*++..+.+\r\n++.*++.++..\r\n++.*++.++..\r\n++.*++.++++\r\n++.*+.++..\r\n++.*+.....\r\n++.*+.+.+++\r\n++.*++.++++\r\n++.*+++..+.\r\n++.*++.++..\r\n++.*++..+..\r\n++.*+....+"
  },
  {
    "id": "482",
    "title": "Pizza Delivery",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "21d64d72d57d20d2Cd6Fd6Cd65d48`a`a``a`a`a`a`ddd`aaaa`ddddd`aaaaaa`a`."
  },
  {
    "id": "483",
    "title": "Pizza",
    "description": "",
    "url": "",
    "language_short": "C-like",
    "code": "class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "484",
    "title": "please porige hot",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "1 Please porige hot or cold Hello, World!"
  },
  {
    "id": "485",
    "title": "PLSQL",
    "description": "",
    "url": "",
    "language_short": "pgsql",
    "code": "begin\r\n    dbms_output.put_line('Hello World');\r\nend;\r\n\/"
  },
  {
    "id": "486",
    "title": "PlusOrMinus",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-++++++++++++++++++++++++++++++-++++++++-+-++++-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-++++++++++++++++++++++++++++++++++++++++++++++++++++++++-+++++++++++++++++++++++++-++++-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-"
  },
  {
    "id": "487",
    "title": "pluvo",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "say \"Hello World\""
  },
  {
    "id": "488",
    "title": "polynomial",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "f(x) = x^54 - 159014x^53 + 10832073396865804x^52 - 1722454995853645185024x^51 + 37968621468067227708480815104x^50 - 6048436172078846536054214083215360x^49 - 233513143301713321053926514246008438784x^48 + 1104146527973661777408036024159387365933056x^47 - 43427940760660892945598234855622393627754364928x^46 + 67688151387034834407174775878348678887678180065280x^45 - 2657323397811390386816113812836066598878541383083229182x^44 + 1750284245331664692109566288590033450135765470086567034878x^43 - 66462310637170791141330436813018840528707142797162918925303806x^42 + 20508128690597856095696899775729835128839331997155438812840591358x^41 - 664953230461190852547732663527306948596506725237756131883009775239166x^40 + 122666463513285791263166623998020333809641694974891527172108001766014974x^39 - 2290339732715482683303962242601771918911509803450296139283376474479399010302x^38 + 333681206682071257276765622169335904551081599525895157749622024410862633091070x^37 - 1691043431739585500544644861024318773165895772478850636648655229589277769014968318x^36 + 200506166911493278122043091578573690630915822238274576692536396738642535022472462334x^35 - 83725352136727902926962688002085013348571758969699327995437883996918505898393112412158x^34 + 8946701875864986004178866146568026543826377674206253421423964436944549188572512744636414x^33 - 1867315954108076983102178980404722124954606614812493711046674205982894462255753012843642878x^32 + 178324449027542424363250070678452160645175392388973092115587091266832446376253808451931602942x^31 - 24291196173290792733633389253959325279211027629620980716292664144523119832413508515604964835326x^30 + 2051361313277806101971735175010721323823623545474630082713676031861264604659894615015106038202366x^29 - 204163318930245521138048084566822704550940204786829904381641555821279624471050262962488593524719614x^28 + 15080204889675869155229234744312762198619136509808788153390711130175410235109921892971369525296496638x^27 - 1165291326138700992648690286268194728713765396851822888922293042494539382622438040850689893573528125438x^26 + 74455666269114358239917407447450883116392692238031999396368360323797637882097034155445411572501551513598x^25 - 4629813507931028276481888188824918837219940394558223324294713679828523226590836146159419165677988974952446x^24 + 253120956733554432342716622232076867923990466385729228242480842746036367109236814280617493808254752667992062x^23 - 12935074231319533186983493987243575840365401040882648745356769581430267310941451311894303395892917187039461374x^22 + 598913063059871613059857216856855349855419761967359474402923993393922286606408014770709182577971747789238960126x^21 - 25428508737739962276270688610109187572552304592436884974847563375647270022873810881862347086815806954727658225662x^20 + 988075525812553477917947118187566933771383003967243891018665745909746387720410669543775339912470070203350513614846x^19 - 34974169531686082193562459271768002009744513364736394486295709944600099597472906094246515756034869419547478867312638x^18 + 1131815654865400099721068380879494797357578573000978123266770256219841969966466292315303189575522430114658452248723454x^17 - 33333243367066790224431125737877702592396473433676485170092104273794119865956405762749777296265621241096608710368690174x^16 + 892264657182917347092519064707331396991280027881775637162618455630037117552251223731760472327631168507410442258403557374x^15 - 21741234185793763082357467767610152549960037645439852577400502876137832861902450604589029830428630800969050504520911552510x^14 + 477743401378059186285442060198126775727720768799991712595952810072435362385423036993075850469213290973558290972495134588926x^13 - 9542386958914044777985633223358827925072853726403754987291921876055021910330691028409034466645850263821631147144589476888574x^12 + 170373657119042581679392061752246883211700633236029252140524140404116909796029987541347425321627477671207061587436661802795006x^11 - 2749764955487032211189043031405167033392562632980461084259430732124101539469658631267867961079629561250003844967312558638759934x^10 + 39258870077914541482854786591008101985140318175933710685982149707499006040540918873742652203012485463461181385232920427641176062x^9 - 500368492335132183249328269334693420237229115021360007044007047308659390943642645302624438601527360932151837223729879018719150078x^8 + 5561474165691513638632263097940791619157749550438413179410744745968666079707113111702893276550591486283330334999248957967519711230x^7 - 53880783522289363454704538003114570363811073301017229192681339922824957590137011676197017433885609211428303922108095981658814021630x^6 + 445288801638974965851448060362741780190759776482802809915713807735430669749072211419415506701161594212827516720492113889326434091006x^5 - 3062244326655950294268213743871987045997296637980493381720979841832789151604468970705217772640392632442086114584286495283795927760894x^4 + 17350497861833021048265568696066512194485118861967772235263366259072517869159731356876777820098774378356979847504601682094845149052926x^3 - 74168531044100993077468285584515190766733489300066134507874699191841424986708021389184383419592112291881531106870872614137017669779454x^2 + 228571929129635500353661243768318776163922747079196359396738280844215833818180963007061674605170476519898831960207022976332263187283966x - 611392605770821583281602313540767104622218840531412047272348323116466189132132314542079626967192155939298340170675960484343482356334590 "
  },
  {
    "id": "489",
    "title": "Pony",
    "description": "",
    "url": "",
    "language_short": "pony",
    "code": "actor Main\r\nnew create(env: Env) =>\r\n    env.out.print(\"Hello World\")"
  },
  {
    "id": "490",
    "title": "portugol",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "algoritmo \"Hello World\"\r\n\/\/ Função: Hello World\r\n\/\/ Autor: d3z40\r\n\/\/ Data: 22\/08\/2018\r\n\/\/ Seção de Declarações\r\n \r\nvar\r\n    \r\ninicio\r\n\/\/ Seção de Comandos\r\nescreva (\"Hello World!\")\r\nfimalgoritmo"
  },
  {
    "id": "491",
    "title": "PostgreSQL",
    "description": "",
    "url": "",
    "language_short": "pgsql",
    "code": "SELECT 'Hello World' as hello_message;"
  },
  {
    "id": "492",
    "title": "postscript page",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "% run&gt; gs -q postscript_page.ps\r\n\/pt {72 div} def\r\n\/y 9 def\r\n\/textdraw {\/Courier findfont 12 pt scalefont setfont 8 pt y moveto show} def\r\n \r\n72 72 scale\r\n0 0 0 setrgbcolor\r\n \r\n(Hello world!) textdraw\r\nshowpage\r\nquit"
  },
  {
    "id": "493",
    "title": "postscript",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "% run&gt; gs -q -sDEVICE=nullpage postscript.ps\r\n(Hello world!\\n) print quit"
  },
  {
    "id": "494",
    "title": "posxml",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;display line=\"0\" column=\"0\" message=\"Hello World\" \/&gt;"
  },
  {
    "id": "495",
    "title": "potigol",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "escreva \"Hello World\""
  },
  {
    "id": "496",
    "title": "Powder",
    "description": "",
    "url": "",
    "language_short": "json",
    "code": "{\r\n    \"Output\" :\r\n    {\r\n        \"1\" : 72,\r\n        \"2\" : 101,\r\n        \"3\" : 108,\r\n        \"4\" : 108,\r\n        \"5\" : 111,\r\n        \"6\" : 44,\r\n        \"7\" : 32,\r\n        \"8\" : 119,\r\n        \"9\" : 111,\r\n        \"10\" : 114,\r\n        \"11\" : 108,\r\n        \"12\" : 100\r\n        \"13\" : 33\r\n    }\r\n}"
  },
  {
    "id": "497",
    "title": "PowerShell",
    "description": "",
    "url": "",
    "language_short": "powershell",
    "code": "'Hello World'"
  },
  {
    "id": "498",
    "title": "Prelude",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "...8+.!v...4+.1+!..v!..vvv...4+.!vvv.....9+.3-!###!..v6-!..vv..v\r\n9+(1-)^#7+(1-)..^7+!^3+!##8+(1-)^###9+1+(1-)..^^^^^3+!..^8-!#1+!"
  },
  {
    "id": "499",
    "title": "Printscript",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "print \"Hello, world!\""
  },
  {
    "id": "500",
    "title": "Processing",
    "description": "",
    "url": "",
    "language_short": "processing",
    "code": "size(128, 128);\r\nbackground(0);\r\ntextAlign(CENTER, CENTER);\r\nfill(255);\r\ntext(\"Hello World\", width \/ 2, height \/ 2);"
  },
  {
    "id": "501",
    "title": "ProgFk",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "14 11 14 11 11 14 14 11 14 11 41 14 14 11 41 41 11 14 14 11 41 41 11 14 14 11 41 41 41 41 11 41 14 14 11 11\r\n14 11 11 11 14 14 14 11 41 41 41 14 14 11 41 41 41 41 14 14 14 11 14 11 14 14 11 41 41 11 14 14 11 14 11 11\r\n14 11 11 14 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\r\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 27 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11\r\n11 17 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11\r\n11 17 11 11 11 11 F0"
  },
  {
    "id": "502",
    "title": "Prolog",
    "description": "",
    "url": "",
    "language_short": "prolog",
    "code": "helloWorld :-\r\n    write('Hello World').\r\n \r\n:- helloWorld."
  },
  {
    "id": "503",
    "title": "PUBERTY",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "It is June 12, 2018, 03:02:04 PM. Izu is in his bed, bored. His secret kinks are vore, fatfurs, inflation, growth and kitsunes. \r\nThen he spots fatfurs. Soon the following sounds become audible. \r\n \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \r\nfap fap fap fap fap fap yes fap fap fap fap fap fap fap fap fap fap \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \r\nfap fap yes yeah yeah yeah yes yes fap fap fap yes yEAH YeaH \r\nfAtfURs,hNNg yEAH fap fap inflation,hnng yeah fap fap fap fap fap \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap vore,hnng \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \r\nfap fap fap fap fap fap fap fap fap fap fap yeah fap fap fap fap fap \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap vore,hnng fap \r\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap "
  },
  {
    "id": "504",
    "title": "pure data",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "#N canvas 1029 457 450 300 10;\r\n#X obj 127 132 print;\r\n#X msg 127 86 Hello world!;\r\n#X connect 1 0 0 0;"
  },
  {
    "id": "505",
    "title": "PureBASIC",
    "description": "",
    "url": "",
    "language_short": "purebasic",
    "code": "If OpenConsole()\r\n    PrintN(\"Hello World\")\r\nEndIf"
  },
  {
    "id": "506",
    "title": "purescript",
    "description": "",
    "url": "",
    "language_short": "purebasic",
    "code": "module Main where\r\n \r\nimport Debug.Trace\r\n \r\nmain = trace \"Hello, World!\"\r\n"
  },
  {
    "id": "507",
    "title": "PureStack",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "\"Hello, World!\"\r\n!~"
  },
  {
    "id": "508",
    "title": "Purple",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "aA1aa1oA0bi0b0bb1bbbAiB0 Purple is the awesomest, so why haven't you tried it yet?\r\n!dlroW ,olleH"
  },
  {
    "id": "509",
    "title": "Pxem",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Hello.p\tPrints \"Hello\"\r\nAa.-\tMakes ' '\r\nAm.-\tMakes ','\r\n.p\tPrints \", \"\r\nworld.p\tPrints \"world\"\r\nak.-\tMakes '\\n'\r\nAb.-\tMakes '!'\r\n.p\tPrints \"!\\n\"\r\nxe"
  },
  {
    "id": "510",
    "title": "Python [sic]",
    "description": "",
    "url": "",
    "language_short": "Python",
    "code": "6&gt;^5165_~h1'&gt;&gt;6(I()5&lt;11'h?~|8"
  },
  {
    "id": "511",
    "title": "pyret",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print('Hello, World!')"
  },
  {
    "id": "512",
    "title": "Pyth",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World!"
  },
  {
    "id": "513",
    "title": "Python",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "#!\/usr\/bin\/env python\r\nprint(\"Hello World\")"
  },
  {
    "id": "514",
    "title": "Python 3",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "#!\/usr\/bin\/env python3\r\nprint \"Hello World\""
  },
  {
    "id": "515",
    "title": "Q# (QSharp)",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "namespace Quantum.HelloWorld\r\n{\r\n    operation HelloWorld () : (String)\r\n    {\r\n        body\r\n        {\r\n            return (\"Hello, World!\");\r\n        }\r\n    }\r\n}"
  },
  {
    "id": "516",
    "title": "Q",
    "description": "",
    "url": "",
    "language_short": "q",
    "code": "\"Hello World!\""
  },
  {
    "id": "517",
    "title": "Qbasic",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "PRINT \"hello world\""
  },
  {
    "id": "518",
    "title": "Qdeql",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- h\r\n---------- ---------- ---------- ---------- ----------\r\n--*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- e\r\n---------- ---------- ---------- ---------- ----------\r\n-----*\r\n \r\n-\\=\/-\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- l\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- l\r\n---------- ---------- ---------- ---------- ----**\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- o\r\n---------- ---------- ---------- ---------- -----*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- space\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ----*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- w\r\n---------- ---------- ---------- -------*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- o\r\n---------- ---------- ---------- ---------- -----*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- r\r\n---------- ---------- ---------- ---------- --*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- l\r\n---------- ---------- ---------- ---------- --------*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- d\r\n---------- ---------- ---------- ---------- ----------\r\n------*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- newline\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ------*"
  },
  {
    "id": "519",
    "title": "qore",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#!\/usr\/bin\/env qore\r\n%exec-class HelloWorld\r\nclass HelloWorld\r\n{\r\n    constructor()\r\n    {\r\n        background $.say(\"Hello World\");\r\n    }\r\n    private say($arg)\r\n    {\r\n        printf(\"%s\\n\", $arg);\r\n    }\r\n}"
  },
  {
    "id": "520",
    "title": "qu",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello, World!'\r\ntest"
  },
  {
    "id": "521",
    "title": "QuakeC",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "bprint(\"Hello World\\n\");"
  },
  {
    "id": "522",
    "title": "QuartzComposer",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\"&gt;\r\n&lt;plist version=\"1.0\"&gt;\r\n&lt;dict&gt;\r\n    &lt;key&gt;editorViewerWindow&lt;\/key&gt;\r\n    &lt;string&gt;202 156 512 430 0 0 1280 777 &lt;\/string&gt;\r\n    &lt;key&gt;frameworkVersion&lt;\/key&gt;\r\n    &lt;string&gt;334&lt;\/string&gt;\r\n    &lt;key&gt;rootPatch&lt;\/key&gt;\r\n    &lt;dict&gt;\r\n        &lt;key&gt;class&lt;\/key&gt;\r\n        &lt;string&gt;QCPatch&lt;\/string&gt;\r\n        &lt;key&gt;state&lt;\/key&gt;\r\n        &lt;dict&gt;\r\n            &lt;key&gt;connections&lt;\/key&gt;\r\n            &lt;dict&gt;\r\n                &lt;key&gt;connection_1&lt;\/key&gt;\r\n                &lt;dict&gt;\r\n                    &lt;key&gt;destinationNode&lt;\/key&gt;\r\n                    &lt;string&gt;Billboard_1&lt;\/string&gt;\r\n                    &lt;key&gt;destinationPort&lt;\/key&gt;\r\n                    &lt;string&gt;inputImage&lt;\/string&gt;\r\n                    &lt;key&gt;sourceNode&lt;\/key&gt;\r\n                    &lt;string&gt;TextImage_1&lt;\/string&gt;\r\n                    &lt;key&gt;sourcePort&lt;\/key&gt;\r\n                    &lt;string&gt;outputImage&lt;\/string&gt;\r\n                &lt;\/dict&gt;\r\n            &lt;\/dict&gt;\r\n            &lt;key&gt;nodes&lt;\/key&gt;\r\n            &lt;array&gt;\r\n                &lt;dict&gt;\r\n                    &lt;key&gt;class&lt;\/key&gt;\r\n                    &lt;string&gt;QCTextImage&lt;\/string&gt;\r\n                    &lt;key&gt;key&lt;\/key&gt;\r\n                    &lt;string&gt;TextImage_1&lt;\/string&gt;\r\n                    &lt;key&gt;state&lt;\/key&gt;\r\n                    &lt;dict&gt;\r\n                        &lt;key&gt;customInputPortStates&lt;\/key&gt;\r\n                        &lt;dict&gt;\r\n                            &lt;key&gt;inputGlyphSize&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;1.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputHeight&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputKerning&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputLeading&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputWidth&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                        &lt;\/dict&gt;\r\n                        &lt;key&gt;fontName&lt;\/key&gt;\r\n                        &lt;string&gt;LucidaGrande&lt;\/string&gt;\r\n                        &lt;key&gt;fontSize&lt;\/key&gt;\r\n                        &lt;real&gt;1.0&lt;\/real&gt;\r\n                        &lt;key&gt;horizontalAlignment&lt;\/key&gt;\r\n                        &lt;string&gt;Centered&lt;\/string&gt;\r\n                        &lt;key&gt;ivarInputPortStates&lt;\/key&gt;\r\n                        &lt;dict&gt;\r\n                            &lt;key&gt;inputFontName&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;string&gt;LucidaGrande&lt;\/string&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputGlyphSize&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;1.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputHeight&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputKerning&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputLeading&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputString&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;string&gt;Hello World!&lt;\/string&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputWidth&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                        &lt;\/dict&gt;\r\n                        &lt;key&gt;manualLayout&lt;\/key&gt;\r\n                        &lt;false\/&gt;\r\n                        &lt;key&gt;userInfo&lt;\/key&gt;\r\n                        &lt;data&gt;\r\n                        BAtzdHJlYW10eXBlZIHoA4QBQISE\r\n                        hBNOU011dGFibGVEaWN0aW9uYXJ5\r\n                        AISEDE5TRGljdGlvbmFyeQCEhAhO\r\n                        U09iamVjdACFhAFpAZKEhIQITlNT\r\n                        dHJpbmcBlYQBKwhwb3NpdGlvboaS\r\n                        hISEB05TVmFsdWUAlYQBKoSEDHtD\r\n                        R1BvaW50PWRkfZuBHwKBuQCGhg==\r\n                        &lt;\/data&gt;\r\n                        &lt;key&gt;version&lt;\/key&gt;\r\n                        &lt;integer&gt;2&lt;\/integer&gt;\r\n                        &lt;key&gt;verticalAlignment&lt;\/key&gt;\r\n                        &lt;string&gt;Centered&lt;\/string&gt;\r\n                    &lt;\/dict&gt;\r\n                &lt;\/dict&gt;\r\n                &lt;dict&gt;\r\n                    &lt;key&gt;class&lt;\/key&gt;\r\n                    &lt;string&gt;QCBillboard&lt;\/string&gt;\r\n                    &lt;key&gt;key&lt;\/key&gt;\r\n                    &lt;string&gt;Billboard_1&lt;\/string&gt;\r\n                    &lt;key&gt;state&lt;\/key&gt;\r\n                    &lt;dict&gt;\r\n                        &lt;key&gt;CIRendering&lt;\/key&gt;\r\n                        &lt;false\/&gt;\r\n                        &lt;key&gt;customInputPortStates&lt;\/key&gt;\r\n                        &lt;dict&gt;\r\n                            &lt;key&gt;inputScale&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;1.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                        &lt;\/dict&gt;\r\n                        &lt;key&gt;ivarInputPortStates&lt;\/key&gt;\r\n                        &lt;dict&gt;\r\n                            &lt;key&gt;inputBlending&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;integer&gt;1&lt;\/integer&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputColor&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;dict&gt;\r\n                                    &lt;key&gt;alpha&lt;\/key&gt;\r\n                                    &lt;real&gt;1.0&lt;\/real&gt;\r\n                                    &lt;key&gt;blue&lt;\/key&gt;\r\n                                    &lt;real&gt;0.0&lt;\/real&gt;\r\n                                    &lt;key&gt;green&lt;\/key&gt;\r\n                                    &lt;real&gt;0.0&lt;\/real&gt;\r\n                                    &lt;key&gt;red&lt;\/key&gt;\r\n                                    &lt;real&gt;0.0&lt;\/real&gt;\r\n                                &lt;\/dict&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputPixelAligned&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputRotation&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputScale&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;1.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputX&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                            &lt;key&gt;inputY&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;real&gt;0.0&lt;\/real&gt;\r\n                            &lt;\/dict&gt;\r\n                        &lt;\/dict&gt;\r\n                        &lt;key&gt;optimizedRendering&lt;\/key&gt;\r\n                        &lt;false\/&gt;\r\n                        &lt;key&gt;pixelAligned&lt;\/key&gt;\r\n                        &lt;real&gt;0.0&lt;\/real&gt;\r\n                        &lt;key&gt;sizeMode&lt;\/key&gt;\r\n                        &lt;string&gt;autoHeight&lt;\/string&gt;\r\n                        &lt;key&gt;systemInputPortStates&lt;\/key&gt;\r\n                        &lt;dict&gt;\r\n                            &lt;key&gt;_enable&lt;\/key&gt;\r\n                            &lt;dict&gt;\r\n                                &lt;key&gt;value&lt;\/key&gt;\r\n                                &lt;true\/&gt;\r\n                            &lt;\/dict&gt;\r\n                        &lt;\/dict&gt;\r\n                        &lt;key&gt;userInfo&lt;\/key&gt;\r\n                        &lt;data&gt;\r\n                        BAtzdHJlYW10eXBlZIHoA4QBQISE\r\n                        hBNOU011dGFibGVEaWN0aW9uYXJ5\r\n                        AISEDE5TRGljdGlvbmFyeQCEhAhO\r\n                        U09iamVjdACFhAFpAZKEhIQITlNT\r\n                        dHJpbmcBlYQBKwhwb3NpdGlvboaS\r\n                        hISEB05TVmFsdWUAlYQBKoSEDHtD\r\n                        R1BvaW50PWRkfZuB+gKBuQCGhg==\r\n                        &lt;\/data&gt;\r\n                        &lt;key&gt;version&lt;\/key&gt;\r\n                        &lt;integer&gt;4&lt;\/integer&gt;\r\n                    &lt;\/dict&gt;\r\n                &lt;\/dict&gt;\r\n            &lt;\/array&gt;\r\n            &lt;key&gt;userInfo&lt;\/key&gt;\r\n            &lt;data&gt;\r\n            BAtzdHJlYW10eXBlZIHoA4QBQISEhBNOU011dGFibGVEaWN0aW9u\r\n            YXJ5AISEDE5TRGljdGlvbmFyeQCEhAhOU09iamVjdACFhAFpA5KE\r\n            hIQITlNTdHJpbmcBlYQBKwp6b29tRmFjdG9yhpKEhIQITlNOdW1i\r\n            ZXIAhIQHTlNWYWx1ZQCVhAEqhIQBZpwBhpKEl5gJc2Nyb2xsaW5n\r\n            hpKEmpuEhAx7Q0dQb2ludD1kZH2dgwAAAAAATIBAgUYBhpKEl5gI\r\n            cG9zaXRpb26GkoSam56dAAWGhg==\r\n            &lt;\/data&gt;\r\n        &lt;\/dict&gt;\r\n    &lt;\/dict&gt;\r\n&lt;\/dict&gt;\r\n&lt;\/plist&gt;"
  },
  {
    "id": "523",
    "title": "qugord",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "~group hello from %2 to %14 also affect hello into \"Hello, world!\" also each hello into 0 task give 0 to 1 also at 1 join 1 and %1\r\n~publish also split hello"
  },
  {
    "id": "524",
    "title": "Quipu",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "'H\r\n'e\r\n'l\r\n'l\r\n'o\r\n' \r\n'W\r\n'o\r\n'r\r\n'l\r\n'd\r\n'!\r\n\\n\r\n\/\\"
  },
  {
    "id": "525",
    "title": "R",
    "description": "",
    "url": "",
    "language_short": "r",
    "code": "cat(\"Hello world\\n\")"
  },
  {
    "id": "526",
    "title": "racket",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "#lang racket\r\n\"Hello world\""
  },
  {
    "id": "527",
    "title": "Radixal (Radixal!!!!)",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "1 3 2 44 15 27 15 4 2 34 15 34 15 4 4 121 15 4 2 8 15\r\n4 4 45 15 121 15 3 4 56 15 1102 15 46 15 3 2 15 15 3 4 5 15"
  },
  {
    "id": "528",
    "title": "RANDo",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "rrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrndo\r\nrrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrnrrrnrnanananrnando\r\nrrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrrrrrrnaaaaaanaaaaaando\r\nrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrrrrrnrrnrndo\r\nrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrrrrrnrrnrndo\r\nond\r\nrrrrrrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrrrrrnrrrrnrnaananando\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrnrrrrrnrnrnaanananrnaanananando\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrnananrnrnando\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrnaaaaanaaaaanrnrnando\r\nrrrrrrrrrrrrrrrrrrrrnrrrrrrrnrnrnanananando"
  },
  {
    "id": "529",
    "title": "ratfor",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print *, 'Hello, world'\r\nend"
  },
  {
    "id": "530",
    "title": "React",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "\/\/simple react component that renders \"Hello World\" as an H1 tag into the body \r\n \r\nReact.render(&lt;h1&gt;Hello World&lt;\/h1&gt;, document.body);"
  },
  {
    "id": "531",
    "title": "readlink",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello world"
  },
  {
    "id": "532",
    "title": "reason",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "print_string \"hello, world\""
  },
  {
    "id": "533",
    "title": "rebol",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "print \"Hello World!\""
  },
  {
    "id": "534",
    "title": "recurse",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "    Main function\r\n$###########v######################################\r\n>..9n_3n{5Av# 'H' = 9*8       # 'w' = (2*8-1)*8-1 #\r\n#vA3_[_A7_A<# 'e' = 'H'+3*8+5 # 'o' = 'W'-8       #\r\n#>_[5n{4A_[v# 'l' = 'e'+7     # 'r' = 'o'+3       #\r\n#vS1{n2[_n4<# 'l'             # 'l' = 'r'-6       #\r\n#>n{1S_8S_3v# 'o' = 'l'+3     # 'd' = 'l'-8       #\r\n#v[_S8_S6_A<# ',' = 5*8+ 4    # '!' = 4*8+1       #\r\n#>4n{1A_[..!# ' ' = 4*8       #                   <\r\n$###########^######################################\r\n \r\n    Multiply by 8 (Bidirectional)\r\nn####v#####\r\n>{8}m#m}8{<\r\nn####^#####\r\n \r\n    Push on left stack and print (Bidirectional)\r\n_##v###\r\n>{!#!{<\r\n_##^###\r\n \r\n    Add (Bidirectional)\r\nA##v###\r\n>}a#a}<\r\nA##^###\r\n \r\n    Subtract (Bidirectional)\r\nS##v###\r\n>}s#s}<\r\nS##^###"
  },
  {
    "id": "535",
    "title": "reStructuredText",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "============\r\nHello World!\r\n============"
  },
  {
    "id": "536",
    "title": "Reversible 2D (Reversible-2D)",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": " &gt;PHOPeOPlOPlOPoOP,OP OPWOPoOPrOPlOPdOP!O¤"
  },
  {
    "id": "537",
    "title": "rexx",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "&lt;&lt;hello.rexx&gt;&gt;=\r\nSay \"Hello, World!\""
  },
  {
    "id": "538",
    "title": "Rhotor",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "x\/%\"Hello, world!\\n\""
  },
  {
    "id": "539",
    "title": "richtea",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Print(\"Hello World\");"
  },
  {
    "id": "540",
    "title": "ring",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "see \"Hello, World!\" "
  },
  {
    "id": "541",
    "title": "RinGy",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "'H.'e.'l..'o.',.'!-.'w.'o.'r.'l.'d.'!._++++++++++.q"
  },
  {
    "id": "542",
    "title": "rockstar",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Scream \"hello world!\""
  },
  {
    "id": "543",
    "title": "roco",
    "description": "",
    "url": "",
    "language_short": "processing",
    "code": "cout 72\r\ncout 101\r\ncout 108\r\ncout 108\r\ncout 111\r\ncout 44\r\ncout 32\r\ncout 87\r\ncout 111\r\ncout 114\r\ncout 108\r\ncout 100\r\ncout 33\r\nac"
  },
  {
    "id": "544",
    "title": "ROOP",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World!\"\r\nh"
  },
  {
    "id": "545",
    "title": "roy",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "console.log \"Hello world\""
  },
  {
    "id": "546",
    "title": "RPG-IV",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/free\r\n    dsply 'Hello World!';\r\n    return;\r\n\/end-free"
  },
  {
    "id": "547",
    "title": "RTFM (F^3)",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "070 08C"
  },
  {
    "id": "548",
    "title": "Rubic",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": ".ww ( +ww ) ! +ww +ww +ww +ww r -wg ! +oo b -og ! ! +wo' ! b' .wg *oo +oo ! *wg -oo b -og ! b' +oo +oo +oo ! +wg ! l' -wg ! -oo ! .wg *wg r -wg ! .oo +ww !"
  },
  {
    "id": "549",
    "title": "Ruby",
    "description": "",
    "url": "",
    "language_short": "ruby",
    "code": "#!\/usr\/bin\/env ruby\r\nputs \"Hello World\""
  },
  {
    "id": "550",
    "title": "ruota",
    "description": "",
    "url": "",
    "language_short": "ruby",
    "code": "# Ruota https:\/\/github.com\/Ruota-Lang\/Ruota\r\n \r\nprintl(\"Hello, World!\")"
  },
  {
    "id": "551",
    "title": "Rust",
    "description": "",
    "url": "",
    "language_short": "rust",
    "code": "fn main() {\r\n    println!(\"Hello, world!\");\r\n}"
  },
  {
    "id": "552",
    "title": "S-algol",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "write \"Hello World\"\r\n?"
  },
  {
    "id": "553",
    "title": "sacred",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": ")( )( (( )( (( (( () ( () ( (( () )) )( )( )( )) )( )) )( )) )( (( (( (( ) )) ) (( (( )( )( ((( (( () () () () () () ((( (( (( )( ((( ((( (( (( ((( (( () ((( )) )) ((( )) )) ((( (( (( (( ((( () () () ((( )) )) ((( )) )) )( ((( (( (( (( () ((("
  },
  {
    "id": "554",
    "title": "SADOL",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "!\",212Hello world!"
  },
  {
    "id": "555",
    "title": "sal",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "proc main()\r\n    loop\r\n        WriteLine(\"Hello, World!\")\r\n    endloop\r\nend"
  },
  {
    "id": "556",
    "title": "Salt",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello, world'"
  },
  {
    "id": "557",
    "title": "Sansism",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "           G                                  GGG\r\n>++++++++++>!+++++++!++++++++++!+++!+##!!!!##-G+G\r\nG.+++++++++++++++##!!##.++!.+++..+++++++.+!.++! G\r\nG!.+++.------.--------.!+.!.G                  GG"
  },
  {
    "id": "558",
    "title": "SAS",
    "description": "",
    "url": "",
    "language_short": "sas",
    "code": "%macro putit( string= ); \r\n    %put &string; \r\n    %mend; \r\n%putit(string=Hello World!)"
  },
  {
    "id": "559",
    "title": "Sashleyfuck",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "shhhhhhhh[ahhhhhhhhsl]ahhhhhhhheshhhhh[ahhhhhsl]ahhhhehhhhhhheehhheshhhhhhhhh[alllllllllsl]ahheshhhhhhh[ahhhhhhhsl]ahhhhhheshhhhh[ahhhhhsl]alehhhellllllelllllllleshhhhhhhh[allllllllsl]alllele"
  },
  {
    "id": "560",
    "title": "sass",
    "description": "",
    "url": "",
    "language_short": "scss",
    "code": "body::before\r\n    content: \"Hello World!\""
  },
  {
    "id": "561",
    "title": "sather",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "class MAIN is\r\n    main is \r\n        loop \r\n            #OUT + \"Hello World!\\n\" \r\n        end \r\n    end\r\nend"
  },
  {
    "id": "562",
    "title": "Scala",
    "description": "",
    "url": "",
    "language_short": "scala",
    "code": "object HelloWorld extends App {\r\n    println(\"Hello World\")\r\n}"
  },
  {
    "id": "563",
    "title": "Scheme",
    "description": "",
    "url": "",
    "language_short": "scheme",
    "code": "(display \"Hello World\") (newline)"
  },
  {
    "id": "564",
    "title": "schwift",
    "description": "",
    "url": "",
    "language_short": "swift",
    "code": "show me what you got \"Hello World\""
  },
  {
    "id": "565",
    "title": "Scilab",
    "description": "",
    "url": "",
    "language_short": "scilab",
    "code": "while(1)\r\n    printf(\"hello world\");\r\nend"
  },
  {
    "id": "566",
    "title": "Sclipting",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "丟낆녬닆묬긅덯댦롤긐뤊"
  },
  {
    "id": "567",
    "title": "SCSS",
    "description": "",
    "url": "",
    "language_short": "scss",
    "code": "body::before {\r\n    content: \"Hello World!\"\r\n}"
  },
  {
    "id": "568",
    "title": "sed",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/usr\/bin\/sed -f sed.sed\r\nc\\\r\nHello World\r\nq"
  },
  {
    "id": "569",
    "title": "Seeker",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "!chr.@chr:72.$chr.@chr:101.$chr.@chr:108.$chr.@chr:111.$chr.@chr:32.$chr.@chr:119.$chr.@chr:114.$chr.@chr:100.$chr.@chr:33.$chr._"
  },
  {
    "id": "570",
    "title": "self",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "'Hello World!' printLine"
  },
  {
    "id": "571",
    "title": "semicolon",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": ";;;;⁏;;⁏;;;\r\n⁏ ;;;;;;⁏⁏;;⁏;⁏\r\n⁏ ;;;;;;⁏⁏;⁏⁏;;\r\n;;⁏⁏ ;;⁏ ;;;;;;⁏⁏;⁏⁏⁏⁏\r\n⁏ ;;;;;;⁏;;;;;\r\n⁏ ;;;;;;⁏⁏⁏;⁏⁏⁏\r\n⁏ ;;;;;;⁏⁏;⁏⁏⁏⁏\r\n;;⁏⁏ ;;;;;;⁏⁏\r\n⁏;;⁏ ;;;;;;⁏⁏;⁏⁏;;\r\n⁏ ;;;;;;⁏⁏;;⁏;;\r\n⁏ ;;;;;;⁏;;;;⁏\r\n⁏ ;;;;;;;⁏;⁏;\r\n⁏ ;;  ;"
  },
  {
    "id": "572",
    "title": "SendStuff",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "&gt;(Add      72 &gt;(Output) \r\n&gt;(Add      29 &gt;(Output)\r\n&gt;(Add      7  &gt;(Output) \r\n              &gt;(Output)\r\n&gt;(Add      3  &gt;(Output)\r\n&gt;(Subtract 67 &gt;(Output)\r\n&gt;(Subtract 12 &gt;(Output) \r\n&gt;(Add      55 &gt;(Output)\r\n&gt;(Add      24 &gt;(Output)\r\n&gt;(Add      3  &gt;(Output)\r\n&gt;(Subtract 6  &gt;(Output)\r\n&gt;(Subtract 8  &gt;(Output)\r\n&gt;(Subtract 67 &gt;(Output)"
  },
  {
    "id": "573",
    "title": "Ser2",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "!print--:#out:--:#c:#n:\/wrote--:'@output--:#out: #c:#n:\r\n!print--:#out:eol:     \/wrote- :'@output--:#out:&0a:\r\n!wrote--:'@iopair--:#out:#c:#n:\/print--:#out:#n:\r\n!wrote- :'@iopair--:#out:#c:   \/#out:\r\n \r\n!'@run-:#: \/ print--:#:\r\n--:'H:--:'e:--:'l:--:'l:--:'o:--:',:--:' :\r\n--:'w:--:'o:--:'r:--:'l:--:'d:--:'!:eol:"
  },
  {
    "id": "574",
    "title": "shakespeare",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "The Infamous Hello World Program.\r\n \r\nRomeo, a young man with a remarkable patience.\r\nJuliet, a likewise young woman of remarkable grace.\r\nOphelia, a remarkable woman much in dispute with Hamlet.\r\nHamlet, the flatterer of Andersen Insulting A\/S.\r\n \r\n \r\n                    Act I: Hamlet's insults and flattery.\r\n \r\n                    Scene I: The insulting of Romeo.\r\n \r\n[Enter Hamlet and Romeo]\r\n \r\nHamlet:\r\n    You lying stupid fatherless big smelly half-witted coward!\r\n    You are as stupid as the difference between a handsome rich brave\r\n    hero and thyself! Speak your mind!\r\n \r\n    You are as brave as the sum of your fat little stuffed misused dusty\r\n    old rotten codpiece and a beautiful fair warm peaceful sunny summer's\r\n    day. You are as healthy as the difference between the sum of the\r\n    sweetest reddest rose and my father and yourself! Speak your mind!\r\n \r\n    You are as cowardly as the sum of yourself and the difference\r\n    between a big mighty proud kingdom and a horse. Speak your mind.\r\n \r\n    Speak your mind!\r\n \r\n[Exit Romeo]\r\n \r\n                    Scene II: The praising of Juliet.\r\n \r\n[Enter Juliet]\r\n \r\nHamlet:\r\n    Thou art as sweet as the sum of the sum of Romeo and his horse and his\r\n    black cat! Speak thy mind!\r\n \r\n[Exit Juliet]\r\n \r\n                    Scene III: The praising of Ophelia.\r\n \r\n[Enter Ophelia]\r\n \r\nHamlet:\r\n    Thou art as lovely as the product of a large rural town and my amazing\r\n    bottomless embroidered purse. Speak thy mind!\r\n \r\n    Thou art as loving as the product of the bluest clearest sweetest sky\r\n    and the sum of a squirrel and a white horse. Thou art as beautiful as\r\n    the difference between Juliet and thyself. Speak thy mind!\r\n \r\n[Exeunt Ophelia and Hamlet]\r\n \r\n \r\n                    Act II: Behind Hamlet's back.\r\n \r\n                    Scene I: Romeo and Juliet's conversation.\r\n \r\n[Enter Romeo and Juliet]\r\n \r\nRomeo:\r\n    Speak your mind. You are as worried as the sum of yourself and the\r\n    difference between my small smooth hamster and my nose. Speak your\r\n    mind!\r\n \r\nJuliet:\r\n    Speak YOUR mind! You are as bad as Hamlet! You are as small as the\r\n    difference between the square of the difference between my little pony\r\n    and your big hairy hound and the cube of your sorry little\r\n    codpiece. Speak your mind!\r\n \r\n[Exit Romeo]\r\n \r\n                    Scene II: Juliet and Ophelia's conversation.\r\n \r\n[Enter Ophelia]\r\n \r\nJuliet:\r\n    Thou art as good as the quotient between Romeo and the sum of a small\r\n    furry animal and a leech. Speak your mind!\r\n \r\nOphelia:\r\n    Thou art as disgusting as the quotient between Romeo and twice the\r\n    difference between a mistletoe and an oozing infected blister! Speak\r\n    your mind!\r\n \r\n[Exeunt]"
  },
  {
    "id": "575",
    "title": "Shell",
    "description": "",
    "url": "",
    "language_short": "shell",
    "code": "#!\/bin\/sh\r\necho \"Hello World\""
  },
  {
    "id": "576",
    "title": "shen",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "(pr \"hello world\")"
  },
  {
    "id": "577",
    "title": "SICKBAY",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "20 PRINT \"WORLD!\"\r\n10 PRINT \"HELLO, \";\r\n20 PRINT \"SAILOR\""
  },
  {
    "id": "578",
    "title": "SIL",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "print Hello, World!"
  },
  {
    "id": "579",
    "title": "simpl+",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/\/ Hello World in Crestron's SIMPL+\r\nFunction Main\r\n{\r\n    Print(\"Hello World!\\n\");\r\n}"
  },
  {
    "id": "580",
    "title": "simula",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Begin\r\n    OutText (\"Hello World!\");\r\n    Outimage;\r\nEnd;"
  },
  {
    "id": "581",
    "title": "slashes",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, world!"
  },
  {
    "id": "582",
    "title": "Slim",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "0^@^@^^@^@^^^\r\n^@^^@^^@^@^@^\r\n@^@^^@^@^^@^^\r\n^@^^@^@^^@^^\r\n^@^^@^@^^^^\r\n@^^@^@^^^^^\r\n^@^@^@^@^@^^^\r\n@^@^^@^@^^^^\r\n@^@^^^@^^@^@^\r\n^@^^@^@^^@^^\r\n^@^^@^^@^@^^\r\n^^@^@^^^^@^\r\n@^^^^@^@^@^@^"
  },
  {
    "id": "583",
    "title": "Smali",
    "description": "",
    "url": "",
    "language_short": "smali",
    "code": ".class public LHelloWorld;\r\n \r\n.super Ljava\/lang\/Object;\r\n \r\n.method public static main([Ljava\/lang\/String;)V\r\n    .registers 2\r\n \r\n    sget-object v0, Ljava\/lang\/System;->out:Ljava\/io\/PrintStream;\r\n \r\n    const-string\tv1, \"Hello World!\"\r\n \r\n    invoke-virtual {v0, v1}, Ljava\/io\/PrintStream;->println(Ljava\/lang\/String;)V\r\n \r\n    return-void\r\n.end method"
  },
  {
    "id": "584",
    "title": "small s.c.r.i.p.t.",
    "description": "",
    "url": "",
    "language_short": "small",
    "code": "Hello\\, world"
  },
  {
    "id": "585",
    "title": "Smalltalk-gnu",
    "description": "",
    "url": "",
    "language_short": "smalltalk",
    "code": "'Hello World' printNl !"
  },
  {
    "id": "586",
    "title": "Smalltalk",
    "description": "",
    "url": "",
    "language_short": "smalltalk",
    "code": "Transcript show: 'Hello, world!'."
  },
  {
    "id": "587",
    "title": "SMATINY",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "1. Swap 1 with 71.\r\n10. Output this block's position.\r\n11. Swap 11 with 150.\r\n32. Output this block's position.\r\n34. Swap 33 with 32.\r\n35. Swap 35 with 118.\r\n36. Swap 36 with 9.\r\n72. Output this block's position.\r\n101. Output this block's position.\r\n102. Swap 101 with 100.\r\n103. Swap 103 with 107.\r\n104. Swap 104 with 32.\r\n108. Output this block's position.\r\n109. Swap 109 with 107.\r\n111. Output this block's position.\r\n112. Swap 112 with 31.\r\n114. Output this block's position.\r\n115. Swap 110 with 117.\r\n116. Swap 116 with 107.\r\n117. Swap 110 with 99.\r\n119. Output this block's position.\r\n120. Swap 120 with 110."
  },
  {
    "id": "588",
    "title": "smil",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "<smil>\r\n    <head>\r\n        <layout>\r\n            <root-layout width=\"300\" height=\"160\" background-color=\"white\"\/>\r\n            <region id=\"text_region\" left=\"115\" top=\"60\"\/>\r\n        <\/layout>\r\n    <\/head>\r\n    <body>\r\n        <text src=\"data:,Hello%20World!\" region=\"text_region\">\r\n            <param name=\"fontFace\" value=\"Arial\"\/>\r\n        <\/text>\r\n    <\/body>\r\n<\/smil>"
  },
  {
    "id": "589",
    "title": "SMITH# (SMITH Sharp)",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "; SMITH# Hello World! program written by zzo38\r\n; This code uses 33 cells. The number 8 command takes the cell\r\n; number as the parameter and output it. Number 0 command stops\r\n; the program. The first cell is cell zero. Even since cell 32 is\r\n; referenced in the data section, I can reference the reference to cell\r\n; 32 for space rather than adding the space into the data section.\r\n8 25 8 26 8 27 8 27 8 28 8 23 8 29 8 28 8 30 8 27 8 31 8 32 0 72 101 108 111 87 114 100 33\r\n"
  },
  {
    "id": "590",
    "title": "SMITHb",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "12(0 *) * *\r\n\"!\" \"d\" \"l\" \"r\" \"o\" \"W\" 32 \"o\" \"l\" \"l\" \"e\" \"H\""
  },
  {
    "id": "591",
    "title": "SML (Standard ML)",
    "description": "",
    "url": "",
    "language_short": "sml",
    "code": "val () = print \"Hello World\\n\""
  },
  {
    "id": "592",
    "title": "Smurf",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, world!\"o"
  },
  {
    "id": "593",
    "title": "snowman",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "~\"Hello World!\"sPvG"
  },
  {
    "id": "594",
    "title": "SNUSP",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "   \/e+++++++++++++++++++++++++++++.\\  \r\n.\/\\\/\\\/\\  \/+++\\!&gt;.+++o.l.+++++++l\/                  #\/?\\  \r\n$H!\\++++++\\ +   \\comma.------------ .&lt;w++++++++.\\ \/?\\&lt;!\\-\/\r\n\/++++++\/ +\/\\                      \/.--------o\/ \\-\/!.++++++++++\/?\\n\r\n\/=\\++++++\\ +\\\\!=++++++\\             \\r+++.l------.d--------.&gt;+.!\\-\/\r\n\\!\\\/\\\/\\\/\\\/ \\++++++++++\/"
  },
  {
    "id": "595",
    "title": "Solidity",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "pragma solidity ^0.4.24;\r\n \r\ncontract HelloWorld {\r\n    function render () public pure returns (string) {\r\n        return 'Hello World';\r\n    }\r\n}"
  },
  {
    "id": "596",
    "title": "Sortle",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "hello := \"hello, \" \".!\" \"\" ? ~\r\nworld := \"(.....),.!\" \"\" ? \", world\" ~"
  },
  {
    "id": "597",
    "title": "soupscript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "PrintLn Hello World!\r\n \r\nBreak"
  },
  {
    "id": "598",
    "title": "Spaghetti",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "10[?100]11\r\n9[?108]10\r\n13[?101]2\r\n12[?10]0\r\n4[?111]5\r\n8[?114]9\r\n2[?108]3\r\n11[?33]12\r\n6[?87]7\r\n3[?108]4\r\n1[?48]13\r\n5[?32]6\r\n7[?111]8"
  },
  {
    "id": "599",
    "title": "SpaghettiScript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "[1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA] ---≡1 "
  },
  {
    "id": "600",
    "title": "sparql",
    "description": "",
    "url": "",
    "language_short": "c-ile",
    "code": "SELECT ?h WHERE { \r\n    VALUES ?h { \"Hello World!\" } \r\n}"
  },
  {
    "id": "601",
    "title": "Spin",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "START TO SPIN!\r\nSPIN THIS ALL! High end lock likes offering. With old red lamps dodged.\r\nSTOP SPINNING!"
  },
  {
    "id": "602",
    "title": "Spiral",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "e0v ***   *eXlv**   *lX      *2X       **oXi\r\nv * * *   *     *   * 2      * o      **   v*\r\n* * * *   * *****   * v      * v      * *iX *\r\n* * * *   * *       * ^      v *      * * w *\r\n* *** *   * *****   * v      * *      * * v *\r\n*     *   *     ^   * ^      * *      * * * *\r\n* *** *   * ****v   * v      * *      v * * *\r\n* * * *   * *       * *      * *      ^ * * *\r\n* * * *   * *****   * *****  * *****  * *** *\r\n* * * *   *     *   *     *  *     *  **   **\r\n*** ***   *******   *****v^  *******   *****\r\n \r\n \r\n*wX ***    **3Xp    *rX4..   d5*      qd**  \r\n* 3 * *   **   v^   *    ..  * *      *  ***\r\n* v * ^   * #pX v   * ..  .  * *      *    **\r\n* *** v   * # r #   * ..  .  * *      * !q* *\r\n* * * *   * # v #   * 54 ..  * *      * * * *\r\n* * * *   * # * #   *   @X   * *      * * * *\r\n* * * *   * # * #   *   v    * *      * * * *\r\n* * * *   * # * #   * * **   * *      * * * *\r\n*  *  *   * # * #   * ** **  * *      * *** *\r\n*  *  *   * #v* ^   * *** *  * *****  *    **\r\n** * **   **   *v   * * * *  *     *  *  ***\r\n    *****     *v^**    *** ***  *******  **** "
  },
  {
    "id": "603",
    "title": "Spleenmap",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "   .++  ...+...+...\r\n+++ +* .         +\r\n++      ++       +.\r\n.        +       +\r\n.+       + +..+ ++\r\n++ +++ .+ +  + +\r\n    +.. + .  + .+ .++\r\n        . ...+ +    +\r\n    ++.      +. ++.\r\n    +         . .\r\n    .+       ++ ++\r\n    +++     +   +++   ?++.\r\n        +     +     +      .\r\n        .     +   ++.     ++\r\n        ++     ++. +  +++  +\r\n        +        . +... ++ +\r\n        .+   ++. .       +..\r\n        +++ + +++\r\n        ++."
  },
  {
    "id": "604",
    "title": "Splinter",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\\H\\e\\l\\l\\o\\,\\ \\w\\o\\r\\l\\d\\!\\"
  },
  {
    "id": "605",
    "title": "spoon",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "11111111110010001011111110101111111111010111010101101101101100000110101100101001010010101111111001010001010111001010010110010100110111111111111111110010100100010101110010100000000000000000000010100000000000000000000000000010100101001010010001010"
  },
  {
    "id": "606",
    "title": "spss",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "BEGIN PROGRAM.\r\nprint \"Hello, world!\"\r\nEND PROGRAM."
  },
  {
    "id": "607",
    "title": "SQL",
    "description": "",
    "url": "",
    "language_short": "sql",
    "code": "CREATE TABLE HELLO (HELLO CHAR(12))\r\nINSERT INTO HELLO\r\n        VALUES ('HELLO WORLD!')\r\nSELECT * FROM HELLO"
  },
  {
    "id": "608",
    "title": "squirrel",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print(\"Hello World!\");"
  },
  {
    "id": "609",
    "title": "Stackint",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "98*99*54*+99*93*+99*93*+99*65*+84*99*6+99*65*+99*93*+6+99*93*+91+91+*"
  },
  {
    "id": "610",
    "title": "Stackstack",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "72 char print 101 char print 108 char dup print print 111 char print \",\" print \" \" print\r\n119 char print 111 char print 114 char print 108 char print 100  char print 33 char print"
  },
  {
    "id": "611",
    "title": "SML (Standard ML)",
    "description": "",
    "url": "",
    "language_short": "sml",
    "code": "fun hello() = print(\"Hello world!\\n\");\r\n \r\nhello()"
  },
  {
    "id": "612",
    "title": "stanza",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "println(\"Hello World\")"
  },
  {
    "id": "613",
    "title": "Stlisp",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, World!\" (print)\r\n\"Hello, World!\" print ()\r\nprint (\"Hello, World!\")\r\nprint \"Hello, World!\"()\r\n(print \"Hello, World!\")\r\n(\"Hello, World!\" print)"
  },
  {
    "id": "614",
    "title": "SYCPOL",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "COMMENT           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nTHESE  CARDS  PROVIDED\r\nIN THIS  FILE  ARE THE\r\nIMPLEMENTATION  OF THE\r\nFAMOUS  \"HELLO  WORLD\"\r\nPROGRAM   IN   SYCPOL.\r\n \r\nTHE IMPLEMENTATION  OF\r\nTHE  \"PRINT TO STREAM\"\r\nPROCEDURE     FROM THE\r\nSTANDARD LIBRARY    IS\r\nINCLUDED FOR THOSE WHO\r\nDON'T HAVE IT ALREADY.\r\n \r\nTHESE CARDS        ARE\r\nRELEASED  IN SO CALLED\r\n\"PUBLIC DOMAIN\".\r\n \r\n \r\n \r\nCOMMENT           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nA SHORT NOTE ABOUT THE\r\nFORMAT OF THE PROGRAM.\r\n \r\nALL  SPACES   INCLUDED\r\nARE MANDATORY.\r\n \r\nTHIS  PROGRAM  DOESN'T\r\nCONTAIN    THE   WHOLE\r\nSTANDARD LIBRARY, ONLY\r\nTHE  \"PRINT TO STREAM\"\r\nPROCEDURE.\r\n \r\nTHIS PROGRAM USES ONLY\r\nDATATYPES \"INTEGER 8\",\r\n\"STRING 8\" AND \"STRING\r\n16\".\r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\nDOCUMENTATION DIVISION\r\n \r\nIDENTIFIER   STRING 16\r\n\"HELLO WORLD\"\r\n \r\nAUTHOR NAME  STRING 16\r\n\"GERMANYBOY\"\r\n \r\nIMPORTS       DIVISION\r\n \r\n!PS EXTERNAL PROCEDURE\r\n \r\nMODULE NAME   STRING 8\r\n\"STDIO\"\r\n \r\nIDENTIFIER   STRING 16\r\n\"PRINT TO STREAM\"\r\n \r\nINPUT OUTPUT  DIVISION\r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nOPEN STANDARD OUTPUT\r\nCLOSE STANDARD INPUT\r\n \r\n.STDOUT  OUTPUT STREAM\r\nOUTS STANDARD OUTPUT\r\n \r\nSTORAGE       DIVISION\r\n \r\n.TEXT        STRING 16\r\n\"HELLO WORLD!\"\r\n \r\nPROGRAM CODE  DIVISION\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nMAIN         PROCEDURE\r\n(1) PROCEED TO !PS\r\n        WITH ARGUMENTS\r\n        .TEXT\r\n        .OUTPUT\r\n(2) RETURN\r\n        WITH SUCCESS\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\nDOCUMENTATION DIVISION\r\n \r\nIDENTIFIER    STRING 8\r\n\"STDIO\"\r\n \r\nAUTHOR NAME  STRING 16\r\n\"GERMANYBOY\"\r\n \r\nSTORAGE       DIVISION\r\n \r\n.ZERO        INTEGER 8\r\n0\r\n \r\nPROGRAM CODE  DIVISION\r\n \r\n \r\n \r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\n!PRINTTS     PROCEDURE\r\n \r\nIDENTIFIER   STRING 16\r\n\"PRINT TO STREAM\"\r\n \r\nPARAMETER      SECTION\r\n \r\n$TEXT        STRING 32\r\n$STREAM  OUTPUT STREAM\r\n \r\nVARIABLE       SECTION\r\n \r\n$I           INTEGER 8\r\n0\r\n \r\n$L           INTEGER 8\r\nUNDEFINED\r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nPROCEDURE CODE SECTION\r\n(1) CHANGE $L\r\n        TO THE LENGTH\r\n        OF $TEXT\r\n(2) IF $I=$L       (6)\r\n(3) SEND THE CHARACTER\r\n        AT $I\r\n        IN $TEXT\r\n        TO $STREAM\r\n(4) INCREMENT $I\r\n(5) JUMP           (2)\r\n(6) RETURN\r\n        WITH SUCCESS"
  },
  {
    "id": "615",
    "title": "Takeover",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "%% Write \"Hello, World!\"\r\nh:=72\r\n    @wy := h\r\nh+=29  @wy := h\r\nh+=7   @wy := h @wy := h\r\nh:=111 @wy := h\r\nh:=44  @wy := h @wy := @spacja\r\nh:=87  @wy := h\r\nh+=24  @wy := h\r\nh+=3   @wy := h\r\nh+=-6  @wy := h\r\nh-=8   @wy := h\r\nh:=33  @wy := h"
  },
  {
    "id": "616",
    "title": "Taktentus",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "%% Write \"Hello, World!\"\r\nh:=72\r\n    @wy := h\r\nh+=29  @wy := h\r\nh+=7   @wy := h @wy := h\r\nh:=111 @wy := h\r\nh:=44  @wy := h @wy := @spacja\r\nh:=87  @wy := h\r\nh+=24  @wy := h\r\nh+=3   @wy := h\r\nh+=-6  @wy := h\r\nh-=8   @wy := h\r\nh:=33  @wy := h"
  },
  {
    "id": "617",
    "title": "Tao Presentations",
    "description": "",
    "url": "",
    "language_short": "angelscript",
    "code": "\/\/ ****************************************************************************\r\n\/\/  hello_world.ddd                                                 Tao project\r\n\/\/ ****************************************************************************\r\n\/\/\r\n\/\/ File Description:\r\n\/\/\r\n\/\/ Original hello world with Tao Presentations.\r\n\/\/ http:\/\/www.taodyne.com\/shop\/en\/blog\/3-getting-started-with-tao-presentations\r\n\/\/\r\n\/\/\r\n\/\/\r\n\/\/ ****************************************************************************\r\n\/\/  (C) 1992-2010 Christophe de Dinechin &lt;christophe@taodyne.com&gt;\r\n\/\/  (C) 2010 Jérôme Forissier &lt;jerome@taodyne.com&gt;\r\n\/\/  (C) 2010 Catherine Burvelle &lt;cathy@taodyne.com&gt;\r\n\/\/  (C) 2010 Taodyne SAS\r\n\/\/ ****************************************************************************\r\n \r\ncolor \"white\"\r\nmilkyway 10000\r\nrotatez -23\r\nearth 400\r\nhello_world 440\r\n \r\n \r\nmilkyway R -&gt;\r\n\/\/ ----------------------------------------------------------------------------\r\n\/\/    Draw the Milky Way\r\n\/\/ ----------------------------------------------------------------------------\r\n    locally\r\n        texture_wrap true, true\r\n        texture_transform {scale 5, 5, 5}\r\n        texture \"milkyway.jpg\"\r\n        rotatey 0.02 * page_time + 100\r\n        scale 1, -1, 1\r\n        sphere R\r\n \r\n \r\nearth R -&gt;\r\n\/\/ ----------------------------------------------------------------------------\r\n\/\/    Draw Earth\r\n\/\/ ----------------------------------------------------------------------------\r\n    locally\r\n        texture \"earth.bmp\"\r\n        texture_wrap true, true\r\n        rotatey 5 * page_time + 250\r\n        sphere 0, 0, 0, R\r\n \r\n \r\nhello_world R -&gt;\r\n\/\/ ----------------------------------------------------------------------------\r\n\/\/    Draw \"hello world\" text\r\n\/\/ ----------------------------------------------------------------------------\r\n    locally\r\n        frame_texture 1900, 600,\r\n            color 1, 1, 1, 1\r\n            reset_transform\r\n            \/\/ If font Arial Unicode installed, it will be used.\r\n            \/\/ Otherwise, unifont will be used (unifont is packaged\r\n            \/\/ with Tao presentations).\r\n            font \"Arial Unicode MS\", \"unifont\", 72\r\n            move_to -800, -9, 0\r\n            text \"Hello World! or Καλημέρα κόσμε; or こんにちは 世界\"\r\n        rotatey -11 * page_time + 180\r\n        color 20% , 20% , 20% , 70%\r\n        sphere 0, 0, 0, R - 30\r\n        color 100% , 90% , 20% , 90%\r\n        sphere 0, 0, 0, R"
  },
  {
    "id": "618",
    "title": "TapeBagel",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "%% %++ %++ %++ %++ %++ %++ %++ %++ @* ## %++ %++ %++ %++ %++ @* ## %++\r\n%++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ @* @* ## %++ %++ %++ %++\r\n%++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ @* ## @* %++ %++ %++ %++\r\n%++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ @* ## %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ @* ## %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ %++ %++ %++ @* ##  %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ @* ## %++ %++ %++ %++ @* ##"
  },
  {
    "id": "619",
    "title": "tcl",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "puts \"Hello World\""
  },
  {
    "id": "620",
    "title": "tcsh",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/bin\/tcsh\r\necho \"Hello, World!\""
  },
  {
    "id": "621",
    "title": "telephone",
    "description": "",
    "url": "",
    "language_short": "yaml",
    "code": "#How to Spell HELLO WORLD on a standard telephone keypad\r\n43556 96753"
  },
  {
    "id": "622",
    "title": "TeX",
    "description": "",
    "url": "",
    "language_short": "latex",
    "code": "Hello World\r\n\\bye"
  },
  {
    "id": "623",
    "title": "The Amnesiac From Minsk",
    "description": "",
    "url": "",
    "language_short": "angelscript",
    "code": "L1\t +\t =\t -\r\n0:\t-0;\t-1;\t+58;\t@1\r\n1:\t-0;\t-2;\t+59;\t@2\r\n2:\t-0;\t-3;\t+58;\t@3\r\n3:\t-0;\t-4;\t+59;\t@2\r\n4:\t-0;\t-5;\t+58;\t@5\r\n5:\t-0;\t-6;\t+59;\t@3\r\n6:\t-0;\t-7;\t+58;\t@3\r\n7:\t-0;\t-8;\t+59;\t@2\r\n8:\t-0;\t-9;\t+58;\t@2\r\n9:\t-0;\t-10;\t+59;\t@2\r\n10:\t-0;\t-11;\t+58;\t@2\r\n11:\t-0;\t-12;\t+59;\t@3\r\n12:\t-0;\t-13;\t+58;\t@2\r\n13:\t-0;\t-14;\t+59;\t@3\r\n14:\t-0;\t-15;\t+58;\t@4\r\n15:\t-0;\t-16;\t+59;\t@3\r\n16:\t-0;\t-17;\t+58;\t@2\r\n17:\t-0;\t-18;\t+59;\t@3\r\n18:\t-0;\t-19;\t+58;\t@4\r\n19:\t-0;\t-20;\t+59;\t@3\r\n20:\t-0;\t-21;\t+58;\t@2\r\n21:\t-0;\t-22;\t+59;\t@5\r\n22:\t-0;\t-23;\t+58;\t@3\r\n23:\t-0;\t-24;\t+59;\t@2\r\n24:\t-0;\t-25;\t+58;\t@2\r\n25:\t-0;\t-26;\t+59;\t@3\r\n26:\t-0;\t-27;\t+58;\t@5\r\n27:\t-0;\t-28;\t+59;\t@2\r\n28:\t-0;\t-29;\t+58;\t@7\r\n29:\t-0;\t-30;\t+59;\t@4\r\n30:\t-0;\t-31;\t+58;\t@2\r\n31:\t-0;\t-32;\t+59;\t@4\r\n32:\t-0;\t-33;\t+58;\t@2\r\n33:\t-0;\t-34;\t+59;\t@3\r\n34:\t-0;\t-35;\t+58;\t@2\r\n35:\t-0;\t-36;\t+59;\t@5\r\n36:\t-0;\t-37;\t+58;\t@2\r\n37:\t-0;\t-38;\t+59;\t@4\r\n38:\t-0;\t-39;\t+58;\t@3\r\n39:\t-0;\t-40;\t+59;\t@2\r\n40:\t-0;\t-41;\t+58;\t@3\r\n41:\t-0;\t-42;\t+59;\t@3\r\n42:\t-0;\t-43;\t+58;\t@2\r\n43:\t-0;\t-44;\t+59;\t@3\r\n44:\t-0;\t-45;\t+58;\t@4\r\n45:\t-0;\t-46;\t+59;\t@3\r\n46:\t-0;\t-47;\t+58;\t@3\r\n47:\t-0;\t-48;\t+59;\t@2\r\n48:\t-0;\t-49;\t+58;\t@5\r\n49:\t-0;\t-50;\t+59;\t@2\r\n50:\t-0;\t-51;\t+58;\t@5\r\n51:\t-0;\t-52;\t+59;\t@2\r\n52:\t-0;\t-53;\t+58;\t@5\r\n53:\t-0;\t-54;\t+59;\t@2\r\n54:\t-0;\t-55;\t+58;\t@2\r\n55:\t-0;\t-56;\t+59;\t@2\r\n56:\t-0;\t-57;\t+58;\t@2\r\n57:\t+57;\t+57;\t+57;\t@2\r\n58:\t-0;\t-0;\t-0;\t@2\r\n59:\t-0;\t-0;\t-0;\t@2"
  },
  {
    "id": "624",
    "title": "The Waterfall Model",
    "description": "",
    "url": "",
    "language_short": "json",
    "code": "[[27425257720895005854917070679642,\r\n    17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],\r\n[  2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2],\r\n[  3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 2, 2],\r\n[  3, 2, 2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 0, 2, 2],\r\n[  3, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2],\r\n[  3, 2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 2, 0, 4, 2, 0, 2, 2],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 2],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 2, 2, 2, 2, 2],\r\n[ 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[27425257720895005854917070679641,\r\n    1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1],\r\n[  3, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 9],\r\n[  3, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1],\r\n[239, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1],\r\n[  5, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1],\r\n[  3, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 3, 1],\r\n[  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]]\r\n"
  },
  {
    "id": "625",
    "title": "TheSquare",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "v#############@\r\n+:DDDDDDDDDDD:[\r\n+#;;;;;;;;;;;#\r\n+              \r\n+ ;;\r\n+  &gt;v      ;\r\n+ JJ+      &gt;v\r\n+&gt;^-+      J-\r\n+\/--+      --\r\nv{&gt;[&lt;;;    --\r\n\/- +  &gt;v;  --\r\n+\\ +;JJ+&gt;v --\r\n++ +&gt;^++J- --\r\n++ +J++++-;--\r\n++ &gt;^&gt;^++-&gt;^-\r\n++     ++-Jv&lt;\r\n&gt;^     &gt;^-+ ;\r\n#      v-&lt;+&gt;[ ^\r\n#      - ;+\r\n#      &gt;-[^"
  },
  {
    "id": "626",
    "title": "thp",
    "description": "",
    "url": "",
    "language_short": "pgsql",
    "code": "; Hello World in \"The Harper Programmer\"\r\n; Compiled and tested with version 2.0 Sybex Edition\r\n \r\nVariable        Msg,13,\"Hello, World!\"\r\n \r\nWrite           Msg"
  },
  {
    "id": "627",
    "title": "thue",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "a::=~Hello World!\r\n::=\r\na"
  },
  {
    "id": "628",
    "title": "Thutu",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\/^=1$\/Hello, world!=n=x=9\/"
  },
  {
    "id": "629",
    "title": "tibasic",
    "description": "",
    "url": "",
    "language_short": "less",
    "code": "PROGRAM:HELLOW\r\n:ClrHome\r\n:Disp \"HELLO WORLD!\""
  },
  {
    "id": "630",
    "title": "Tier",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"hello, world!\"{#"
  },
  {
    "id": "631",
    "title": "Tiny",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ":V+++++;:XVV;:v-----;:xvv;XXXXXXX++.&lt;XXXXXXXXXX+.V\r\n++..+++.&lt;XXX++.&gt;&gt;XV.XX++++.+++.v-.x++.&lt;XXX+++.&lt;X.&gt;"
  },
  {
    "id": "632",
    "title": "tk",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "label .l -text \"Hello World!\"\r\npack .l"
  },
  {
    "id": "633",
    "title": "Toadskin",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ":V+++++;:XVV;:v-----;:xvv;XXXXXXX++.&lt;XXXXXXXXXX+.V\r\n++..+++.&lt;XXX++.&gt;&gt;XV.XX++++.+++.v-.x++.&lt;XXX+++.&lt;X.&gt;"
  },
  {
    "id": "634",
    "title": "TOGA computer (Toga Enhanced)",
    "description": "",
    "url": "",
    "language_short": "angelscript",
    "code": "       .include lib.te\r\n \r\nstart: .deref p X\r\n        .testH X print -1\r\nprint: .out X\r\n        .add p BASE p\r\n        .goto start\r\n        \r\n        p:H X:0\r\n        H:72 101; 108 108; 111 44\r\n        32 87; 111 114; 108 100\r\n        33 EOL:10; -1"
  },
  {
    "id": "635",
    "title": "Tree",
    "description": "",
    "url": "",
    "language_short": "gherkin",
    "code": " \r\n                      ^\r\n                    ^^|^^ \r\n                   ^^\\|\/^^\r\n                   H^ |\/^^^\r\n                     \\| e\r\n                      |\/\r\n                   ol~|  \r\n                     \\| \r\n                  , 32|  W\r\n                   \\\/ | \/      \r\n                    \\ |\/   \r\n                 l   \\|  \r\n                 \\  d |   o\r\n                  \\\/ !|r \/   \r\n                   \\\/ |\\\/\r\n                    \\ |\/ \r\n                     \\|\/"
  },
  {
    "id": "636",
    "title": "tri",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "inc inc psh psh psh mul sto nxt sto psh mul lst psh add \r\nsto prn nxt zro clr inc inc inc psh psh add inc nxt pop \r\ninc psh lst psh mul one psh add sto nxt sto lst lst psh \r\nnxt nxt nxt add sto prn zro inc inc inc psh inc psh add \r\nsto prn prn inc inc inc prn clr lst lst lst psh nxt psh\r\nsub nxt sto inc prn lst one clr inc psh psh inc psh mul \r\nnxt psh sub neg pop prn inc nxt psh nxt sto inc inc inc\r\ninc inc inc inc inc prn lst prn nxt dec dec dec dec dec \r\nprn dec dec dec dec dec dec prn lst dec dec dec dec dec \r\ndec dec dec dec dec dec prn lst prn lin"
  },
  {
    "id": "637",
    "title": "Trigger",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "HHHeeelll lllooo   wwwooorrrlllddd!!!"
  },
  {
    "id": "638",
    "title": "Troll Online",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "hello world!!¨ç]a\r\n↓ùp?a"
  },
  {
    "id": "639",
    "title": "trollscript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Trooloolooloolooloolooloolooloolollooooolooloolooloolooloolooooolooloolooloolooloolooloolooloooooloolooloooooloooloolooloololllllooooloololoooooololooolooloolooloolooloololoolooolooloololooooooloololooooloololooloolooloolooloolooloolooloolooloolooloololooooolooolooloololooollollollollollolllooollollollollollollollollloooooololooooolooll."
  },
  {
    "id": "640",
    "title": "TrumpScript",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "say \"Hello World\"!\r\nAmerica is great."
  },
  {
    "id": "641",
    "title": "tsql",
    "description": "",
    "url": "",
    "language_short": "sql",
    "code": "DECLARE @message varchar(128)\r\nSELECT  @message = 'Hello World!'\r\nPRINT   @message"
  },
  {
    "id": "642",
    "title": "TTCN3",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module HelloWorld\r\n{\r\n    control\r\n    {\r\n        log(\"Hello, world!\");\r\n    }\r\n}"
  },
  {
    "id": "643",
    "title": "Turing",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "put \"Hello World\""
  },
  {
    "id": "644",
    "title": "Turth machine (Turth-machine)",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Output \"Hello World\""
  },
  {
    "id": "645",
    "title": "TypeScript",
    "description": "",
    "url": "",
    "language_short": "typescript",
    "code": "console.log(\"Hello, World!\");"
  },
  {
    "id": "646",
    "title": "Ubercode",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "    Ubercode 1 class HelloWorld  \r\n \r\n    public function Main()\r\n    code\r\n        call Msgbox(\"Hello World!\", \"My first program\", \"OK\")\r\n    end function\r\n \r\n    end class"
  },
  {
    "id": "647",
    "title": "ubiquity",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "function cmd_hello_world() {\r\n    displayMessage(\"Hello, World!\");\r\n}"
  },
  {
    "id": "648",
    "title": "umajin",
    "description": "",
    "url": "",
    "language_short": "pyrhon",
    "code": "println 'Hello World!'"
  },
  {
    "id": "649",
    "title": "Underload",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "(Hello, world!)S"
  },
  {
    "id": "650",
    "title": "Unicat",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\r\n"
  },
  {
    "id": "651",
    "title": "unicomal",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "0100 PRINT \"Hello World\""
  },
  {
    "id": "652",
    "title": "unlambda",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "`r```````````.H.e.l.l.o. .w.o.r.l.di"
  },
  {
    "id": "653",
    "title": "URSL",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "v072-w0v0101-w0v0108-w0w0v0111-w0v044-w0v032-w0v0119-w0v0111-w0v0114-w0v0108-w0v0100-w0v033-w0"
  },
  {
    "id": "654",
    "title": "V",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "iHello World!"
  },
  {
    "id": "655",
    "title": "V--",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "= Hello,World!"
  },
  {
    "id": "656",
    "title": "Vala",
    "description": "",
    "url": "",
    "language_short": "vala",
    "code": "static void main (string[] args)\r\n{\r\n    stdout.printf (\"Hello World\\n\");\r\n}"
  },
  {
    "id": "657",
    "title": "var'aq",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, world!\" cha'"
  },
  {
    "id": "658",
    "title": "Varsig",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "!72)!101)!108:))!111)!44)!32)!87)!111)!114)!108)!100)!33)#"
  },
  {
    "id": "659",
    "title": "Visual Basic .NET (VB.net)",
    "description": "",
    "url": "",
    "language_short": "vbnet",
    "code": "Module HelloWorld\r\n    Sub Main()\r\n        System.Console.WriteLine(\"Hello World\")\r\n    End Sub\r\nEnd Module"
  },
  {
    "id": "660",
    "title": "velato",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "on \"2.19.64\"\r\n \r\n\\header{\r\n    title = \"Hello, World!\"\r\n}\r\n \r\n\\language \"english\"\r\n \r\n\\paper {\r\n    top-margin = 1.5\\in\r\n    left-margin = 2.0\\in\r\n    right-margin = 2.0\\in\r\n}\r\n \r\n\\score {\r\n    \\transpose c c' {\r\n    % H\r\n    <c a>4\r\n    g8(\r\n    e8 f8\r\n    gs8 d8\r\n    g8) |\r\n \r\n    % e\r\n    a8\r\n    <g e>4.\r\n    <f cs>4\r\n    c16( cs16\r\n    g8 |\r\n \r\n    % l\r\n    a8)\r\n    <g e>8\r\n    <f cs>4\r\n    <c a>4\r\n    g4( |\r\n \r\n    % l\r\n    a16 g16\r\n    e16 f8\r\n    cs8.) <c a g>2 |\r\n \r\n    % o\r\n    a8( g8 e8)\r\n    f8.\r\n    cs16( cs8 cs8 g8 |\r\n \r\n    % ,\r\n    a8 g4\r\n    e8 f8\r\n    e e\r\n    g8) |\r\n \r\n    % space\r\n    a8\r\n    <g e>4.\r\n    f8(\r\n    ds d\r\n    g8 |\r\n \r\n    % W\r\n    a8 g4\r\n    e8 f8\r\n    a8 gs8\r\n    g8) |\r\n \r\n    % o\r\n    a8( g8\r\n    e8 f8\r\n    cs8 cs8) <cs g>4 |\r\n \r\n    % r\r\n    a8( g8\r\n    e8 f8\r\n    cs8 cs8 e8. g16 |\r\n \r\n    % l\r\n    c16 a16)\r\n    <g e>8\r\n    <f cs>4\r\n    <c a>4\r\n    g4( |\r\n \r\n    % d\r\n    a8 g4\r\n    e16 f16\r\n    cs8 c8 c8\r\n    g8 |\r\n \r\n    % !\r\n    a16)\r\n    <g e>4\r\n    f16( ds16 ds16)\r\n    <g c>2 |\r\n    }\r\n    \\layout {\r\n    indent = 0\\cm\r\n    }\r\n    \\midi {\r\n    \\tempo 4 = 120\r\n    }\r\n}"
  },
  {
    "id": "661",
    "title": "verbose",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "PUT THE NUMBER LXXII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CI ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CVIII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXI ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER XLIV ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER XXXII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXIX ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXI ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXIV ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CVIII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER C ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER XXXIII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE"
  },
  {
    "id": "662",
    "title": "verbosefuck",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "~!comment!~VerboseFuck, a BrainFuck derivative focussing on verbosity. see more at &lt;http:\/\/esolangs.org\/wiki\/VerboseFuck&gt;~!uncomment!~\r\nprogram.initialize();\r\nmath.equation(program.errors.handler.activated = boolean(false));\r\nprogram.console.standardinput.openstream();\r\nprogram.console.standardoutput.openstream();\r\ndefine(defines.variable, variable(pointer));\r\nimplanttype(pointer, types.pointer(to:types.byte));\r\nmath.equation(pointer = void(0));\r\nprogram.memory.allocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\ndefine(defines.label, defines.label.createnew());\r\nconditional(block.if, boolean.inequality(deref(pointer), byte(0))) { \r\n    math.equation(pointer = pointer + void(1));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(pointer = pointer + void(1));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(pointer = pointer + void(1));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(pointer = pointer + void(1));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(pointer = pointer - void(1));\r\n    math.equation(pointer = pointer - void(1));\r\n    math.equation(pointer = pointer - void(1));\r\n    math.equation(pointer = pointer - void(1));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n};\r\nconditional(block.if, boolean.inequality(deref(pointer), byte(0))) { \r\n    program.flow.labeledjump(defines.label.last());\r\n};\r\nundefine(defines.label, defines.label.last());\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer - void(1));\r\nmath.equation(pointer = pointer - void(1));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(pointer = pointer + void(1));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.memory.deallocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);\r\nundefine(defines.variable, variable(pointer));\r\nprogram.console.standardoutput.closestream();\r\nprogram.console.standardinput.closestream();\r\nprogram.terminate();\r\n~!comment!~MANDATORY~!uncomment!~"
  },
  {
    "id": "663",
    "title": "Verilog",
    "description": "",
    "url": "",
    "language_short": "verilog",
    "code": "module main;\r\n    initial\r\n        begin\r\n        $display(\"Hello World!\");\r\n        $finish;\r\n    end\r\nendmodule"
  },
  {
    "id": "664",
    "title": "verve",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "665",
    "title": "VHDL",
    "description": "",
    "url": "",
    "language_short": "vhdl",
    "code": "use std.textio.all;\r\n \r\nentity hello_world is\r\nend hello_world;\r\n \r\narchitecture behaviour of hello_world is\r\nbegin\r\n    process\r\n    begin\r\n        write (output, String'(\"Hello world!\"));\r\n        wait;\r\n    end process;\r\nend behaviour;"
  },
  {
    "id": "666",
    "title": "vi",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "The following tab indented lines will cause a true vi with modelines\r\nactivated to infinitely loop puting \"Hello World\" in the buffer. Hit\r\n    to abort the loop and see the output. None of the vi clones\r\nsupport modelines this powerful, and modelines are diabled by default.\r\nSet the environment variable EXINIT to \"set ml\" to activate modelines.\r\n \r\n    vi: $  y a :\r\n    vi: $-1y b :\r\n    vi: @b :\r\n    put a |@b\r\n    Hello World\r\n \r\nWhitespace is largely insignificant, but these must be the last five\r\nlines in the file to work properly. Unless it is in \"vi: ... :\" or\r\n\"ex: ... :\" format, any preceeding text will be ignored."
  },
  {
    "id": "667",
    "title": "Vim Script (vim)",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "echo \"Hello World\""
  },
  {
    "id": "668",
    "title": "Visual Basic",
    "description": "",
    "url": "",
    "language_short": "vbnet",
    "code": "Module HelloWorld\r\n    Sub Main()\r\n        MsgBox(\"Hello world!\")\r\n    End Sub\r\nEnd Module"
  },
  {
    "id": "669",
    "title": "Visual Basic Scripting\t(VBScript)",
    "description": "",
    "url": "",
    "language_short": "vbscript",
    "code": "MsgBox \"Hello world!\""
  },
  {
    "id": "670",
    "title": "visualfoxpro",
    "description": "",
    "url": "",
    "language_short": "stata",
    "code": "* Message Box:\r\nMESSAGEBOX(\"Hello World\")\r\n \r\n* Print to screen:\r\n? \"Hello World\"\r\n \r\n* GUI:\r\nloForm = CREATEOBJECT(\"HiForm\")\r\nloForm.Show(1)\r\n \r\nDEFINE CLASS HiForm AS Form\r\n    AutoCenter\t= .T.\r\n    Caption\t\t= \"Hello, World\"\r\n    \r\n    ADD OBJECT lblHi as Label ;\r\n        WITH Caption = \"Hello, World!\"\r\nENDDEFINE"
  },
  {
    "id": "671",
    "title": "vms",
    "description": "",
    "url": "",
    "language_short": "gams",
    "code": "$top:\r\n$write sys$output \"Hello world!\"\r\n$wait 00:00:10\r\n$goto top"
  },
  {
    "id": "672",
    "title": "Volatile",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "~:\/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++.~:\/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:\/:::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++.~:\/::::::::::++++++++++."
  },
  {
    "id": "673",
    "title": "Vowels",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "ue\r\nyeouo\r\neuea\r\neuai\r\neuai\r\neuoa\r\neaiu\r\neaao\r\neioo\r\neuoa\r\neuou\r\neuai\r\neuee\r\neaai\r\neeoe\r\neeee\r\ny"
  },
  {
    "id": "674",
    "title": "vrml",
    "description": "",
    "url": "",
    "language_short": "nginx",
    "code": "#VRML V2.0 utf8\r\nShape {\r\n    geometry Text {\r\n        string \"Hello World\"\r\n    }\r\n}"
  },
  {
    "id": "675",
    "title": "VTL",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "1D C4 01 C4 01 C4 01 C4 01 C4 01 C4 01 C4 01 C4\r\n01 C4 01 C4 01 C4 01 C4 01 C4 01 C4 E0 48 65 6C\r\n6C 6F 2C 20 77 6F 72 6C 64 21"
  },
  {
    "id": "676",
    "title": "Vue",
    "description": "",
    "url": "",
    "language_short": "twig",
    "code": "&lt;div id=\"app\"&gt;\r\n    &lt;p&gt;{{ message }}&lt;\/p&gt;\r\n&lt;\/div&gt;\r\n&lt;script&gt;\r\n    new Vue({\r\n        el: '#app',\r\n        data: {\r\n            message: 'Hello World!'\r\n        }\r\n    })\r\n&lt;\/script&gt;"
  },
  {
    "id": "677",
    "title": "WARP",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": ")\"Hello, world!\""
  },
  {
    "id": "678",
    "title": "wheat",
    "description": "",
    "url": "",
    "language_short": "lua",
    "code": "input h\r\nif h \"H\":\r\n    output \" world!\"\r\n    output N\r\n    terminate\r\noutput \"Hello,\""
  },
  {
    "id": "679",
    "title": "whenever",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "1 print(\"Hello world!\"); "
  },
  {
    "id": "680",
    "title": "whirl",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "110001100111000111110000010001111100011000000000110000011100000110000010000\r\n011000111100000111110000011100001111100100011001110000111111100001001111100\r\n011000000000110000011000111110001000000000000000000001001111110000111111000\r\n100000000000000000000000000011111000100100000000111111000100000000000001001\r\n000011111000001110000111110010001100011000000100010000011000000000000000001\r\n100000111001111100111111000100111001111000011100010011111110000111000110000\r\n000000000000000000000000000001000100001111100000111000011111001100011100000\r\n111000000010001111100000111110001000000000111000110000000000000000000000000\r\n000000100100001111100000111000011100010000000000000100010000111110001110001\r\n111100111111000011100001100111000111000000000001111100000111000110000110110\r\n001000000000010000001111100000111000011111000000010001110000000000000000000\r\n000000000000100000011111000001100"
  },
  {
    "id": "681",
    "title": "whitespace",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "push 0   \r\npush 10  \t \t \r\npush 33  \t    \t\r\npush 100  \t\t  \t  \r\npush 108  \t\t \t\t  \r\npush 114  \t\t\t  \t \r\npush 111  \t\t \t\t\t\t\r\npush 119  \t\t\t \t\t\t\r\npush 32  \t     \r\npush 44  \t \t\t  \r\ncopy 3\t  \t\t\r\ncopy 6\t  \t\t \r\ndup \r\npush 101   \t\t  \t \t\r\npush 72  \t  \t   \r\n \r\nlabel 0   \r\noutchar\t\r\ndup   \r\npush 0    \r\nswap \r\nsub\t\t  \t\r\njn\t0\t  \r\nexit"
  },
  {
    "id": "682",
    "title": "Wierd",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": " \r\n                    H          ************************             ******************                                                 **********\r\n                    e         *                      *            *                  *                                        *       *        *\r\n                     l        *      ***             *             **                 *                                      * *      *        *\r\n                   !  o       *   ***   *          * *               *                 *                                     *  *     *        *\r\n                       ,      *  *       *        ** *               *                 *                                    *    *    *      * *\r\n                        W      * *        *      * * *               *                 *                                    *     *   *     ** *\r\n                         r      *          *    *  * *               *  ************   *                                   *       *  *    * * *\r\n                          d                 *  *   * *               * *          *    *                                  ******    *  *  *  * *\r\n                           *                 * *   * *               **         **     *                                        *    *  * *  * *\r\n                            *                 **   * *               *         *       *                                         *    *  ** *  *\r\n                             *                 *   * *                         *       *                   **  **                 *    *  * *  *\r\n                              *                    * *                        *        *                 **  ** *              **  *    *   *  *\r\n                               ********************  *                        *        *               **       *            **  ****    ***   *\r\n                                                      *              **      *         *             **         *          **                  *\r\n                                                       *           **  *     *        *            **           *        **                    *\r\n                                                        *        **     *  **        *       **  **             *      **                     *\r\n                                                         *****  *        **         *       *  **                **  **                      *\r\n                                                              **                   *        *                      **                       *\r\n                                                                                  *          *                                             *\r\n                     *************************************************************           *                *****************************\r\n                    *                                                                       *                *\r\n                    *                                          ***                         *                *\r\n                   *                   *                       *  *                       *                *\r\n                   *                   **                       *  *                     *                *\r\n                    *                  * *                      *   **                  ******           *        *********************\r\n                    *                  * *                     *      *                       *          *       *                     *\r\n                     *                 *  *                    *      *                        *        *        *                      *\r\n                     *                 *  *                   *        **                       *       *         *                      *\r\n                      *                *   *                 *           **                      *       *        *                       *\r\n                      *                *   *                *****          **                     *      *       *                         *\r\n                       *               *    **                   *           **               **   *      *     *                           *\r\n                       *               *      **                  *            **           **  *****     *    *                            *\r\n                      *                *        **                 *             *        **               *   *                            *\r\n                     *                 *          **           **   *            *      **                 *    **                          *\r\n                     *                 *            *        **  *****            **  **                    *     **                        *\r\n                      *                *            *      **                       **                      *       *                       *\r\n                      *                *             **  **                                                  *       *                      *\r\n                       **              *               **                                                    *        **                    *\r\n                         *             *                                                                      *         *                   *\r\n                          *            *  *************************************************************       *         *                   *\r\n                           **          *   *                                                           *       *         *                  *\r\n                             **        *    *                                                        *  *      *         *                  *\r\n                               *      *      *                          *************************   **   *    *          *                  *\r\n                                *     *       *                        *                       *   * *    *   *          *                  *\r\n                                 ***  *        *                       *      *               *   *  *     *   *         *  **************  *\r\n                                    * *         *                     *       **             *   *   *      *  *  **      **             *  *\r\n                                    * *          *                    *       * *  ***      *   *    *       *  **  **             *******  *\r\n                                     **           *                    *      *  **        *   *     *        *       **            *       *\r\n                                      *            *                   *      *           *   *      *         *        **           *      *\r\n                                                    *                   *     *          *   *       *          *         **          *     *\r\n                                                     *                  *     *         *   *        *           *          **        *     *\r\n                                                      *                  *    *        *   *  *      *            *           **      *     *\r\n                                                       *                 *    *        *  *   **     *             *            **    *     *\r\n                                                        *                 *   *        *  *  *  *    *              *             *   *     *\r\n                                                         *                *   *        *  * *   *    *               *            *   *     *\r\n                                                          *                *  *        *  **    *    *                *            *  *     *\r\n                                                           *               *  *        *  *     *    *                *             * *     *\r\n                                                            *             *   *        *        *    *                *              **    *\r\n                                                             *           *   *          *       *    *                *               *   *\r\n                                                              *         *   *            *     *     *                *                  *\r\n                                                               *       *   *              *****      *                *                 *\r\n                                                                *      *  *                          *                *                *\r\n                                                                 *     * *                           *                *               *\r\n                                                                  *    **                           *                 *              *\r\n                                                                   *   *                           *                 *               *\r\n                                                                    *                             *                 *                *\r\n                                                                     *****************************                 *                  *\r\n                                                                                                                  *                   *\r\n                   ***********************************************************************************************                     *\r\n                   *                                                                                                                   *\r\n                   *                                                                                                                    *\r\n                   *                                     **                                                                             *\r\n                   *                                   **  **                                                                          *\r\n                   *                                 **      *                                                                        *\r\n                   *                               **        *                                                                        *\r\n                   *                             **          *                                                                         *\r\n                   *                           **            *                                                                         *\r\n                   *                         **              *  ******                                                                *\r\n                   *     ****              **                * *    *                                               ******************\r\n                   *    *    *       **  **                  **    *                                               *\r\n                   *    *    *     **  **                    *   **                                                *\r\n                   *   *     *    *                             *                                                  *\r\n                   *  *      *    *                             *                                                 *\r\n                   * *****    *  *                             *                                                  *\r\n                   *     *     * *                             *                                                   *\r\n                   *     *      **                            *                                                    *\r\n                   *     *       *                            *                                                     *\r\n                   *     *                                   *                                                      *\r\n                   *******                                   *                                                       *\r\n                                                       **  **                                                        *\r\n                                                     **  **                                                           *    *\r\n                                           **      **                                                                 *    **\r\n                   ************************  **  **                                                                    *   * *\r\n                   *                           **                                                                      *   *  *\r\n                   *  *                                                                                               *   *    *\r\n                   *  **                                                                                             *   *    *\r\n                   *  * *                                                                                            *  *    *\r\n                   *  *  *                                                                                           * *    *\r\n                   * *   *                                                                                           **    *\r\n                   * *    **                                                                                         *    *\r\n                   * *      **                                                                                           *\r\n                   * *        **                                                                                        *\r\n                    **          **                                                                                     *\r\n                     *            **                                                     ******************************\r\n                                    **                                             **  **\r\n                                      **                                         **  **\r\n                                        **  **                                 **\r\n                                          **  *                              **\r\n                                              *                            **\r\n                                               *                         **\r\n                                               *                       **\r\n                                              *              **  **  **\r\n                                              ***************  **  **"
  },
  {
    "id": "683",
    "title": "wml",
    "description": "",
    "url": "",
    "language_short": "cs",
    "code": "#define HELLOWORLD\r\n    [message]\r\n        speaker=\"narrator\"\r\n        message=_\"Hello World\"\r\n    [\/message]\r\n#enddef"
  },
  {
    "id": "684",
    "title": "Wolfram Mathematica Language",
    "description": "",
    "url": "",
    "language_short": "mathematica",
    "code": "Print[\"Hello World\"];"
  },
  {
    "id": "685",
    "title": "Word!CPU",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "40 0A 88 02 40 01 68 02 E0 00 48 65 6C 6C 6F 2C \r\n20 77 6F 72 6C 64 21 0A 00"
  },
  {
    "id": "686",
    "title": "wren",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "IO.print(\"Hello World\")"
  },
  {
    "id": "687",
    "title": "wsh",
    "description": "",
    "url": "",
    "language_short": "vbnet",
    "code": "WScript.Echo \"Hello World\"\r\nWScript.Quit"
  },
  {
    "id": "688",
    "title": "X D (x-D)",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": ";-~~~~~&gt; ;P ;~~&gt; ;P ;------&gt; ;-P ;--&gt; ;P ;D ;~~---&gt; ;P ;| ;~~&lt; ;----&gt; ;P\r\n;~---------&gt; ;P ;--&gt; ;P ;-----&lt; ;P ;-------&lt; ;P ;D ;&gt; ;P ;~&lt; ;-------&lt; ;P"
  },
  {
    "id": "689",
    "title": "X.so",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/**\r\n* Hello world in X.so.\r\n*\/\r\n$HelloWorld (\r\n    $Main(\r\n        !Include(\"X\")\r\n        !X.Show(\"Hello, world!\\n\")\r\n    )\r\n)"
  },
  {
    "id": "690",
    "title": "X",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\/**\r\n* Hello world in X.so.\r\n*\/\r\n$HelloWorld (\r\n    $Main(\r\n        !Include(\"X\")\r\n        !X.Show(\"Hello, world!\\n\")\r\n    )\r\n)"
  },
  {
    "id": "691",
    "title": "xbase",
    "description": "",
    "url": "",
    "language_short": "vim",
    "code": "do while .t.\r\n    ? 'Hello World'\r\nenddo"
  },
  {
    "id": "692",
    "title": "xbase++",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "func Main()\r\n    Qout(\"Hello World\")\r\nreturn 1"
  },
  {
    "id": "693",
    "title": "xEec",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "h#10 h$! h$d h$l h$r h$o h$W h#32 h$, h$o h$l h$l h$e h$H &gt;o o$ p jno"
  },
  {
    "id": "694",
    "title": "XENBLN",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "š"
  },
  {
    "id": "695",
    "title": "XL (eXtensible Language)",
    "description": "",
    "url": "",
    "language_short": "xl",
    "code": "\/\/ XL programming language: http:\/\/xlr.sourceforge.net\r\nwriteln \"Hello, world\""
  },
  {
    "id": "696",
    "title": "xlogo",
    "description": "",
    "url": "",
    "language_short": "lsl",
    "code": "to HelloWorld\r\n    resetall\r\n    hideturtle\r\n    fd 20 left 180\r\n    fd 40 left 180\r\n    fd 20 right 90\r\n    fd 20 left 90\r\n    fd 20 left 180\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 right 90\r\n    fd 20 right 90\r\n    fd 10 right 90\r\n    fd 20 left 90\r\n    fd 10 left 90\r\n    fd 30 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 60 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 180\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 40 left 90\r\n    fd 20 right 90\r\n    fd 20 right 90\r\n    fd 5  left 90  \r\n    fd 5  left 90  \r\n    fd 25 left 180\r\n    fd 40 left 90\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 40 left 180\r\n    fd 40\r\nend"
  },
  {
    "id": "697",
    "title": "XML",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;text&gt;&lt;![CDATA[Hello World]]&gt;&lt;\/text&gt;"
  },
  {
    "id": "698",
    "title": "xpl0",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "code Text=12;\r\nText(0, \"Hello World\")"
  },
  {
    "id": "699",
    "title": "XQuery (XML Query)",
    "description": "",
    "url": "",
    "language_short": "xquery",
    "code": "let $hello := \"Hello, World!\"\r\nreturn $hello"
  },
  {
    "id": "700",
    "title": "XRF",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "53374 54374 54374 545F4 54374\r\n54374 54374 41345 546F4 54374\r\n54374 54374 54374 54554 54554\r\n545F4 54314 54554 54554 54554\r\n545F4 54314 54314 54554 545F4\r\n54314 33745 54664 54664 54664\r\n54664 54314 54664 54664 54664\r\n54664 54664 54664 54314 54934\r\n54554 5454F 54374 5451F 54314\r\n54554 545F4 54314 54664 54664\r\n54664 54314 54664 54664 54664\r\n54664 9151B"
  },
  {
    "id": "701",
    "title": "xslt",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"&gt;\r\n    &lt;xsl:template match=\"\/\"&gt;\r\n        &lt;xsl:text&gt;Hello World!&lt;\/xsl:text&gt;\r\n    &lt;\/xsl:template&gt;\r\n&lt;\/xsl:stylesheet&gt;"
  },
  {
    "id": "702",
    "title": "xul",
    "description": "",
    "url": "",
    "language_short": "xml",
    "code": "&lt;?xml version=\"1.0\"?&gt;\r\n&lt;window xmlns=\"http:\/\/www.mozilla.org\/keymaster\/gatekeeper\/there.is.only.xul\"&gt;\r\n    &lt;label value=\"Hello World\"\/&gt;\r\n&lt;\/window&gt;"
  },
  {
    "id": "703",
    "title": "Y",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module helloworld\r\n \r\n    define(EOF,(-1))\r\n    \r\n    import printf from \"ylib.d\"\r\n \r\n    main()\r\n        printf(\"Hello World\\n\")\r\n    end\r\nend"
  },
  {
    "id": "704",
    "title": "YAML",
    "description": "",
    "url": "",
    "language_short": "yaml",
    "code": "hello: world"
  },
  {
    "id": "705",
    "title": "yolang",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!yo!yoYo!Yo!Yo!Yo!Yo!Yo!Yo!yoYo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!yoYo!Yo!Yo!yoYo!YOYOYOYOYo?YO?yoYo!Yo!YO!yoYo!YO!Yo!Yo!Yo!Yo!Yo!Yo!Yo!YO!YO!Yo!Yo!Yo!YO!yoYo!Yo!YO!YOYOYo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!YO!yoYO!Yo!Yo!Yo!YO!Yo?Yo?Yo?Yo?Yo?Yo?YO!Yo?Yo?Yo?Yo?Yo?Yo?Yo?Yo?YO!yoYo!YO!yoYO!"
  },
  {
    "id": "706",
    "title": "yoptascript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "ксива.малява(\" Оно работает \") нах"
  },
  {
    "id": "707",
    "title": "zbd",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": " + Mr.B says \"Hello Friend\" "
  },
  {
    "id": "708",
    "title": "zepto",
    "description": "",
    "url": "",
    "language_short": "scheme",
    "code": "(write \"Hello World\")"
  },
  {
    "id": "709",
    "title": "zetaplex",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "\\      \/ #111#87\\ #        #         ######\r\n3      4 #        #        #        #      #\r\n3      1 #        #        #        #      #\r\n#      1 #        #        #        #      #\r\n1####### \/44#23#\/ #        #        #      #\r\n0      8 #        #        #        #      #\r\n0      0 1        #        #        #      #\r\n#      1 1        #        #        #      #\r\n\\      \/ \\1#108sy 101#72Os DrFe####  ######"
  },
  {
    "id": "710",
    "title": "ziim",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "    ↘↓                        \r\n        ↘                     \r\n↘          ←              ↙   \r\n            ⤢↘           ↘← ↑   \r\n    ↘←     ↑⤡↙ → ↙         ↓↙↙   \r\n        ↙  → ↗           ↙      \r\n    ↘ ←  ↙↙↘     ↙↘ ↙     ↑   ↘← \r\n↘     ↑↕ ←     ↓↓↑      ↙   ← \r\n    ↘   ←  ↙ ↕← ↗            ↔↙ \r\n        ↗↓ ↑↑  →↖  ↙←  ↓   ↘     \r\n    →    ↘ ↘   ↓↘← ↗     ↙↙      \r\n    ↙    ↖ ↘  ←↓↙←     ↑  ↑↑   \r\n↑ →         ↘  →          ↙   \r\n        ↘        ↙      ←↙       \r\n    ↘  ↕     ↔       ↙↙     ←  ↙\r\n                    ⤡           \r\n    ↑ ↘  ←↓↓↓ ↓↓↓   ↙↘        \r\n        ↘→  ↘ ↙  ←    ↑       \r\n    ↓  ↘  → ↘   ↙ ←            \r\n            →↘ ↓ ↓ ↙←   ↕←       \r\n        ↗   →↘ ↙←              \r\n            →↗  ↓  ↖←   ↖ ↕ ↔  ↙ \r\n    ↗↔ ↖  ↑↓   ↙↑ ↖←       ↑↘ \r\n    ↙       ↓ →↗→↖↑ ↑        ↑\r\n            ↗↖  ↑→ ↙↓ ↙        \r\n    ↑    ↗      ↔   ↖↙←↙↓↖      \r\n    ↗↔  ↕ ↑  →              ↙   \r\n    ↘  ←↗ →↖ ↘  ↕  ←    ↖   ⤡   \r\n    ↗         ←        ↙  ↑     \r\n        ↙       ↖   ↓↖←     ↖ ↑ \r\n    ↓ ↓↑↙        → ↘↑↓↖        \r\n    ↗ ↙←    ↑      ↙→     ↕    \r\n    →                   ↖       \r\n    ⤡    ↖       →↗ ↓     ↖    \r\n    ↑            ↑ ↗↖  "
  },
  {
    "id": "711",
    "title": "zim",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "output \"Hello World\""
  },
  {
    "id": "712",
    "title": "zimbu",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "FUNC Main() int\r\n    IO.write(\"Hello, World!\\n\")\r\n    RETURN 0\r\n}"
  },
  {
    "id": "713",
    "title": "zombie",
    "description": "",
    "url": "",
    "language_short": "sqf",
    "code": "HelloWorld is a zombie\r\nsummon\r\n    task SayHello\r\n        say \"Hello World!\"\r\n    animate\r\nanimate"
  },
  {
    "id": "714",
    "title": "zonnon",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module HelloWorld;\r\nbegin\r\n    writeln(\"Hello World\");\r\nend HelloWorld.  "
  },
  {
    "id": "715",
    "title": "zsh",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!\/bin\/zsh\r\necho \"Hello, World!\""
  },
  {
    "id": "716",
    "title": "Zucchini",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "=0,1.2.\/.0,1.\/.3.17. ` \/.4.17.`..\/.5.17.`: \/.6.17.`: \/.7.17.`::\/.8.17`: \/.9.17`  \/.10.17.:.:\/.11.17.`::\/.12.17.: `\/.13.17.`: \/.14.17.`. \/.15.17` .\/.16.17``\/.19.\r\n"
  },
  {
    "id": "717",
    "title": "!@#$%^&∗()_+ (!@$%^&*()+)",
    "description": "!@#$%^&*()_+ is another fun esoteric programming language invented by PPCG user Conor O'Brien (User:Conor O'Brien). It is a stack-based language. Its most highlighted characteristic might be that all characters are considered valid commands in the language (there are no nop commands). The title consists of all of its special commands which are used for manipulating the stack. !@#$%^&*()_+ programs resemble grawlixes (random symbols which replace vulgarism).",
    "url": "https://esolangs.org/wiki/!@$%25%5E%26*()%2B",
    "language_short": "brainfuck",
    "code": "dlroW olleH(@)"
  },
  {
    "id": "718",
    "title": "05AB1E",
    "description": "05AB1E (also typed as 05ab1e) is a stack-based programming language invented by PPCG user Adnan (also known as Adriandmen). Even though its syntax is quite simple and easy to understand, 05AB1E programs can contain over 250 unique and valid character-commands which perform 400+ different functions, making it popular for making golfed programs.",
    "url": "https://esolangs.org/wiki/05AB1E",
    "language_short": "brainfuck",
    "code": "\"Hello World"
  },
  {
    "id": "719",
    "title": "256",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Hello World"
  },
  {
    "id": "720",
    "title": "420",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "420\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it\r\nblaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it"
  },
  {
    "id": "721",
    "title": "8051 Assembly",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "LCALL INIT_LCD\r\nLCALL CLEAR_LCD\r\nMOV A,#'H'\r\nLCALL WRITE_TEXT\r\nMOV A,#'E'\r\nLCALL WRITE_TEXT\r\nMOV A,#'L'\r\nLCALL WRITE_TEXT\r\nMOV A,#'L'\r\nLCALL WRITE_TEXT\r\nMOV A,#'O'\r\nLCALL WRITE_TEXT\r\nMOV A,#' '\r\nLCALL WRITE_TEXT\r\nMOV A,#'W'\r\nLCALL WRITE_TEXT\r\nMOV A,#'O'\r\nLCALL WRITE_TEXT\r\nMOV A,#'R'\r\nLCALL WRITE_TEXT\r\nMOV A,#'L'\r\nLCALL WRITE_TEXT\r\nMOV A,#'D'\r\nLCALL WRITE_TEXT"
  },
  {
    "id": "722",
    "title": "~Afrikaans",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Vertoon \"Hallo Wêreld\" en 'n nuwe lyn.\r\nStop die program."
  },
  {
    "id": "723",
    "title": "~Bengali",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "\"হ্যালো বিশ্ব\" এবং পরবর্তী লাইনে যান\r\nপ্রোগ্রাম শেষ"
  },
  {
    "id": "724",
    "title": "~Chinese",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "向屏幕发送字符串：【你好，世界】。\r\n终止该程序。"
  },
  {
    "id": "725",
    "title": "~Dutch",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "laat zien \"Hello World\" en een nieuwe regel.\r\nstop het programma."
  },
  {
    "id": "6",
    "title": "~English",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Display \"Hello world!\" and a newline.\r\nStop the program."
  },
  {
    "id": "726",
    "title": "~Español",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Muestra \"Hello World\" y una nueva línea.\r\nDetén el programa."
  },
  {
    "id": "727",
    "title": "~Finnish",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Näytä \"Hei maailma\" ja uusi rivi.\r\nPysäytä ohjelma."
  },
  {
    "id": "728",
    "title": "~French",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Affichez « Hello World » et une nouvelle ligne.\r\nArrêtez le programme."
  },
  {
    "id": "729",
    "title": "~German",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Gib \"Hallo Welt\" und eine leere Zeile aus.\r\nBeende das Programm."
  },
  {
    "id": "730",
    "title": "~Gujarati",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"હેલો વર્લ્ડ\" અને નવી લાઇન દર્શાવો.\r\nપ્રોગ્રામ બંધ કરો."
  },
  {
    "id": "731",
    "title": "~Hausa",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Nuna \"Sannu Duniya\" da sabon layi.\r\nDakatar da shirin."
  },
  {
    "id": "732",
    "title": "~Hindi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"हैलो वर्ल्ड\" और एक न्यूलाइन प्रदर्शित करें।\r\nकार्यक्रम बंद|"
  },
  {
    "id": "733",
    "title": "~Indonesia",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Menampilkan kalimat \"Hello World\" lalu garis baru\r\nProgram selesai"
  },
  {
    "id": "734",
    "title": "~Italian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Visualizza \"Hello World\" e una nuova riga.\r\nFerma il programma"
  },
  {
    "id": "735",
    "title": "~Javanese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Nampilake ukara \"Hello World\" banjur baris anyar\r\nProgram rampung"
  },
  {
    "id": "736",
    "title": "~Kannada",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ಹಲೋ ವರ್ಲ್ಡ್\" ಮತ್ತು ಹೊಸ ಲೈನ್ ಅನ್ನು ಪ್ರದರ್ಶಿಸಿ.\r\nಕಾರ್ಯಕ್ರಮವನ್ನು ನಿಲ್ಲಿಸಿ."
  },
  {
    "id": "737",
    "title": "~Malay",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Tunjukkan perkataan \"Hello World\" dan garisan baru\r\nProgram tamat"
  },
  {
    "id": "738",
    "title": "~Malayalam",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ഹലോ വേൾഡ്\" ഉം ഒരു പുതിയ ലൈനും പ്രദർശിപ്പിക്കുക.\r\nപ്രോഗ്രാം നിർത്തുക."
  },
  {
    "id": "739",
    "title": "~Marathi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"नमस्कार जग\" शब्द आणि एक नवीन ओळ दर्शवा\r\nकार्यक्रम संपला आहे"
  },
  {
    "id": "740",
    "title": "~Mongolian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ᠳᠡᠯᠭᠡᠴᠡ ᠥᠭᠡᠳᠡ ᠦᠰᠦᠭ ᠤ᠋ᠨ ᠬᠡᠯᠬᠢᠶ᠎ᠡ ᠶᠠᠪᠤᠭᠤᠯᠤᠨ᠎ᠠ᠄ << ᠰᠠᠢᠨ ᠤ᠋ᠤ᠂ ᠶᠢᠷᠲᠢᠨᠴᠦ>>\r\nᠲᠤᠰ ᠫᠷᠥᠭᠷᠠᠮ ᠢ᠋ ᠵᠣᠭᠰᠤᠭᠠᠬᠤ"
  },
  {
    "id": "741",
    "title": "~Odia",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ହେଲୋ ୱାର୍ଲ୍ଡ\" ଏବଂ ଏକ ନୂତନ ଲାଇନ ପ୍ରଦର୍ଶନ କରନ୍ତୁ |\r\nପ୍ରୋଗ୍ରାମ୍ ବନ୍ଦ କରନ୍ତୁ |"
  },
  {
    "id": "742",
    "title": "~Polish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Wyświetl \"Hello World\" w nowej linii.\r\nZatrzymaj program."
  },
  {
    "id": "743",
    "title": "~Portuguese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Apresentar \"Olá Mundo\" e uma nova linha.\r\nParar o programa."
  },
  {
    "id": "744",
    "title": "~Punjabi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ਸ਼ਬਦ \"ਹੈਲੋ ਵਰਲਡ\" ਅਤੇ ਇਕ ਨਵੀਂ ਲਾਈਨ|\r\nਪ੍ਰੋਗਰਾਮ ਖਤਮ ਹੋ ਗਿਆ ਹੈਂ "
  },
  {
    "id": "745",
    "title": "~Sanskrit",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "प्रदर्शक \"नमस्कार विश्व\" समायोग नव पङ्क्ति\r\nविधि विराम"
  },
  {
    "id": "746",
    "title": "~Serbian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Прикажите „Hello World“ и нови ред.\r\nЗавршите програм."
  },
  {
    "id": "747",
    "title": "~Spanish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Muestre \"Hola mundo\" y una nueva línea.\r\nDetén el programa."
  },
  {
    "id": "748",
    "title": "~Swedish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Visa \"Hello World\" och en ny rad.\r\nStoppa programmet."
  },
  {
    "id": "749",
    "title": "~Tamil",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ஹலோ வேர்ல்ட்\" மற்றும் புதிய வரியைக் காட்டு\r\nதிட்டம் முடிந்தது"
  },
  {
    "id": "750",
    "title": "~Telugu",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"హల్లో వరల్డ్\" మరియు ఒక కొత్త వాక్యాన్ని ప్రదర్శించి.\r\nప్రోగ్రామ్ను ఆపండి."
  },
  {
    "id": "751",
    "title": "~Thai",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "แสดงผล \"สวัสดีชาวโลก\" แล้วขึ้นบรรทัดใหม่.\r\nสิ้นสุดโปรแกรม."
  },
  {
    "id": "752",
    "title": "~Traditional Chinese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "在熒幕上發送字符集：【你好，世界】。\r\n終止該程式。"
  },
  {
    "id": "753",
    "title": "~Turkish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"Merhaba Dünya\" yazdır ve yeni satıra geç.\r\nProgramı durdur."
  },
  {
    "id": "754",
    "title": "~Ukrainian.",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Відобразити \"Hello World\" і новий рядок.\r\nЗавершити програму."
  },
  {
    "id": "755",
    "title": "~Urdu",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ہیلو ورلڈ\" اور ایک نئی لائن دکھائیں۔\r\nپروگرام بند کرو۔"
  },
  {
    "id": "756",
    "title": "~Zulu",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Khombisa \"Sawubona Mhlaba\" nomugqa omusha.\r\nMisa uhlelo."
  },
  {
    "id": "757",
    "title": "کوردیی ناوەندی",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "پەیامی \"سڵاو جیهان!\" پیشان بدە لەگەڵ دێڕیکی نوێ.\r\nپرۆگرام بوەستێنە."
  },
  {
    "id": "758",
    "title": "なでしこ",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "「Hello World」と表示"
  },
  {
    "id": "759",
    "title": "ひまわり",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "「Hello World」と、表示。"
  },
  {
    "id": "760",
    "title": "上海话",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "嘎讪胡：“Hello World”。"
  },
  {
    "id": "761",
    "title": "文言",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "吾有一言。曰「「Hello World」」。書之。"
  },
  {
    "id": "762",
    "title": "易语言",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "调试输出(“Hello World”）"
  },
  {
    "id": "763",
    "title": "🆒",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "💬🔤👋🗺️🔤"
  },
  {
    "id": "779",
    "title": ",,,",
    "description": ",,, (pronounced 'Commata' , plural of 'Comma') is another stack-based esolang made by totallyHuman. ,,, utilizes numerous lesser-used unicode characters to manipulate the stack. Some of these characters may not be even displayed in certain devices due to technical issues, making programming in the language sometimes extremely difficult. However, ,,, is significantly useful for golfing, making extra characters useless at most cases. Its filename extension is '.,,,'. ,,, is currently a work in progress, as it lacks numerous programming statements like loops.",
    "url": "https://esolangs.org/wiki/,,,",
    "language_short": "",
    "code": "\"Hello, World!"
  },
  {
    "id": "781",
    "title": "><> (Fish)",
    "description": "><> (pronounced as if it were spelled as “fish”) is a stack-based, reflective, two-dimensional esoteric programming language. It draws inspiration from among others Befunge. It was invented by User:Harpyon in 2009.",
    "url": "https://esolangs.org/wiki/Fish",
    "language_short": "",
    "code": "$ ./fish.py --code \"2*n;\" --value 10\r\n20"
  }
]