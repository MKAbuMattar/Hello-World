[
  {
    "id": "0",
    "title": "--Unless",
    "description": "",
    "url": "https://esolangs.org/wiki/--Unless",
    "language_short": "c-like",
    "code": "Hello_world:\r\n    Hello_world_function:\r\n        R:\r\n            Helloworld.c\r\n        :R\r\n    :Hello_world_function\r\n:Hello_world\r\nR:\r\n    Hello_world:\r\n        Hello_world_function\r\n    :Hello_world\r\n:R"
  },
  {
    "id": "1",
    "title": ",,,",
    "description": ",,, (pronounced 'Commata' , plural of 'Comma') is another stack-based esolang made by totallyHuman. ,,, utilizes numerous lesser-used unicode characters to manipulate the stack. Some of these characters may not be even displayed in certain devices due to technical issues, making programming in the language sometimes extremely difficult. However, ,,, is significantly useful for golfing, making extra characters useless at most cases. Its filename extension is '.,,,'. ,,, is currently a work in progress, as it lacks numerous programming statements like loops.",
    "url": "https://esolangs.org/wiki/,,,",
    "language_short": "",
    "code": "\"Hello, World!"
  },
  {
    "id": "2",
    "title": "!@#$%^&*()_+",
    "description": "!@#$%^&*()_+ is another fun esoteric programming language invented by PPCG user Conor O'Brien (User:Conor O'Brien). It is a stack-based language. Its most highlighted characteristic might be that all characters are considered valid commands in the language (there are no nop commands). The title consists of all of its special commands which are used for manipulating the stack. !@#$$%^&*()_+ programs resemble grawlixes (random symbols which replace vulgarism).",
    "url": "https://esolangs.org/wiki/!@$%25%5E%26*()%2B",
    "language_short": "brainfuck",
    "code": "dlroW olleH(@)"
  },
  {
    "id": "3",
    "title": "?$51=",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "$? 5 Hello World 5"
  },
  {
    "id": "4",
    "title": "(?!)",
    "description": "",
    "url": "https://esolangs.org/wiki/(%3F!)",
    "language_short": "",
    "code": "???????(??????????)??!(!) ?????????????(?????)????!(!) ???????????????(?????)?!(!) ???????????????(?????)?!(!) ???????????????(?????)????!(!) ??????????(???)??!(!) ?????????????????(?????)??!(!) ???????????????(?????)????!(!) ??????????(????????)??!(!) ???????????????(?????)?!(!) ?????????????(?????)???!(!) ??????????(???)???!(!)"
  },
  {
    "id": "5",
    "title": "():;#?!",
    "description": "",
    "url": "",
    "language_short": "",
    "code": ":H:e:l:l:o: :W:o:r:l:d!"
  },
  {
    "id": "6",
    "title": "@tention!",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "A@=;AH'<;Ae'<;Al'<;Al'<;Ao'<;A '<;AW'<;Ao'<;Ar'<;Al'<;Ad'<;A!{A$>};"
  },
  {
    "id": "7",
    "title": "@text",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "@@@@@@@@+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?@@@@@@@@@@@@@@@@@@@@@@@+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  },
  {
    "id": "8",
    "title": "///",
    "description": "/// (pronounced \"slashes\") is a minimalist Turing-complete esoteric programming language, invented by Tanner Swett (User:Ihope127) in 2006 based on the \"s/foo/bar/\" notation that everybody seemed to be using in IRC. The only operation is repeated string substitution, using the syntax /pattern/replacement/. Despite its extreme simplicity – there isn't even an obvious way to create a loop – it was proved Turing-complete by Ørjan Johansen in 2009, who created an interpreter for the Turing-complete language Bitwise Cyclic Tag.",
    "url": "https://esolangs.org/wiki////",
    "language_short": "accesslog",
    "code": "/foo/Hello, world!//bar/foo/bar"
  },
  {
    "id": "9",
    "title": "`",
    "description": "` is a minimalistic esoteric language created by Iamcalledbob that was designed to have only two instructions, while being somewhat usable for computation.",
    "url": "https://esolangs.org/wiki/%60",
    "language_short": "",
    "code": "1`+72\n2`+101\n3`+108\n4`+108\n5`+44\n6`+70\n7`+119\n8`+111\n9`+114\n10`+108\n11`+100\n0`1\n0`2\n0`3\n0`4\n0`5\n0`6\n0`7\n0`8\n0`9\n0`10\n0`11"
  },
  {
    "id": "10",
    "title": "><> (Fish)",
    "description": "><> (pronounced as if it were spelled as “fish”) is a stack-based, reflective, two-dimensional esoteric programming language. It draws inspiration from among others Befunge. It was invented by User:Harpyon in 2009.",
    "url": "https://esolangs.org/wiki/Fish",
    "language_short": "",
    "code": "$$ ./fish.py --code \"2*n;\" --value 10\r\n20"
  },
  {
    "id": "11",
    "title": "~-~!",
    "description": "~-~!, or No Comment, is an esoteric programming language created by user:jfb and user:tb10 in January, 2014 based on the philosophy that everything is a number. Numbers are tildes, - is subtraction, and ! is comment syntax, so ~-~ is 0 and therefore the language is called 'No Comment'. Files containing ~-~! scripts have the extension .ncmnt.",
    "url": "https://esolangs.org/wiki/~-~!",
    "language_short": "brainfuck",
    "code": "@|H|:@|e|:@|l|:@|l|:@|o|:@|,|@| |:@|w|:@|o|:@|r|:@|l|:@|d|:@|!|:"
  },
  {
    "id": "12",
    "title": "~Afrikaans",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Vertoon \"Hallo Wêreld\" en 'n nuwe lyn.\r\nStop die program."
  },
  {
    "id": "13",
    "title": "~Bengali",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "\"হ্যালো বিশ্ব\" এবং পরবর্তী লাইনে যান\r\nপ্রোগ্রাম শেষ"
  },
  {
    "id": "14",
    "title": "~Chinese",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "向屏幕发送字符串：【你好，世界】。\r\n终止该程序。"
  },
  {
    "id": "15",
    "title": "~Czech",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Zobraz \"Ahoj Světe\" a nový řádek.\r\nZastav program."
  },
  {
    "id": "16",
    "title": "~Dutch",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "laat zien \"Hello World\" en een nieuwe regel.\r\nstop het programma."
  },
  {
    "id": "17",
    "title": "~English",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Display \"Hello world!\" and a newline.\r\nStop the program."
  },
  {
    "id": "18",
    "title": "~Español",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Muestra \"Hello World\" y una nueva línea.\r\nDetén el programa."
  },
  {
    "id": "19",
    "title": "~Finnish",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Näytä \"Hei maailma\" ja uusi rivi.\r\nPysäytä ohjelma."
  },
  {
    "id": "20",
    "title": "~French",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Affichez « Hello World » et une nouvelle ligne.\r\nArrêtez le programme."
  },
  {
    "id": "21",
    "title": "~German",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Gib \"Hallo Welt\" und eine leere Zeile aus.\r\nBeende das Programm."
  },
  {
    "id": "22",
    "title": "~Greek",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Απεικόνισε \"Γειά Κόσμε\" και μια καινούρια γραμμή.\r\nΣταμάτησε το πρόγραμμα."
  },
  {
    "id": "23",
    "title": "~Gujarati",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"હેલો વર્લ્ડ\" અને નવી લાઇન દર્શાવો.\r\nપ્રોગ્રામ બંધ કરો."
  },
  {
    "id": "24",
    "title": "~Hausa",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Nuna \"Sannu Duniya\" da sabon layi.\r\nDakatar da shirin."
  },
  {
    "id": "25",
    "title": "~Hindi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"हैलो वर्ल्ड\" और एक न्यूलाइन प्रदर्शित करें।\r\nकार्यक्रम बंद|"
  },
  {
    "id": "26",
    "title": "~Hungarian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Jelenítse meg hogy: \"Szia Világ\" és egy új sort.\r\nVége."
  },
  {
    "id": "27",
    "title": "~Indonesia",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Menampilkan kalimat \"Hello World\" lalu garis baru\r\nProgram selesai"
  },
  {
    "id": "28",
    "title": "~Italian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Visualizza \"Hello World\" e una nuova riga.\r\nFerma il programma"
  },
  {
    "id": "29",
    "title": "~Javanese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Nampilake ukara \"Hello World\" banjur baris anyar\r\nProgram rampung"
  },
  {
    "id": "30",
    "title": "~Kannada",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ಹಲೋ ವರ್ಲ್ಡ್\" ಮತ್ತು ಹೊಸ ಲೈನ್ ಅನ್ನು ಪ್ರದರ್ಶಿಸಿ.\r\nಕಾರ್ಯಕ್ರಮವನ್ನು ನಿಲ್ಲಿಸಿ."
  },
  {
    "id": "31",
    "title": "~Latin",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Ostende \"Salve Mundum\" et novam lineam.\r\nDesine propositum."
  },
  {
    "id": "32",
    "title": "~Malay",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Tunjukkan perkataan \"Hello World\" dan garisan baru\r\nProgram tamat"
  },
  {
    "id": "33",
    "title": "~Malayalam",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ഹലോ വേൾഡ്\" ഉം ഒരു പുതിയ ലൈനും പ്രദർശിപ്പിക്കുക.\r\nപ്രോഗ്രാം നിർത്തുക."
  },
  {
    "id": "34",
    "title": "~Marathi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"नमस्कार जग\" शब्द आणि एक नवीन ओळ दर्शवा\r\nकार्यक्रम संपला आहे"
  },
  {
    "id": "35",
    "title": "~Mongolian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ᠳᠡᠯᠭᠡᠴᠡ ᠥᠭᠡᠳᠡ ᠦᠰᠦᠭ ᠤ᠋ᠨ ᠬᠡᠯᠬᠢᠶ᠎ᠡ ᠶᠠᠪᠤᠭᠤᠯᠤᠨ᠎ᠠ᠄ << ᠰᠠᠢᠨ ᠤ᠋ᠤ᠂ ᠶᠢᠷᠲᠢᠨᠴᠦ>>\r\nᠲᠤᠰ ᠫᠷᠥᠭᠷᠠᠮ ᠢ᠋ ᠵᠣᠭᠰᠤᠭᠠᠬᠤ"
  },
  {
    "id": "36",
    "title": "~Odia",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ହେଲୋ ୱାର୍ଲ୍ଡ\" ଏବଂ ଏକ ନୂତନ ଲାଇନ ପ୍ରଦର୍ଶନ କରନ୍ତୁ |\r\nପ୍ରୋଗ୍ରାମ୍ ବନ୍ଦ କରନ୍ତୁ |"
  },
  {
    "id": "37",
    "title": "~Pashto",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ستړې مشې نړۍ په یوه خط کې ولیکۍ او پروګرام پریړدۍ"
  },
  {
    "id": "38",
    "title": "~Persian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "سلام دنیا\" و یک خط جدید را نمایش بده\".\r\nبرنامه را متوقف کن."
  },
  {
    "id": "39",
    "title": "~Polish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Wyświetl \"Hello World\" w nowej linii.\r\nZatrzymaj program."
  },
  {
    "id": "40",
    "title": "~Portuguese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Apresentar \"Olá Mundo\" e uma nova linha.\r\nParar o programa."
  },
  {
    "id": "41",
    "title": "~Punjabi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ਸ਼ਬਦ \"ਹੈਲੋ ਵਰਲਡ\" ਅਤੇ ਇਕ ਨਵੀਂ ਲਾਈਨ|\r\nਪ੍ਰੋਗਰਾਮ ਖਤਮ ਹੋ ਗਿਆ ਹੈਂ "
  },
  {
    "id": "42",
    "title": "~Russian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Отобразить \"Hello World\" и новую строку.\r\nЗавершить программу."
  },
  {
    "id": "43",
    "title": "~Sanskrit",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "प्रदर्शक \"नमस्कार विश्व\" समायोग नव पङ्क्ति\r\nविधि विराम"
  },
  {
    "id": "44",
    "title": "~Serbian",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Прикажите „Hello World“ и нови ред.\r\nЗавршите програм."
  },
  {
    "id": "45",
    "title": "~Sindhi",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ڏيکاريو ”هيلو ورلڊ“ ۽ هڪ نئين لائين.\r\nپروگرام بند ڪريو."
  },
  {
    "id": "46",
    "title": "~Spanish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Muestre \"Hola mundo\" y una nueva línea.\r\nDetén el programa."
  },
  {
    "id": "47",
    "title": "~Swedish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Visa \"Hello World\" och en ny rad.\r\nStoppa programmet."
  },
  {
    "id": "48",
    "title": "~Tamil",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ஹலோ வேர்ல்ட்\" மற்றும் புதிய வரியைக் காட்டு\r\nதிட்டம் முடிந்தது"
  },
  {
    "id": "49",
    "title": "~Telugu",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"హల్లో వరల్డ్\" మరియు ఒక కొత్త వాక్యాన్ని ప్రదర్శించి.\r\nప్రోగ్రామ్ను ఆపండి."
  },
  {
    "id": "50",
    "title": "~Thai",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "แสดงผล \"สวัสดีชาวโลก\" แล้วขึ้นบรรทัดใหม่.\r\nสิ้นสุดโปรแกรม."
  },
  {
    "id": "51",
    "title": "~Traditional Chinese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "在熒幕上發送字符集：【你好，世界】。\r\n終止該程式。"
  },
  {
    "id": "52",
    "title": "~Turkish",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"Merhaba Dünya\" yazdır ve yeni satıra geç.\r\nProgramı durdur."
  },
  {
    "id": "53",
    "title": "~Ukrainian.",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Відобразити \"Hello World\" і новий рядок.\r\nЗавершити програму."
  },
  {
    "id": "54",
    "title": "~Urdu",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"ہیلو ورلڈ\" اور ایک نئی لائن دکھائیں۔\r\nپروگرام بند کرو۔"
  },
  {
    "id": "55",
    "title": "~Vietnamese",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Hiển thị \"Xin Chào Thế Giới\" và thêm một dòng mới.\r\nDừng chương trình."
  },
  {
    "id": "56",
    "title": "~Xhosa",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Bonisa \"Molo weHlabathi\" kunye nomgca omtsha.\r\nMisa inkqubo."
  },
  {
    "id": "57",
    "title": "~Zulu",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Khombisa \"Sawubona Mhlaba\" nomugqa omusha.\r\nMisa uhlelo."
  },
  {
    "id": "58",
    "title": "∗",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "∗"
  },
  {
    "id": "59",
    "title": "$_$",
    "description": "$_$ (pronounced sus) is an esolang by Cortex where strings of a certain character are commands. It was named after the first two characters added, _ and $. Newlines are optional.",
    "url": "https://esolangs.org/wiki/$_$",
    "language_short": "",
    "code
  },
  {
    "id": "60",
    "title": "0(nop^)",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "1$(Hello World\r\n\")`"
  },
  {
    "id": "61",
    "title": "0587",
    "description": "0587 is a functional esolang that is made up of numeric instructions. It was created by user:InfiniteDonuts and is inspired by 0815, Unlambda, and 1337.\r\n\r\n",
    "url": "https://esolangs.org/wiki/0587",
    "language_short": "c-like",
    "code": "01040291(Hello World)"
  },
  {
    "id": "62",
    "title": "05AB1E",
    "description": "05AB1E (also typed as 05ab1e) is a stack-based programming language invented by PPCG user Adnan (also known as Adriandmen). Even though its syntax is quite simple and easy to understand, 05AB1E programs can contain over 250 unique and valid character-commands which perform 400+ different functions, making it popular for making golfed programs.",
    "url": "https://esolangs.org/wiki/05AB1E",
    "language_short": "brainfuck",
    "code": "\"Hello World"
  },
  {
    "id": "63",
    "title": "0815",
    "description": "0815 is an esoteric programming language designed and implemented between December 2012 and January 2013 by Paulo Jorente.",
    "url": "https://esolangs.org/wiki/0815",
    "language_short": "brainfuck",
    "code": "<:48:x<:65:=<:6C:$$=$$=$$$$~<:03:+\r\n$$~<:ffffffffffffffb1:+$$<:77:~$$\r\n~<:fffffffffffff8:x+$$~<:03:+$$~\r\n<:06:x-$$x<:0e:x-$$=x<:43:x-$$"
  },
  {
    "id": "64",
    "title": "1+",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "11+\"\"\"1+\"****\"; [H]\r\n111++\"\"**1+(D|/\"\\\"/^\\)1++; [e]\r\n(D)11+\"\"**++\"\";; [ll]\r\n111+++\"; [o]\r\n\"11+\"*+; [ ]\r\n\"111++\"/*\\+; [W]\r\n\\\"; [o]\r\n111+++; [r]\r\n(D)11+\"\"**++; [l]\r\n+; [d]\r\n111++\"*1+; [\\n]"
  },
  {
    "id": "65",
    "title": "123",
    "description": "123 is an esoteric programming language created by David Catt which further minimizes asdf.",
    "url": "https://esolangs.org/wiki/123",
    "language_short": "",
    "code": "222122221212112112112112112112112222122221212112112112112112122222211121121112112121122222221112112111211222222211121111211211222222211121111212222221112111121121122222221112111121222222111211111212112222222111211111222222111111222221111112222221111112222211111222222211211121111122222221121112111122222221112111112121122222221112111112222222111121121112112222222111121121122222211121111211211222222211121111212222221112112111211211222222211121121112122222112112112112111222222112112112112112"
  },
  {
    "id": "66",
    "title": "1C Enterprise",
    "description": "1С Enterprise is a development platform designed by 1C Company for the fast creation of easily customizable business automation software.",
    "url": "https://en.wikipedia.org/wiki/1C:Enterprise",
    "language_short": "1c",
    "code": "Message(\"Hello, World!\");"
  },
  {
    "id": "67",
    "title": "256",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Hello World"
  },
  {
    "id": "68",
    "title": "2B",
    "description": "2B is an esoteric programming language created by David Catt (user:David.werecat) in which memory is stored in a tape where each cell is a separate tape of bytes.",
    "url": "https://esolangs.org/wiki/2B",
    "language_short": "brainfuck",
    "code": "+0+0+0+0+0+0+0+2)+0+0+9)+7))+3)-0-0-0-0-0-0-0-9)+0+0+0+0+0+0+0+0+7)-8)+3)-6)-8)-7-0-0-0-0-0-0)"
  },
  {
    "id": "69",
    "title": "2DFuck",
    "description": "2DFuck is another multidimensional brainfuck derivative esolang invented by TheWastl (wastl in PPCG). The language, as presumed by the title, runs on an infinite 2-dimensional memory tape, extending the 1-dimensional memory tape of brainfuck (There are also numerous other 2D brainfuck derivatives). There is an memory pointer which has an X value and a Y one, which indexes the 2D memory tape.",
    "url": "https://esolangs.org/wiki/2DFuck",
    "language_short": "brainfuck",
    "code": ".!.!..!.!....!..!..!.!.!.!.!..!.!..!...!..!.!..!...!..!.!....!..!.!.!..!....!.!......!.!.!.!.!...!.!..!.!....!.!...!..!.!..!..!.!..!...!..!..!.!....!.!....!."
  },
  {
    "id": "70",
    "title": "2L",
    "description": "2L (the Two Language), designed by Gregor Richards, is an esoteric programming language derived loosely from the PATH programming language and Brainfuck. 2L is Turing Complete.",
    "url": "",
    "language_short": "brainfuck",
    "code": " *+ 2L \"Hello, World!\" program by poiuy_qwert   +\n+                                                   +\n *                                             +*\n *     +                                        *+\n    + **                                     +    *\n      +*                                           +\n     *  +                                                               *+\n     +                                        +                         *\n   +******************************************* *************************\n                                                 +                      +\n                                                     +\n                                                 *+\n    +                                          *+*\n      +                                        *+  *\n     *                                          +  *+\n     +                                           + *  +\n   +********                                       *      +\n                                                   + +*\n    +                                             *   *+\n      +                                           *+    *\n     *                                             +    *+\n     +                                              +   *    +\n   +******                                              **+\n                                                        +*\n                                                        +  *\n                                                           *+ +\n    +                                                *   +        +\n     ***+                                            *     * +*\n   +                                                       *  *+\n       *                                              +    +    *\n    +  +                                                  *   *+ +\n     ************************+                            * + * +\n   +                                                          *     +\n                            *                              +  + *+\n                            +                                  +*\n                                                              +   *\n    +                                                        *  *  +\n     *******************************************************+* +  *   +\n   +                                                              *       +\n                                                           *  +   +  +*\n    +                                                      +     *    *+\n      +                                                          *+     *\n     *                                                            + *    +\n     +                                                             + *  *\n   +************                                                        *    +\n     +                                                               *  +         +\n    *                                                                 +      * +\n    +                                                                  *+   +** \n  +******************************************************************* *\n                                                                       +   +    *       +\n                                                                             *   +         +\n   +                                                                        +          +*\n    ***+                                                              *         *       *+\n  +                                                                             * \n                                                                      *         +   +    *    +\n      *                                                                +              *   +        +\n   +  +                                                                              +        *+\n    *******+                                                                   *         *   +*\n  +                                                                                      *\n                                                                               *         +  +    *\n          *                                                                     +             *   +\n   +      +                                                                                  +\n    *****************************+                                                     *         *\n  +                                                                                              *\n                                                                                       *         +\n                                *                                                       +\n                                +\n  ************************************************************************+                    *\n +                                                                       *                     *\n                                                                                                +\n                                                                         +"
  },
  {
    "id": "71",
    "title": "33",
    "description": "33 is the name of a simple and original esolang invented by TheOnlyMrCat. The language has exactly 33 alphabetical single-character commands which do certain functions (hence the name).",
    "url": "https://esolangs.org/wiki/33",
    "language_short": "",
    "code": "\"Hello, World!\"p"
  },
  {
    "id": "72",
    "title": "420",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "420\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it\r\nblaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it\r\n\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it blaze it\r\nblaze it blaze it blaze it blaze it blaze it blaze it"
  },
  {
    "id": "73",
    "title": "4D",
    "description": "",
    "url": "",
    "language_short": "c1",
    "code": "ALERT(\"Hello World!\")"
  },
  {
    "id": "74",
    "title": "4GL",
    "description": "A fourth-generation programming language (4GL) is any computer programming language that belongs to a class of languages envisioned as an advancement upon third-generation programming languages (3GL).",
    "url": "https://en.wikipedia.org/wiki/Fourth-generation_programming_language",
    "language_short": "c-like",
    "code": "main\r\n    display \"Hello World\"\r\nend main"
  },
  {
    "id": "75",
    "title": "4Test",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "testcase printHelloWorld()\r\n    print(\"Hello World!\")"
  },
  {
    "id": "76",
    "title": "4ThDimension (4th Dimension)",
    "description": "4D (4th Dimension, or Silver Surfer, as it was known during early development) is a relational database management system and IDE developed by Laurent Ribardière. 4D was created in 1984 and had a slightly delayed public release for Macintosh in 1987 with its own Programming Language.",
    "url": "https://en.wikipedia.org/wiki/4th_Dimension_(software)",
    "language_short": "c-like",
    "code": "OPEN WINDOW (10;45;500;330;0;\"Hello Window\")\r\nWhile (True)\r\n    MESSAGE (\"Hello World!\")\r\nEnd while"
  },
  {
    "id": "77",
    "title": "8051 Assembly",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "LCALL INIT_LCD\r\nLCALL CLEAR_LCD\r\nMOV A,#'H'\r\nLCALL WRITE_TEXT\r\nMOV A,#'E'\r\nLCALL WRITE_TEXT\r\nMOV A,#'L'\r\nLCALL WRITE_TEXT\r\nMOV A,#'L'\r\nLCALL WRITE_TEXT\r\nMOV A,#'O'\r\nLCALL WRITE_TEXT\r\nMOV A,#' '\r\nLCALL WRITE_TEXT\r\nMOV A,#'W'\r\nLCALL WRITE_TEXT\r\nMOV A,#'O'\r\nLCALL WRITE_TEXT\r\nMOV A,#'R'\r\nLCALL WRITE_TEXT\r\nMOV A,#'L'\r\nLCALL WRITE_TEXT\r\nMOV A,#'D'\r\nLCALL WRITE_TEXT"
  },
  {
    "id": "78",
    "title": "8Th",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "\"Hello, world!\\n\" ."
  },
  {
    "id": "79",
    "title": "A:;",
    "description": "A:; is an esoteric programming language created by User:OriginalOldMan. Each A:; program has a series of statements separated by semicolons. Each A:; statement has a series of arguments separated by colons. All A:; programs must be written on one line.",
    "url": "https://esolangs.org/wiki/A:;",
    "language_short": "c-like",
    "code": "j:Hello World;p:j"
  },
  {
    "id": "80",
    "title": "A.R.T.I.C.L.E.",
    "description": "A.R.T.I.C.L.E. is an esoteric programming language created in october 5 2020 by User:SoicBR A.R.T.I.C.L.E. stands for: Apple Random Tower Island Cat LOL Elephant",
    "url": "https://esolangs.org/wiki/A.R.T.I.C.L.E.",
    "language_short": "",
    "code": "This is the first ever \"useful\" program written\r\n in the ARTICLE. It's an esoteric programming\r\n language made by me, Soic. I don't know what else to\r\n write but i still to write code.\r\n Now, it's time to print the first character in\r\n the very cool debug console.\r\n Here i go again to write code to a dumb\r\n language. I don't really know what to. say, yes\r\n i swapped the position of a period and a comma\r\n just because i'm very, very, lazy.\r\n Now, it's time to print the first character in\r\n the very cool debug console.\r\n Here i go yet again writing code to a dumb\r\n language. Yes, i am very LAZY. Lazy Lazy Lazy\r\n Lazy, laughing out loud, yes, i did this twice.\r\n Now, i will print the first character in\r\n the cool debug console yet again.\r\n Now, i will print the first character in\r\n the cool console yet again, again.\r\n Ngl, i'm out of ideas now and i'm just\r\n writing stuff. I need to write code.\r\n I need to write a lot of code.\r\n I'm tired, now i will just filler my way\r\n out f f f f.\r\n f0 f1 f2 f3 f4\r\n f5 f6 f7 f8 f9 f10 f11. n1 n2\r\n n3 n4 n5 n6 n7 n8 n9. n1 n2 n3 n4 n5 n6 n7 n8\r\n n9 n10 n11 n12 n13 n14 n15 n16 n17 n18 n19 n20.\r\n f means filler f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11. n1 n2 n3\r\n n4 n5 n6 n7 n8 n9 n10. n1 n2 n3 n4 n5 n6 n7 n8\r\n n9 n10 n11 n12.\r\n f f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12\r\n n13.\r\n f f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8.\r\n F f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11.\r\n F f f f f f f f f f f f f f.\r\n f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12. n1 n2\r\n n3 n4 n5. n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13.\r\n F f f f f f f f f f f f f f."
  },
  {
    "id": "81",
    "title": "A++",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(print \"Hello World\")"
  },
  {
    "id": "82",
    "title": "ABAP",
    "description": "ABAP (Advanced Business Application Programming, originally Allgemeiner Berichts-Aufbereitungs-Prozessor, German for \"general report creation processor\") is a high-level programming language created by the German software company SAP SE. It is extracted from the base computing languages Java, C, C++ and Python. It is currently positioned, alongside Java, as the language for programming the SAP NetWeaver Application Server, which is part of the SAP NetWeaver platform for building business applications.",
    "url": "https://en.wikipedia.org/wiki/ABAP",
    "language_short": "c-like",
    "code": "REPORT ZHELLO_WORLD.\r\n \r\nSTART-OF-SELECTION.\r\n    WRITE: 'Hello World!'."
  },
  {
    "id": "83",
    "title": "ABC",
    "description": "ABC is an imperative general-purpose programming language and integrated development environment (IDE) developed at Centrum Wiskunde & Informatica (CWI), Netherlands by Leo Geurts, Lambert Meertens, and Steven Pemberton. It is interactive, structured, high-level, and intended to be used instead of BASIC, Pascal, or AWK. It is intended for teaching or prototyping, but not as a systems-programming language.",
    "url": "https://en.wikipedia.org/wiki/ABC_(programming_language)",
    "language_short": "c-like",
    "code": "WRITE \"Hello, World!\""
  },
  {
    "id": "84",
    "title": "ACIDIC",
    "description": "ACIDIC is an esoteric programming language made by User:iconmaster.",
    "url": "https://esolangs.org/wiki/ACIDIC",
    "language_short": "c-like",
    "code": "Hello, world!\r\nwP"
  },
  {
    "id": "85",
    "title": "ACL",
    "description": "ACL (Advanced Computer Language) is a language created in 2019 by User:Hanzlu. The language shall have a .adcl file extension.",
    "url": "https://esolangs.org/wiki/ACL",
    "language_short": "brainfuck",
    "code": "34344343444C3443443434343C34434344344C34434344344C34434344443C34344444C3434343434443C34434344443C34443443434C34434344344C34434434344C3434444343CC"
  },
  {
    "id": "86",
    "title": "ACPI (Advanced Configuration and Power Interface)",
    "description": "In a computer, the Advanced Configuration and Power Interface (ACPI) provides an open standard that operating systems can use to discover and configure computer hardware components, to perform power management e.g. putting unused hardware components to sleep, to perform auto configuration e.g. Plug and Play and hot swapping, and to perform status monitoring. First released in December 1996, ACPI aims to replace Advanced Power Management (APM), the MultiProcessor Specification, the PCI BIOS specification, and the Plug and Play BIOS (PnP) Specification.",
    "url": "https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface",
    "language_short": "actionscript",
    "code": "Scope(\\) {\r\n    Method(_WAK) {\r\n        Store (\"Hello World\", Debug)\r\n        Return(Package(2){0x00000000,0})\r\n    }\t\r\n}"
  },
  {
    "id": "87",
    "title": "ACRONYM",
    "description": "ACRONYM was created by Tslil Clingman in early 2008, originating from an idea the author had in late 2007. ACRONYM was created to serve the author's wishes for a highly obfuscated language in which no given programme would have major visual differences from any other given programme (with the exceptions of length and format)",
    "url": "https://esolangs.org/wiki/ACRONYM",
    "language_short": "brainfuck",
    "code": "{{>>{~~~~{-<}~~~~~~~~~{-<-<}}<<}\r\n</(<<<){[<]}:>:{>>{~~~~~~~~{<}~{>}}<<}\\\r\n~>{{~{v}}>>>v{~}^<<<}/(<<<){[<<]}:>:{>>{~~~~~~~~{<<}~{>>}}<<"
  },
  {
    "id": "88",
    "title": "ACS (Action Code Script)",
    "description": "Action Code Script (ACS) is a scripting language used in video games such as HeXen and some modern Doom source ports, such as ZDoom.",
    "url": "https://en.wikipedia.org/wiki/Action_Code_Script",
    "language_short": "c-like",
    "code": "#include \"zcommon.acs\"\r\nScript 1 OPEN\r\n{\r\n    Print(s: \"Hello, world!\");\r\n}"
  },
  {
    "id": "89",
    "title": "Actionscript",
    "description": "ActionScript was an object-oriented programming language originally developed by Macromedia Inc. (later acquired by Adobe Systems). It is influenced by HyperTalk, the scripting language for HyperCard. It is now an implementation of ECMAScript (meaning it is a superset of the syntax and semantics of the language more widely known as JavaScript), though it originally arose as a sibling, both being influenced by HyperTalk.",
    "url": "https://en.wikipedia.org/wiki/ActionScript",
    "language_short": "actionscript",
    "code": "package \n{\n\timport flash.display.Sprite;\n\timport flash.text.TextField;\n\t\n\tpublic class actionscript extends Sprite\n\t{\n\t\tprivate var hello:TextField = new TextField();\n\t\t\n\t\tpublic function actionscript(){\n\t\t\thello.text = \"Hello World\";\n\t\t\taddChild(hello);\n\t\t}\n\t}\n}"
  },
  {
    "id": "90",
    "title": "Actionscript Flashmx",
    "description": "",
    "url": "",
    "language_short": "actionscript",
    "code": "_root.createTextField(\"mytext\",1,100,100,300,100);\r\nmytext.multiline = true;\r\nmytext.wordWrap = true;\r\nmytext.border = false;\r\n \r\nmyformat = new TextFormat();\r\nmyformat.color = 0xff0000;\r\nmyformat.bullet = false;\r\nmyformat.underline = true;\r\n \r\nmytext.tex"
  },
  {
    "id": "91",
    "title": "Actionscript2 (ActionScript 2)",
    "description": "ActionScript 2.0 is the second major release of the ActionScript object-oriented programming language from Macromedia, based on the ECMAScript 4 Netscape Proposal with class-based inheritance.",
    "url": "https://adobe.fandom.com/wiki/ActionScript_2",
    "language_short": "actionscript",
    "code": "trace( \"Hello World\" );"
  },
  {
    "id": "92",
    "title": "Actionscript3 (ActionScript 3)",
    "description": "This pages is for actionscript concepts that apply to any ActionScript 3.0 authoring environment and any runtime that supports ActionScript 3.0.",
    "url": "http://edutechwiki.unige.ch/en/ActionScript_3_tutorials",
    "language_short": "actionscript",
    "code": "package {\n\nimport flash.display.Sprite;\nimport flash.text.TextField;\nimport flash.text.TextFieldAutoSize;\nimport flash.text.TextFormat;\n\n[SWF(width='800', height='600', backgroundColor='#cccccc', frameRate='30')]\n\n\tpublic class HelloFlash extends Sprite\n\t{\n\t\tpublic function HelloFlash()\n\t\t{\n\t\t\tvar format:TextFormat = new TextFormat();\n\t\t\tformat.font = \"Arial\";\n\t\t\tformat.size = 20;\n\t\t\tformat.color = 0x0000;\n\n\t\t\tvar textField:TextField = new TextField();\n\t\t\ttextField.defaultTextFormat = format;\n\n\t\t\ttextField.border = false;\n\t\t\ttextField.autoSize = TextFieldAutoSize.LEFT;\n\t\t\ttextField.selectable = false;\n\n\t\t\ttextField.text = \"Hello World\";\n\t\t\taddChild(textField);\n\n\n\t\t}\n\t}\n}"
  },
  {
    "id": "93",
    "title": "Ada",
    "description": "Ada is a structured, statically typed, imperative, and object-oriented high-level programming language, extended from Pascal and other languages. It has built-in language support for design by contract (DbC), extremely strong typing, explicit concurrency, tasks, synchronous message passing, protected objects, and non-determinism.",
    "url": "https://en.wikipedia.org/wiki/Ada_(programming_language)",
    "language_short": "c-like",
    "code": "with Text_IO;\r\nprocedure Hello_World is\r\n    begin\r\n        Text_IO.Put_line(\"Hello World!\");\r\n    end Hello_World;"
  },
  {
    "id": "94",
    "title": "AdvPL",
    "description": "AdvPL (Advanced Protheus Language) is a proprietary programming language based on xBase. It was released in 1999 and is used for development of applications in the ERP Protheus made by TOTVS.",
    "url": "https://en.wikipedia.org/wiki/AdvPL",
    "language_short": "c-like",
    "code": "User Function Hello()\r\nLocal cMsg := \"Hello, world!\"\r\nconout(cMsg)\r\nMsgInfo(cMsg)\r\nReturn"
  },
  {
    "id": "95",
    "title": "Aeolbonn",
    "description": "Aeolbonn (An esoteric output language based on natural numbers) is a Turing-complete esoteric language designed by Keymaker.",
    "url": "https://esolangs.org/wiki/Aeolbonn",
    "language_short": "c-like",
    "code": ":Hello, world!\r\n:"
  },
  {
    "id": "96",
    "title": "AEWNN",
    "description": "AEWNN (or An esolang with no name) is an esolang created by ResU in 2021.",
    "url": "https://esolangs.org/wiki/AEWNN",
    "language_short": "",
    "code": "[8+]cpar2[5+]cpa[7+]cpacpa+++cpa [8+]cpar2[15+]cpa+++cpar2[12+]cpar2++++cpa"
  },
  {
    "id": "97",
    "title": "Agda",
    "description": "Agda is a dependently typed functional programming language originally developed by Ulf Norell at Chalmers University of Technology with implementation described in his PhD thesis.",
    "url": "https://en.wikipedia.org/wiki/Agda_(programming_language)",
    "language_short": "c-like",
    "code": "module agda where\r\nopen import IO\r\n \r\nmain = run (putStrLn \"Hello World\")"
  },
  {
    "id": "98",
    "title": "Aheui",
    "description": "Aheui (아희 in Korean language) is the first esoteric programming language ever to be designed for Hangul, the Korean alphabet, designed by User:Puzzlet Chung.",
    "url": "https://esolangs.org/wiki/Aheui",
    "language_short": "plaintext",
    "code": "밤밣따빠밣밟따뿌\r\n빠맣파빨받밤뚜뭏\r\n돋밬탕빠맣붏두붇\r\n볻뫃박발뚷투뭏붖\r\n뫃도뫃희멓뭏뭏붘\r\n뫃봌토범더벌뿌뚜\r\n뽑뽀멓멓더벓뻐뚠\r\n뽀덩벐멓뻐덕더벅"
  },
  {
    "id": "99",
    "title": "Aime",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "integer\r\nmain(void)\r\n{\r\n    o_text(\"Hello world!\\n\");\r\n    \r\n    return 0;\r\n}"
  },
  {
    "id": "100",
    "title": "AIML",
    "description": "AIML, or Artificial Intelligence Markup Language, is an XML dialect for creating natural language software agents.",
    "url": "https://en.wikipedia.org/wiki/AIML",
    "language_short": "xml",
    "code": "<aiml>\r\n    <category>\r\n        <pattern>*</pattern>\r\n        <template>Hello World!</template>\r\n    </category>\r\n</aiml>"
  },
  {
    "id": "101",
    "title": "Airline food",
    "description": "Airline food is an esoteric programming language created by User:Largejamie in April 2021 whose programs are supposed to look like Jerry Seinfeld's stand-up.",
    "url": "https://esolangs.org/wiki/Airline_food",
    "language_short": "",
    "code": "You ever notice this?\r\nWhat's the deal with this thing? It's kinda like this.\r\nWhat's the deal with airline food?\r\nWhat's the deal with it?\r\nIt's kinda like this thing. Just like it. \r\nLet's talk about this thing. It's kinda like this thing. It's kinda like this.\r\nYeah, Just like this thing. Just like it. Not like this.\r\nWhat's the deal with pilots? Just like it. Not like this. Just like it. See?\r\nLet's talk about this thing. Not like this.\r\nWhat's the deal with baggage claim? Just like this thing. Just like it. It's kinda like pilots.\r\nWhat's the deal with luggage? Just like baggage claim. It's kinda like this. It's kinda like this. Not like it. See?\r\nLet's talk about baggage claim. See? See? It's kinda like this thing. Not like this. See?\r\nLet's talk about it. Um, See? It's kinda like this. Not like this thing. Not like it. See?\r\nLet's talk about baggage claim. It's kinda like it. Not like this. See? It's kinda like this. Not like it. See? It's kinda like this thing. Not like this. \r\nSee? Not like this thing. Not like this. Not like this. See?\r\nLet's talk about luggage. Not like this. See?\r\nLet's talk about it. Um, It's kinda like this. See?');"
  },
  {
    "id": "102",
    "title": "AIV",
    "description": "AIV is an interpreted weirdlang that uses french quotes instead of brackets.",
    "url": "https://esolangs.org/wiki/AIV",
    "language_short": "vim",
    "code": "display«\r\nThe rusted chains of prison moons are shattered by the sun.\r\n»\r\nstop«undisp»"
  },
  {
    "id": "103",
    "title": "ALAGUF",
    "description": "ALAGUF is a language made by User:iconmaster. It is an acronym for At Last, A Greatly Useful Funge. It is a fungeoid that is designed to be easy to be powerful and yet amazinly twisty.",
    "url": "https://esolangs.org/wiki/ALAGUF",
    "language_short": "c-like",
    "code": "\"Hello World!\"#!"
  },
  {
    "id": "104",
    "title": "Alda",
    "description": "Alda is a music programming language for music composition, with an emphasis on readability and a simple syntactic structure. It is written in the Clojure programming language, and can be used to generate MIDI scores.",
    "url": "https://en.everybodywiki.com/Alda_(Programming_Language)",
    "language_short": "c-like",
    "code": "piano: c8 d e f g f e d c2."
  },
  {
    "id": "105",
    "title": "Algae",
    "description": "Algae is a programming language for numerical analysis. We wrote it because we needed a fast and versatile tool, capable of handling large systems. Algae has been applied to interesting problems in aerospace and related fields for more than a decade.",
    "url": "https://sourceforge.net/p/algae/wiki/Home/",
    "language_short": "c-like",
    "code": "printf(\"Hello world!\\n\");"
  },
  {
    "id": "106",
    "title": "ALGOL W",
    "description": "ALGOL W is a programming language. It is based on a proposal for ALGOL X by Niklaus Wirth and Tony Hoare as a successor to ALGOL 60 in International Federation for Information Processing (IFIP) IFIP Working Group 2.1 on Algorithmic Languages and Calculi, which specified, maintains, and supports the languages ALGOL 60 and ALGOL 68.",
    "url": "https://en.wikipedia.org/wiki/ALGOL_W",
    "language_short": "c-like",
    "code": "begin\r\n    write( \"Hello world!\" )\r\nend."
  },
  {
    "id": "107",
    "title": "algol60 (ALGOL 60)",
    "description": "ALGOL 60 (short for Algorithmic Language 1960) is a member of the ALGOL family of computer programming languages.",
    "url": "https://en.wikipedia.org/wiki/ALGOL_60",
    "language_short": "gams",
    "code": "BEGIN\r\n    FILE F(KIND=REMOTE);\r\n    EBCDIC ARRAY E[0:11];\r\n    REPLACE E BY \"HELLO WORLD!\";\r\n    WRITE(F, *, E);\r\nEND."
  },
  {
    "id": "108",
    "title": "algol68 (ALGOL 68)",
    "description": "ALGOL 68 (short for Algorithmic Language 1968) is an imperative programming language that was conceived as a successor to the ALGOL 60 programming language, designed with the goal of a much wider scope of application and more rigorously defined syntax and semantics.",
    "url": "https://en.wikipedia.org/wiki/ALGOL_68",
    "language_short": "gams",
    "code": "begin\r\n    print((\"Hello, world!\",newline))\r\nend"
  },
  {
    "id": "109",
    "title": "Alore",
    "description": "Alore is an object-oriented programming language with a clean syntax that resembles Python and Lua. Alore is optionally-typed like Google Dart: it is both a dynamic scripting language and a general-purpose language with static typing. It is aimed at diverse programming tasks, from short scripts to complex applications. Alore also allows you to freely mix static and dynamic typing within a program.",
    "url": "https://rosettacode.org/wiki/Category:Alore",
    "language_short": "c-like",
    "code": "Print('Hello world!')"
  },
  {
    "id": "110",
    "title": "AlPhAbEt",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "{\r\n\r\n  0>,\r\n\r\n  1>.  2>,  3>.  4>.  5>,  6>.  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>.  6>,  7>.  8>,  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>,  8>,  9>,\r\n  1>.  2>.  3>,  4>.  5>.  6>.  7>.  8>.  9>,\r\n  1>.  2>,  3>.  4>,  5>.  6>,  7>,  8>,  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>,  8>,  9>,\r\n  1>.  2>,  3>,  4>,  5>.  6>.  7>,  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>,  6>,  7>.  8>.  9>,\r\n  1>.  2>,  3>,  4>.  5>.  6>,  7>.  8>.  9>,\r\n\r\n}"
  },
  {
    "id": "111",
    "title": "Alphaprint",
    "description": "Alphaprint is a language made by User:PythonshellDebugwindow.",
    "url": "https://esolangs.org/wiki/Alphaprint",
    "language_short": "plaintext",
    "code": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstUvwxyzabcdefghijklmnopqrstuvwXyzabcdEfghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstu"
  },
  {
    "id": "112",
    "title": "Amiga E (Amiga-E)",
    "description": "Amiga E, or very often simply E, is a programming language created by Wouter van Oortmerssen on the Amiga. He has since moved on to develop the SHEEP programming language for the new AmigaDE platform and the CryScript language (also known as DOG) used during the development of the video game Far Cry.",
    "url": "https://en.wikipedia.org/wiki/Amiga_E",
    "language_short": "c-like",
    "code": "PROC main() IS WriteF('Hello World\\n')"
  },
  {
    "id": "113",
    "title": "Amos",
    "description": "AMOS BASIC is a dialect of the BASIC programming language implemented on the Amiga computer. AMOS BASIC was published by Europress Software and originally written by François Lionet with Constantin Sotiropoulos.",
    "url": "https://en.wikipedia.org/wiki/AMOS_(programming_language)",
    "language_short": "c-like",
    "code": "Print \"Hello world!\""
  },
  {
    "id": "114",
    "title": "Android",
    "description": "Android software development is the process by which applications are created for devices running the Android operating system. Google states that \"Android apps can be written using Kotlin, Java, and C++ languages\" using the Android software development kit (SDK), while using other languages is also possible. All non-JVM languages, such as Go, JavaScript, C, C++ or assembly, need the help of JVM language code, that may be supplied by tools, likely with restricted API support.",
    "url": "https://en.wikipedia.org/wiki/Android_software_development",
    "language_short": "java",
    "code": "package com.example.helloworld;\r\n \r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.widget.TextView;\r\n \r\npublic class HelloWorld extends Activity {\r\n    /** Called when the activity is first created. */\r\n    @Override\r\n    public v"
  },
  {
    "id": "115",
    "title": "AngelScript",
    "description": "AngelScript features static typing, object handles (similar to C++ pointers but garbage collected via reference counting), object-orientation, single inheritance, multiple inheritance with interfaces. Allows operators to be registered and overloaded. AngelScript can be used with any C++ IDE, such as NetBeans, Geany, and Eclipse.",
    "url": "https://en.wikipedia.org/wiki/AngelScript",
    "language_short": "angelscript",
    "code": "void main() { print(\"Hello world\\n\"); }"
  },
  {
    "id": "116",
    "title": "Angular (AngularJS)",
    "description": "AngularJS is a JavaScript-based open-source front-end web framework mainly maintained by Google and by a community of individuals and corporations to address many of the challenges encountered in developing single-page applications. It aims to simplify both the development and the testing of such applications by providing a framework for client-side model–view–controller (MVC) and model–view–viewmodel (MVVM) architectures, along with components commonly used in web applications and progressive web applications.",
    "url": "https://en.wikipedia.org/wiki/AngularJS",
    "language_short": "javascript",
    "code": "$$scope.$$log = $$log;\r\n$$scope.message = 'Hello World!';"
  },
  {
    "id": "117",
    "title": "Ante",
    "description": "Ante is an esoteric programming language where all you've got is a deck of playing cards. The language was created by Michael Dvorkin in 2013. Original Ante interpreter was developed in Ruby, versions in Go, Rust, and Swift are also available.",
    "url": "https://esolangs.org/wiki/Ante",
    "language_short": "brainfuck",
    "code": "9♦8♥J♦A♦2♣3♥7♠J♦A♦7♦J♦J♦A♦3♦J♦5♥6♦4♥J♥A♥6♠6♠J♥A♦8♦J♦A♦8♠J♦A♦3♦J♦A♦6♠J♦A♦8♠J♦A♥3♦2♠J♥A♥2♣6♠J♥"
  },
  {
    "id": "118",
    "title": "AntLang",
    "description": "AntLang is a functional scripting language named after its creator Anthony Cipriano. Its main distinctive feature is short syntax oriented towards mathematical equations.",
    "url": "https://gyaanipedia.fandom.com/wiki/AntLang",
    "language_short": "vim",
    "code": "\"Hello World\""
  },
  {
    "id": "119",
    "title": "AnyPL",
    "description": "AnyPL is an esoteric programming language created by Peter Larsen in 2011. AnyPL stands for Any Programming Language. The most current version of AnyPL is 0001.",
    "url": "https://esolangs.org/wiki/AnyPL",
    "language_short": "brainfuck",
    "code": "HelloWor 0001 .2.. S1.. .3.. .3.. Tr.. .1.c ---- ........ [ Put the strings to the tape. ]\r\nld...... 0010 .<.. 1.0. .<.. .... .... .... 121= ........ [ Output.                      ]\r\n........ 0001 .... .... .... .... .... .... -11. ........ [ End e"
  },
  {
    "id": "120",
    "title": "APC",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "probe program\r\n{\r\n    on_entry log (\"Hello, World!\\n\");\r\n}"
  },
  {
    "id": "121",
    "title": "Apex",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "global with sharing class HelloWorld {\r\n    global static void main() {\r\n        System.debug('Hello World');\r\n    }\r\n}"
  },
  {
    "id": "122",
    "title": "APL",
    "description": "APL (named after the book A Programming Language) is a programming language developed in the 1960s by Kenneth E.",
    "url": "https://en.wikipedia.org/wiki/APL_(programming_language)",
    "language_short": "vim",
    "code": "⎕←'Hello World!'"
  },
  {
    "id": "123",
    "title": "AppleScript",
    "description": "AppleScript is a scripting language created by Apple Inc. that facilitates automated control over scriptable Mac applications. First introduced in System 7, it is currently included in all versions of macOS as part of a package of system automation tools.",
    "url": "https://en.wikipedia.org/wiki/AppleScript",
    "language_short": "applescript",
    "code": "display dialog \"Hello World\""
  },
  {
    "id": "124",
    "title": "Applesoft BASIC",
    "description": "Applesoft BASIC is a dialect of Microsoft BASIC, developed by Marc McDonald and Ric Weiland, supplied with the Apple II series of computers. It supersedes Integer BASIC and is the BASIC in ROM in all Apple II series computers after the original Apple II model. It is also referred to as FP BASIC (from \"floating point\") because of the Apple DOS command used to invoke it, instead of INT for Integer BASIC.",
    "url": "https://en.wikipedia.org/wiki/Applesoft_BASIC",
    "language_short": "",
    "code": "10 PRINT \"HELLO WORLD\""
  },
  {
    "id": "125",
    "title": "ARC",
    "description": "Arc is a programming language, a dialect of the language Lisp, developed by Paul Graham and Robert Morris. It is free and open-source software released under the Artistic License 2.0.",
    "url": "https://en.wikipedia.org/wiki/Arc_(programming_language)",
    "language_short": "arcade",
    "code": "(prn \"Hello, World!\")"
  },
  {
    "id": "126",
    "title": "Arduino",
    "description": "The Arduino Integrated Development Environment (IDE) is a cross-platform application (for Windows, macOS, Linux) that is written in functions from C and C++. It is used to write and upload programs to Arduino compatible boards, but also, with the help of third-party cores, other vendor development boards.",
    "url": "https://en.wikipedia.org/wiki/Arduino",
    "language_short": "arduino",
    "code": "void setup() {\r\n    // put your setup code here, to run once:\r\n    // initialize serial communication at 9600 bits per second:\r\n    Serial.begin(9600);\r\n    //print message serial monitor\r\n    Serial.println(\"Hello world!\");\r\n}\r\n \r\nvoid loop() {\r\n    // p"
  },
  {
    "id": "127",
    "title": "Arena",
    "description": "Arena is a discrete event simulation and automation software developed by Systems Modeling and acquired by Rockwell Automation in 2000. It uses the SIMAN processor and simulation language. As of 2020, it is in version 16. It has been suggested that Arena may join other Rockwell software packages under the \"FactoryTalk\" brand.",
    "url": "https://en.wikipedia.org/wiki/Arena_(software)",
    "language_short": "c-like",
    "code": "print(\"Hello World!\");"
  },
  {
    "id": "128",
    "title": "Argh (Argh!)",
    "description": "Argh! and its successor Aargh!, both invented by Sascha Wilde, are Befunge-like esoteric programming languages, laid out in two dimensions. Each is limited to 80 columns wide, but Aargh! has an unlimited number of rows, whereas Argh! is limited to 40. The idea was to make sure Aargh! was Turing-complete.",
    "url": "https://esolangs.org/wiki/Argh!",
    "language_short": "brainfuck",
    "code": "lppppppppppppsrfj\r\nHello World!*  j\r\n            qPh"
  },
  {
    "id": "129",
    "title": "ArkScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(print \"Hello World\")"
  },
  {
    "id": "130",
    "title": "ArnoldC",
    "description": "ArnoldC is an esoteric programming language created with Scala by Lauri Hartikka. The source is available here, along with tutorials and example programs.",
    "url": "https://esolangs.org/wiki/ArnoldC",
    "language_short": "plaintext",
    "code": "IT'S SHOWTIME\r\nTALK TO THE HAND \"hello world\"\r\nYOU HAVE BEEN TERMINATED"
  },
  {
    "id": "131",
    "title": "AsciiDots",
    "description": "AsciiDots is an esoteric programming language based on ascii art. In this language, dots, represented by periods (.), travel down ascii art paths and undergo operations.",
    "url": "https://esolangs.org/wiki/AsciiDots",
    "language_short": "",
    "code": ".-$$\"Hello World\" "
  },
  {
    "id": "132",
    "title": "asdf",
    "description": "asdf is an esoteric programming language created by David Catt (user:David.werecat) which uses only 4 instructions: a, s, d and f.",
    "url": "https://esolangs.org/wiki/Asdf",
    "language_short": "brainfuck",
    "code": "asaasaasssasaasssasaaaasssasaasssasaaaaaaaasssasaaaasssasaaaasssasaasssasaasss\r\nasaasssasaasssasaaaasssasaasssasaaaasssasaaaaaasssasaaaasssasaasssasaaaasssasa\r\naaaaasssasaaaasssasaasssasaaaaaaaasssasaaaasssasaasssasaasssasaaaasssasaaaaaaa\r\nasssasaasssasaa"
  },
  {
    "id": "133",
    "title": "Ash",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "public class Ash {\r\n    public static func main(args : [String]) {\r\n        println(\"Hello, world!\")\r\n    }\r\n}"
  },
  {
    "id": "134",
    "title": "Asm2bf",
    "description": "The only true brainfuck assembler. Produces small and efficient brainfuck code based on instruction choice. asm2bf is the only true brainfuck assembler in active development since 2017. It produces small and efficient brainfuck code based on instruction choice. It's features include a Lua preprocessor, labels, a precise floating point library, conditional branching, dynamic memory allocation procedures, stack-based offsets, instruction-level move semantics, virtual instructions, effective adresses and signed arithmetic. It's possible to define recursive procedures, and do basically everything you'd expect from a normal assembler.",
    "url": "https://esolangs.org/wiki/Asm2bf",
    "language_short": "properties",
    "code": "stk 2\r\norg 0\r\ntxt \"Hello World!\"\r\ndb_ 0\r\n        psh 1\r\n        psh 0\r\n        jmp 100\r\nlbl 1\r\n        end\r\n \r\nlbl 100\r\n        pop r1\r\nlbl 102\r\n        rcl r2,r1\r\n        jz_ r2,101\r\n        out r2\r\n        inc r1\r\n        jmp 102\r\nlbl 101\r\n        out 1"
  },
  {
    "id": "135",
    "title": "ASP (Asparagus)",
    "description": "See the GitHub repository for more information. The text below was copied from the wiki's syntax page.",
    "url": "https://esolangs.org/wiki/Asparagus",
    "language_short": "vbscript",
    "code": "<%@ Language= \"VBScript\" %>\r\n                    <%\r\n                        Response.Write(\"Hello World\")\r\n                    %>"
  },
  {
    "id": "136",
    "title": "Asparagus Assembly",
    "description": "Note that this program, when assembled, is much larger than the b1 version due to technical limitations with the assembler.",
    "url": "https://github.com/all-other-usernames-were-taken/Asparagus/tree/assembler",
    "language_short": "",
    "code": "set,0,Hello  World!\r\nset,1,44\r\nprint,0,0,0\r\nstring,char,1,2,1\r\nprint,0,5,1"
  },
  {
    "id": "137",
    "title": "Aspectj",
    "description": "AspectJ is an aspect-oriented programming (AOP) extension created at PARC for the Java programming language. It is available in Eclipse Foundation open-source projects, both stand-alone and integrated into Eclipse.",
    "url": "https://en.wikipedia.org/wiki/AspectJ",
    "language_short": "java",
    "code": "System.out.println(\"Hello World!\");"
  },
  {
    "id": "138",
    "title": "Assembler 6502",
    "description": "This book is a guide to the 6502 Assembly language. This book will teach the different memory addressing modes and instructions of the 8-bit 6502 processor. You might want to learn 6502 assembly language programming if you want to do Atari 2600/8-bit family/5200/7800 Programming, Commodore PET/VIC/64/128 Programming, Acorn 8 Bit Programming, Apple I/II Programming, NES Programming or Super NES Programming.",
    "url": "https://en.wikibooks.org/wiki/6502_Assembly",
    "language_short": "x86asm",
    "code": "; goodbyeworld.s for C= 8-bit machines, ca65 assembler format.\r\n; String printing limited to strings of 256 characters or less.\r\n    \r\na_cr\t= $$0d\t\t; Carriage return.\r\nbsout\t= $$ffd2\t\t; KERNAL ROM, output a character to current device.\r\n    \r\n    .code\r\n   "
  },
  {
    "id": "139",
    "title": "Assembler 6502appleII",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "STROUT \tEQU\t$$DB3A ;OUTPUTS AY-POINTED NULL TERMINATED STRING\r\n    LDY\t#>HELLO\r\n    LDA\t#<HELLO\r\n    JMP\tSTROUT\r\n \r\nHELLO\tASC\t\"HELLO WORLD!\",00"
  },
  {
    "id": "140",
    "title": "Assembler 6502c64",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "ldy #0\r\nbeq in\r\nloop:\r\njsr $$ffd2\r\niny\r\nin:\r\nlda hello,y\r\nbne loop\r\nrts\r\nhello: .tx \"Hello World!\"\r\n        .by 13,10,0"
  },
  {
    "id": "141",
    "title": "Assembler 6809vectrex",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; Hello World for Vectrex computer with 6809 CPU\r\n; by Frog ( http://frog.enlight.ru )\r\n; 24 March 2016\r\n \r\n;***************************************************************************\r\n                org     0\r\n \r\n; this header required to identify ROM "
  },
  {
    "id": "142",
    "title": "Assembler 8048 videopac",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; Hello World for Philips Videopac (Magnavox Odyssey 2)\r\n; by Frog ( https://github.com/petersobolev )\r\n; 25 July 2016\r\n \r\n    cpu\t8048\r\n    org\t400h\r\n \r\n; interrupt vectors\r\n    jmp     02C3h                           ; selectgame (RESET)\r\n    jmp     00"
  },
  {
    "id": "143",
    "title": "Assembler arm",
    "description": "",
    "url": "",
    "language_short": "armasm",
    "code": ".data\r\nmessage:                .asciz \"Hello World\\n\"\r\n \r\n.text\r\n.global main\r\nmain:\r\n    mov r0, #1          @ file descriptor 1\r\n    ldr r1, =message    @ load address of message\r\n    mov r7, #4          @ system call write\r\n    swi #0              @ di"
  },
  {
    "id": "144",
    "title": "Assembler ARM aarch64",
    "description": "",
    "url": "",
    "language_short": "",
    "code": ".data\r\n\r\nmsg:\r\n    .ascii        \"Hello World\\n\"\r\nlen = . - msg\r\n\r\n.text\r\n\r\n.globl _start\r\n_start:\r\n    mov     x0, #1\r\n    ldr     x1, =msg\r\n    ldr     x2, =len\r\n    mov     w8, #64\r\n    svc     #0\r\n\r\n    mov     x0, #0\r\n    mov     w8, #93\r\n    svc     #0"
  },
  {
    "id": "145",
    "title": "Assembler Atari 2600",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ";\r\n; hello.asm\r\n;\r\n; A \"Hello, World!\" which illustrates an Atari 2600 programming\r\n; introduction talk (slides at http://slideshare.net/chesterbr).\r\n;\r\n; This is free software (see license below). Build it with DASM\r\n; (http://dasm-dillon.sourceforge.net"
  },
  {
    "id": "146",
    "title": "Assembler Bootsect",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "[ORG\t0x7C00]\r\n \r\n    mov\tsi,HelloWorld\r\n    call\tprint_string\r\n \r\n    jmp\t$$\r\n    \r\n    HelloWorld\tdb\t\"Hello world!\",0xD,0xA,0\r\n    \r\nprint_string:\r\n    mov\tah,0xE\r\n.repeat:\r\n    lodsb\r\n    cmp\tal,0\r\n    je\t.done\r\n    int\t0x10\r\n    jmp\t.repeat\r\n.done:\r\n   "
  },
  {
    "id": "147",
    "title": "Assembler DCPU16",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ";;;;;;;;;;;;;;;;;;;\r\njsr init_devices\r\njsr Hello_World\r\nset PC,end\r\n;;;;;;;;;;;;;;;;;;;\r\n:dev_screen   dat 0\r\n:device_count dat 0\r\n;;;;;;;;;;;;;;;;;;;\r\n:find_devices\r\nhwn [device_count]\r\nset I,0\r\n:find_devices_loop\r\nhwq i\r\nife A,0xf615\r\n    set [dev_scree"
  },
  {
    "id": "148",
    "title": "Assembler FASM DOS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "format MZ\r\n \r\nentry .code: start\r\n \r\nsegment .code\r\nstart:\r\n    mov ax, .data ; put data segment into ax\r\n    mov ds, ax    ; there, I setup the DS for you\r\n    mov dx, msg   ; now I give you the offset in DX. DS:DX now completed.\r\n    mov ah, 9h\r\n    int"
  },
  {
    "id": "149",
    "title": "Assembler hla",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "program HelloWorld;\r\n \r\n#include( \"stdlib.hhf\" );\r\n \r\nbegin HelloWorld;\r\n    stdout.put( \"Hello, world!\", nl );\r\nend HelloWorld;"
  },
  {
    "id": "150",
    "title": "Assembler HP85",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "010 ! Hello world in Assembler for the HP-85\r\n020         NAM HELLO\r\n030         DEF RUNTIM\r\n040         DEF TOKENS\r\n050         DEF PARSE\r\n060         DEF ERMSG\r\n070         DEF INIT\r\n100 PARSE   BYT 0,0\r\n110 RUNTIM  BYT 0,0,377,377\r\n120 TOKENS  BYT 377\r\n130 ERMSG   BYT 377\r\n140 !\r\n150 INIT    LDM R26,=MSG\r\n160         ADMD R26,=BINTAB\r\n170         LDM R36,=12D,0\r\n180         JSB =OUTSTR\r\n190         RTN\r\n200 MSG     ASC \"Hello World\"\r\n210 BINTAB  DAD 101233\r\n220 OUTSTR  DAD 35052\r\n300         FIN"
  },
  {
    "id": "151",
    "title": "Assembler IBM360",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "        LA    1,MSGAREA     Point Register 1 to message area\r\n        SVC   35            Invoke SVC 35 (Write to Operator) \r\n        BR    14            Return\r\nMSGAREA EQU   *             Message Area\r\n        DC    AL2(19)       Total area length = 19 "
  },
  {
    "id": "152",
    "title": "Assembler Intel",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; hello_world.asm intel \r\n.model small\r\n.stack 100h\r\n.data\r\nmsg db \"Hello World!\",'$$'\r\n.code\r\nmain proc\r\n        mov ax,@data\r\n        mov ds, ax\r\n \r\n; hello-world is there \r\n        mov dx,offset msg\r\n        mov ah,09\r\n        int 21h\r\n \r\n        mov ax"
  },
  {
    "id": "153",
    "title": "Assembler lc-3 (Assembler lc3)",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "\t\t\t.ORIG x3000\r\n \r\n            LEA R0, HELLOWORLD\r\n            PUTS\r\n    \r\nHELLOWORLD\t.STRINGZ \"Hello world!\\n\""
  },
  {
    "id": "154",
    "title": "Assembler m68000 amigaos",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; \"Hello World\" in Motorola 68000 machine language, for AmigaOS\r\n \r\nExecBase     = 4\r\nOpenLibrary  = -552\r\nCloseLibrary = -414\r\nPutStr       = -948\r\n \r\n    section \"main\", code\r\n \r\n    ; open \"dos.library\"\r\n \r\n    move.l\tExecBase, a6\r\n    lea\tlib, a1\r\n   "
  },
  {
    "id": "155",
    "title": "Assembler MASM DOS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; 16 bit dos assembly\r\n.model small\r\n.stack\r\n.data\r\n    message   db \"Hello world!\", \"$$\"\r\n.code\r\n    main    proc\r\n        mov   ax,seg message\r\n        mov   ds,ax\r\n        mov   ah,09\r\n        lea   dx,message\r\n        int   21h\r\n        \r\n        mov  "
  },
  {
    "id": "156",
    "title": "Assembler MASM Win32",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; ---------------------------------------------\r\n; Hello World for Win32 Intel x86 Assembly\r\n;\r\n; by fruel (https://github.com/fruel)\r\n; 13 June 2016\r\n; ---------------------------------------------\r\n \r\n.386\r\n.model flat,stdcall\r\n.stack 4096\r\n \r\nEXTRN Exi"
  },
  {
    "id": "157",
    "title": "Assembler MASM Win64",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "; ---------------------------------------------\r\n; Hello World for Win64 Intel x64 Assembly\r\n;\r\n; by fruel (https://github.com/fruel)\r\n; 13 June 2016\r\n; ---------------------------------------------\r\n \r\nGetStdHandle PROTO\r\nExitProcess PROTO\r\nWriteConsoleA"
  },
  {
    "id": "158",
    "title": "Assembler MIPS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": ".data\r\n    hw:        .asciiz        \"Hello, World!\"\r\n.text\r\nmain:\r\n    la $$a0, hw           #load the address of hw into $$a0\r\n    li $$v0, 4            #load 4 into $$v0\r\n    syscall              #perform the print_string syscall\r\n    li $$v0, 10           "
  },
  {
    "id": "159",
    "title": "Assembler MMIX",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "t\tIS\t$$255\r\n    LOC\tData_Segment\r\n    GREG\t@\r\nString\tBYTE\t\"Hello World\",#a,0\r\n \r\n    LOC\t#100\r\nMain\tLDA\tt,String\r\n    TRAP\t0,Fputs,StdOut\r\n    TRAP\t0,Halt,0"
  },
  {
    "id": "160",
    "title": "Assembler NASM FreeBSD",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "section\t.text\r\n    global _start\t\t\t;must be declared for linker (ld)\r\n_syscall:\t\t\r\n    int\t0x80\t\t;system call\r\n    ret\r\n_start:\t\t\t\t;tell linker entry point\r\n \r\n    push\tdword len\t;message length\r\n    push\tdword msg\t;message to write\r\n    push\tdword 1\t\t;fi"
  },
  {
    "id": "161",
    "title": "Assembler NASM Linux",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "section\t.text\r\n    global _start\t\t\t;must be declared for linker (ld)\r\n_start:\t\t\t\t\t;tell linker entry point\r\n \r\n    xor\tebx,ebx \t;ebx=0\r\n    mov\tecx,msg\t\t;address of message to write\r\n    lea\tedx,[ebx+len]\t;message length\r\n    lea\teax,[ebx+4]\t;system call "
  },
  {
    "id": "162",
    "title": "Assembler NASM Linux64",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "section\t.text\r\n    global _start\t\t\t;must be declared for linker (ld)\r\n_start:\t\t\t\t\t;tell linker entry point\r\n \r\n    xor\teax,eax\t\t;eax:=0\r\n    lea\tedx,[rax+len]\t;message length\r\n    mov\tal,1\t\t;system call number (sys_write)\r\n    mov\tesi,msg\t\t;message to wri"
  },
  {
    "id": "163",
    "title": "Assembler NASM Macho64",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "global start\r\n \r\nsection .text\r\nstart:\r\n    mov         rax, 0x2000004  ; write\r\n    mov         rdi, 1          ; stdout\r\n    mov         rsi, msg\r\n    mov         rdx, msg.len\r\n    syscall\r\n \r\n    mov         rax, 0x2000001  ; exit\r\n    mov         rdi,"
  },
  {
    "id": "164",
    "title": "Assembler NASM Win32",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "BITS\t32\r\nglobal\t_main\r\nextern\t_printf\r\nsection\t.text\r\n    push\tmsg\r\n    call\t_printf\r\n    add\t\tesp,4\r\n    ret\r\nsection\t.data\r\n    msg:\tdb\t\"Hello world\",0Ah,0"
  },
  {
    "id": "165",
    "title": "Assembler pdp10 midas",
    "description": "",
    "url": "",
    "language_short": "",
    "code": " TITLE Hello World\r\n\r\nA==1\r\nB==2\r\nTYO==1\r\n\r\nSTART: .OPEN TYO,[.UAO,,'TTY]\r\n .LOSE\r\n MOVE A,[440700,,HELLO]\r\nLOOP: ILDB B,A\r\n JUMPE B,[.LOGOUT 1,]\r\n .IOT TYO,B\r\n JRST LOOP\r\n\r\nHELLO: ASCIZ /Hello World/\r\n\r\n END START"
  },
  {
    "id": "166",
    "title": "Assembler pdp11 palx",
    "description": "",
    "url": "",
    "language_short": "",
    "code": " .TITLE Hello World\r\n\r\nR0=%0\r\nR1=%1\r\nTPS==177564\r\nTPB==177566\r\n\r\n .=400\r\n\r\nSTART: MOV #1,@#TPS\r\n MOV #HELLO,R0\r\nLOOP: TSTB @#TPS\r\n BPL LOOP\r\n MOVB (R0)+,R1\r\n BEQ STOP\r\n MOVB R1,@#TPB\r\n BR LOOP\r\n\r\nSTOP: HALT\r\n\r\nHELLO: .ASCIZ /Hello World/\r\n\r\n .END START"
  },
  {
    "id": "167",
    "title": "Assembler TASM DOS",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "IDEAL\r\nMODEL SMALL\r\nSTACK 100h\r\n \r\nDATASEG\r\nmsg\t\t\tdb \"Hello World!\", 0dh, 0ah, \"$$\"\r\n \r\nCODESEG\r\nstart:\r\n    mov\t\tax, @data\r\n    mov\t\tds, ax\r\n    \r\n    mov\t\tdx, offset msg\r\n    mov\t\tah, 9\r\n    int\t\t21h\r\n    \r\n    mov\t\tah, 4ch\r\n    int\t\t21h\r\n \r\nend start"
  },
  {
    "id": "168",
    "title": "Assembler tms9900 ti99 4a",
    "description": "",
    "url": "",
    "language_short": "x86asm",
    "code": "* Hello World for TI-99/4a computer with TMS9900 CPU\r\n* by Frog ( http://frog.enlight.ru )\r\n* 15 April 2016\r\n*\r\n****************************************************************************\r\n \r\n        DEF     START\r\n \r\nWRKSP   EQU     >8300\r\n \r\nVDPWD   EQ"
  },
  {
    "id": "169",
    "title": "Assembler Vax Ultrix",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": ".data\r\nhw:\r\n    .ascii \"Hello World!\\12\"\r\n.text\r\n    .align 1\r\n.globl _main\r\n_main:\r\n    .word 0\r\n    pushl $$13\r\n    pushab hw\r\n    pushl $$1\r\n    calls $$3,_write\r\n    ret"
  },
  {
    "id": "170",
    "title": "Assembler Z80 Knightos",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "#include \"kernel.inc\"\r\n    .db \"KEXC\"\r\n    .db KEXC_ENTRY_POINT\r\n    .dw start\r\nstart:\r\n    pcall(getLcdLock)\r\n \r\n    pcall(allocScreenBuffer)\r\n    pcall(clearScreen)\r\n \r\n    kld(hl, message)\r\n    ld de, 0\r\n    pcall(drawStr)\r\n \r\n    jr $$ ; Loop forever\r\n"
  },
  {
    "id": "171",
    "title": "Assembler Z80 TI83calculator",
    "description": "TI-BASIC 83,TI-BASIC Z80 or simply TI-BASIC, is the built-in programming language for the Texas Instruments programmable calculators in the TI-83 series. Calculators that implement TI-BASIC have a built in editor for writing programs. While the considerably faster Z80 assembly language:120 is supported for the calculators, TI-BASIC's in-calculator editor and more user friendly syntax make it easier to use. TI-BASIC is interpreted.",
    "url": "https://en.wikipedia.org/wiki/TI-BASIC_83",
    "language_short": "mipsasm",
    "code": ".NOLIST\r\n#define   EQU   .equ\r\n#define   equ   .equ\r\n#define   END   .end\r\n#define   end   .end\r\n#include \"ti83plus.inc\"\r\n.LIST\r\n        .org 9D93h\r\n        .db $$BB,$$6D\r\n        ld a,0\r\n        ld (CURCOL),a\r\n        ld (CURROW),a\r\n        ld hl,text\r\n   "
  },
  {
    "id": "172",
    "title": "Assembler Z80 zxspectrum",
    "description": "",
    "url": "",
    "language_short": "mipsasm",
    "code": "org $$6000\r\n    ld bc, STRING\r\n    ld de, SCR\r\n \r\nLOOP\r\n    ld a, (bc)\r\n    cp 0\r\n    jr z, EXIT\r\n    rst $$10\r\n    inc bc\r\n    inc de\r\n    jr LOOP\r\n \r\nEXIT\r\n    ret\r\n    \r\nSCR equ 16384\r\n \r\nSTRING\r\n    defb \"Hello World!\"\r\n    defb 13, 0"
  },
  {
    "id": "173",
    "title": "Assembly language",
    "description": "Assembly language is a Harvard-architectured computer machine code invented by User:A. It has all the basic features of a modern computer. The machine code is inspired by Little Man Computer. The machine code is extending.",
    "url": "https://esolangs.org/wiki/Assembly_language",
    "language_short": "mipsasm",
    "code": "DAT 01 48\r\nMOV 00 01\r\nDAT 01 65\r\nMOV 00 01\r\nDAT 01 6C\r\nMOV 00 01\r\nMOV 00 01\r\nDAT 02 6F\r\nMOV 00 02\r\nDAT 01 20\r\nMOV 00 01\r\nDAT 01 77\r\nMOV 00 01\r\nMOV 00 02\r\nDAT 01 72\r\nMOV 00 01\r\nDAT 01 6C\r\nMOV 00 01\r\nDAT 01 64\r\nMOV 00 01"
  },
  {
    "id": "174",
    "title": "Astridec",
    "description": "Astridec is a programming language created by User:PixelatedStarfish. It is designed for Starstuff, such that any sequence of characters can be converted to runnable Astridec code. Astridec is designed to be extremely simple, with 10 instructions and virtually no errors.",
    "url": "https://esolangs.org/wiki/Astridec",
    "language_short": "",
    "code": "11111111111111111111111111111111111111111111111111111111111111111111111183                *H*\r\n11111111111111111111111111111111111111111111111111111111111111111111183                   *E*\r\n111111111111111111111111111111111111111111111111111111111111111111111111111183            *L*\r\n111111111111111111111111111111111111111111111111111111111111111111111111111183            *L*\r\n111111111111111111111111111111111111111111111111111111111111111111111111111111183         *O*\r\n1111111111111111111111111111111183                                                        * * \r\n11111111111111111111111111111111111111111111111111111111111111111111111111111111111111183 *W*\r\n111111111111111111111111111111111111111111111111111111111111111111111111111111183         *O*\r\n111111111111111111111111111111111111111111111111111111111111111111111111111111111183      *R*\r\n111111111111111111111111111111111111111111111111111111111111111111111111111183            *L*\r\n1111111111111111111111111111111111111111111111111111111111111111111183                    *D*\r\n*the newlines are not required*"
  },
  {
    "id": "175",
    "title": "ATS2",
    "description": "ATS (Applied Type System) is a programming language designed to unify programming with formal specification. ATS has support for combining theorem proving with practical programming through the use of advanced type systems. A past version of The Computer Language Benchmarks Game has demonstrated that the performance of ATS is comparable to that of the C and C++ programming languages.",
    "url": "https://en.wikipedia.org/wiki/ATS_(programming_language)",
    "language_short": "",
    "code": "implement main0 () = println! \"Hello World\""
  },
  {
    "id": "176",
    "title": "Attache",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Print[\"Hello, World!\"]"
  },
  {
    "id": "177",
    "title": "Aubergine",
    "description": "Aubergine is a minimalist language with 4 instructions, 4 variables, and a single constant, created by User:Boily in 2008.",
    "url": "https://esolangs.org/wiki/Aubergine",
    "language_short": "brainfuck",
    "code": "=aA-a1=oA=bi+b1-Ab-bb:bA+B1=iBGolf by Quintopia\r\n!dlroW ,olleH"
  },
  {
    "id": "178",
    "title": "Auo",
    "description": "Auo by User:XFire35 mixes ideas and changes some conventions, and may be quite logically random in its implementation. It utilises a stack which is symbolised by the '@' sign within the language. It also uses strict typing, so there is no automatic conversion of strings into numbers. Auo strictly uses lines as the ending point of an expression or command, therefore leaking onto another line will result in the new line being evaluated separately from its parent. Auo has three stacks, a normal stack, a variable stack and the jump stack.",
    "url": "https://esolangs.org/wiki/Auo",
    "language_short": "c-like",
    "code": "i.o:['Hello World!']"
  },
  {
    "id": "179",
    "title": "AutoHotKey",
    "description": "AutoHotkey is a free, open-source custom scripting language for Microsoft Windows, initially aimed at providing easy keyboard shortcuts or hotkeys, fast macro-creation and software automation that allows users of most levels of computer skill to automate repetitive tasks in any Windows application. User interfaces can easily be extended or modified by AutoHotkey (for example, overriding the default Windows control key commands with their Emacs equivalents). The AutoHotkey installation includes its own extensive help file, and web-based documentation is also available.",
    "url": "https://en.wikipedia.org/wiki/AutoHotkey",
    "language_short": "autohotkey",
    "code": "MsgBox, Hello World!"
  },
  {
    "id": "180",
    "title": "AutoIt",
    "description": "AutoIt /ɔːtoʊ ɪt/ is a freeware programming language for Microsoft Windows. In its earliest release, it was primarily intended to create automation scripts (sometimes called macros) for Microsoft Windows programs but has since grown to include enhancements in both programming language design and overall functionality.",
    "url": "https://en.wikipedia.org/wiki/AutoIt",
    "language_short": "autoit",
    "code": "MsgBox(0, \"Message Box\", \"Hello World!\")"
  },
  {
    "id": "181",
    "title": "AutoLISP",
    "description": "AutoLISP is a dialect of the programming language Lisp built specifically for use with the full version of AutoCAD and its derivatives, which include AutoCAD Map 3D, AutoCAD Architecture and AutoCAD Mechanical. Neither the application programming interface (API) nor the interpreter to execute AutoLISP code are included in the AutoCAD LT product line.",
    "url": "https://en.wikipedia.org/wiki/AutoLISP",
    "language_short": "",
    "code": "(alert \"Hello World\")"
  },
  {
    "id": "182",
    "title": "AviSynth",
    "description": "AviSynth is a frameserver program for Microsoft Windows developed by Ben Rudiak-Gould, Edwin van Eggelen, Klaus Post, Richard Berg, Ian Brabham and others. It is free software under GNU GPL license.",
    "url": "https://en.wikipedia.org/wiki/AviSynth",
    "language_short": "",
    "code": "MessageClip(\"Hello World\")"
  },
  {
    "id": "183",
    "title": "Awful",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "#!/usr/bin/awful\r\n \r\n:writeln s\"Hello world!\""
  },
  {
    "id": "184",
    "title": "AWK",
    "description": "AWK (awk) is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool. Like sed and grep, it is a filter, and is a standard feature of most Unix-like operating systems.",
    "url": "https://en.wikipedia.org/wiki/AWK",
    "language_short": "awk",
    "code": "# awk -f awk.awk\r\nBEGIN { print \"Hello World\" }"
  },
  {
    "id": "185",
    "title": "Axe",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Disp \"Hello World\",i"
  },
  {
    "id": "186",
    "title": "B",
    "description": "B is a programming language developed at Bell Labs circa 1969. It was developed by Ken Thompson and Dennis Ritchie.",
    "url": "https://en.wikipedia.org/wiki/B_(programming_language)",
    "language_short": "c-like",
    "code": "/* Hello World in B */\r\n \r\nmain() {\r\n    extern a, b, c;\r\n        putchar (a); putchar (b); putchar (c); putchar ('!*n');\r\n}\r\n \r\na 'hell' ;\r\nb 'o, w' ;\r\nc 'orld' ;"
  },
  {
    "id": "187",
    "title": "Babalang",
    "description": "Babalang is a thematic, Turing-complete esoteric programming language inspired by the rule system within the (also Turing-complete) indie game Baba Is You. The language is based around statements (akin to rules in Baba Is You), each with a subject, verb, one or more targets, and an optional condition. The language supports variables, loops, functions, structs, and basic IO operations. Babalang was written in March of 2020 by User:RocketRace, and is currently in version 1.1.1.",
    "url": "https://esolangs.org/wiki/Babalang",
    "language_short": "",
    "code": "// Initialize constants\r\n// Even though these are numbers, the interpreter considers them variables.\r\n// This is important to keep in mind.\r\n1 is you and move 2 is 1 and 1 4 is 2 and 2 8 is 4 and 4 \r\n16 is 8 and 8 32 is 16 and 16 64 is 32 and 32\r\n\r\n// Initialize a stack\r\nhello_world is group\r\n\r\n// Initialize character with value \"H\" (decimal 72)\r\nH is 64 and 8\r\n\r\n// Initialize the rest of the characters\r\ne is 64 and 32 and 4 and 1\r\nl is 64 and 32 and 8 and 4\r\n// `X and not Y` stands for `X + (-Y)`\r\no is 64 and 32 and 16 and not 1\r\ncomma is 32 and 8 and 4\r\nsp is 32\r\nw is 64 and 32 and 16 and 8 and not 1\r\nr is 64 and 32 and 16 and 2\r\nd is 64 and 32 and 4\r\nexcl is 32 and 1\r\nnewline is 8 and 2\r\n\r\n// Push the appropriate characters to the stack\r\nhello_world has H and e and l and l and o and comma and sp \r\n    and w and o and r and l and d and excl and newline\r\n\r\n// Print the contents of the stack\r\nhello_world is text"
  },
  {
    "id": "188",
    "title": "BackFlip",
    "description": "BackFlip is a 2-D reversible programming language created by User:ais523 in 2006.",
    "url": "https://esolangs.org/wiki/BackFlip",
    "language_short": "brainfuck",
    "code": "\\72N101N108N108N111N44N32N119N111N114N108N100N33N10N\r\n\\///////////////////////////////////////////////////"
  },
  {
    "id": "189",
    "title": "Backshift",
    "description": "Backshift is another sorting algorithm that aims to implement sorting in clean code invented by User:A. It is less efficient than any other sorting algorithm; in its worst case, its algorithmic complexity is O(∞). However, it was best known as an esoteric programming language after people started to abuse the buggy algorithm to write useful programs.",
    "url": "https://esolangs.org/wiki/Backshift",
    "language_short": "plaintext",
    "code": "Hello, World"
  },
  {
    "id": "190",
    "title": "BAIK",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "tulis \"Hello World\""
  },
  {
    "id": "191",
    "title": "Ballerina",
    "description": "Ballerina is an open source general-purpose programming language and platform designed by WSO2 for cloud-era application programmers. It is easy to write and modify and is suitable for application programmers.",
    "url": "https://en.wikipedia.org/wiki/Ballerina_(programming_language)",
    "language_short": "",
    "code": "import ballerina/io;\r\n\r\npublic function main() {\r\n    io:println(\"Hello World\");"
  },
  {
    "id": "192",
    "title": "BAM128",
    "description": "BAM128 is an esoteric programming language invented by Simone Russo (User:Eafkuor). It consists of a set of instructions to manage two pointers and a square matrix M of 128x128 elements. The two pointers (from now on called P1 and P2) contain the row and column, respectively, of the matrix element we are working on. We can modify just one of these pointers at a time. Both P1 and P2 and every matrix element can assume values in the range [0, 127].",
    "url": "https://esolangs.org/wiki/BAM128",
    "language_short": "brainfuck",
    "code": "xhhhhooooooooohhhhhhxooooooooxooooooxjjjxhoooohhhxhohhhhhhhxhhhhjjjhhhxhhhhooooooooohhhhhhxjjjxxjjjjjjjxjhhhhxjhhhhhhhhjjjhh"
  },
  {
    "id": "193",
    "title": "Barely",
    "description": "Barely is an esoteric programming language created by Jeffry Johnston in 2006, with the goal of having as small a turing complete interpreter as possible. The interpreter is in MS-DOS COM binary format and is 59 bytes in size. It was written using DEBUG, so the source listing is made from disassemblies at different points in the program.",
    "url": "https://esolangs.org/wiki/Barely",
    "language_short": "",
    "code": "]xhhhhooooooooohhhhhhxooooooooxooooooxjjjxhoooohhhxhohhhhhhhxhhhhjjjhhhxhhhhooooooooohhhhhhxjjjxxjjjjjjjxjhhhhxjhhhhhhhhjjjhh~"
  },
  {
    "id": "194",
    "title": "Bash",
    "description": "Bash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. First released in 1989, it has been used as the default login shell for most Linux distributions. A version is also available for Windows 10 via the Windows Subsystem for Linux. It is also the default user shell in Solaris 11.",
    "url": "https://en.wikipedia.org/wiki/Bash_(Unix_shell)",
    "language_short": "bash",
    "code": "#!/bin/bash\r\necho \"Hello World!\""
  },
  {
    "id": "195",
    "title": "BASIC",
    "description": "BASIC (Beginners' All-purpose Symbolic Instruction Code) is a family of general-purpose, high-level programming languages whose design philosophy emphasizes ease of use. The original version was designed by John G. Kemeny and Thomas E. Kurtz and released at Dartmouth College in 1964.",
    "url": "https://en.wikipedia.org/wiki/BASIC",
    "language_short": "basic",
    "code": "10 REM Hello World in BASIC\r\n20 PRINT \"Hello World\""
  },
  {
    "id": "196",
    "title": "BASIC 256",
    "description": "Basic-256 is a project to learn the basics of computer programming. The project started in 2007 inspired by the article “Why Johnny can't code” by David Brin, which also inspired the creation of Microsoft Small Basic. Its main focus is to provide a simple and comprehensive environment for middle/high school students to learn the basics of computer programming.",
    "url": "https://en.wikipedia.org/wiki/Basic-256",
    "language_short": "basic",
    "code": "Print \"Hello World\""
  },
  {
    "id": "197",
    "title": "batch to memory",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "@echo off\r\necho Hello World"
  },
  {
    "id": "198",
    "title": "Batsh",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "@echo off\r\necho Hello, World!\r\npause"
  },
  {
    "id": "199",
    "title": "Battlestar",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!/usr/bin/bts\r\nconst hello = \"Hello, world!\\n\"\r\nprint(hello)"
  },
  {
    "id": "200",
    "title": "Bauberqueue",
    "description": "Bauberqueue is a queue-based language created by User:Quintopia in 2017. It takes the data storage and syntax principles of Aubergine but replaces the single tape with a list of queues. It replaces Aubergine's conditional jump with a Resplicate-like subqueue duplication command.",
    "url": "https://esolangs.org/wiki/Bauberqueue",
    "language_short": "brainfuck",
    "code": "=b1=bB\\x11=a1=aA\\x19+aB-b1iia=a1+a1=oA=a1=aA\\x19+aB-b1iia\r\nHello, World!\\n\r\n!"
  },
  {
    "id": "201",
    "title": "BC",
    "description": "bc, for basic calculator (often referred to as bench calculator), is \"an arbitrary-precision calculator language\" with syntax similar to the C programming language. bc is typically used as either a mathematical scripting language or as an interactive mathematical shell.",
    "url": "https://en.wikipedia.org/wiki/Bc_(programming_language)",
    "language_short": "",
    "code": "\"Hello World\""
  },
  {
    "id": "202",
    "title": "BC GNU",
    "description": "bc is a language that supports arbitrary precision numbers with interactive execution of statements. There are some similarities in the syntax to the C programming language. A standard math library is available by command line option. If requested, the math library is defined before processing any files. bc starts by processing code from all the files listed on the command line in the order listed. After all files have been processed, bc reads from the standard input. All code is executed as it is read. (If a file contains a command to halt the processor, bc will never read from the standard input.)",
    "url": "https://www.gnu.org/software/bc/manual/html_mono/bc.html",
    "language_short": "",
    "code": "print \"Hello World\"\r\nquit"
  },
  {
    "id": "203",
    "title": "BCDFuck",
    "description": "BCDFuck takes a stream of bytes and reads each byte as two BCD-encoded 4-bit words. Like other Brainfuck variants, BCDFuck operates on an array of cells, which in this case are 4 bits wide. The digits 0-9 are entered directly into the cells while the six 'wasted' states of 4-bit BCD encoding are translated into brainfuck-like instructions that act on the aforementioned array. Since any 4-bit word is a valid BCDFuck instruction, it would follow that all cells can be executed (as long as potential problems like unbalanced brackets can be ignored).",
    "url": "https://esolangs.org/wiki/BCDFuck",
    "language_short": "brainfuck",
    "code": "4A E4 AE 7A 7A E7 A8 AE 1A E6 AE 5A 5A E6 AE 5A 5A E4 A5 AE 3A E0 EA 3A\r\nE2 AE 7A 8A E4 A5 AE 8A E5 A6 AE 4A E6 AE 5A 5A E7 A7 AE 7A 7A E7 A8 AE\r\n0E A4 A5 AE"
  },
  {
    "id": "204",
    "title": "BCPL (Basic Combined Programming Language)",
    "description": "BCPL (\"Basic Combined Programming Language\") is a procedural, imperative, and structured programming language. Originally intended for writing compilers for other languages, BCPL is no longer in common use. However, its influence is still felt because a stripped down and syntactically changed version of BCPL, called B, was the language on which the C programming language was based.",
    "url": "https://en.wikipedia.org/wiki/BCPL",
    "language_short": "ruby",
    "code": "GET \"LIBHDR\"\r\n \r\nLET START() BE\r\n$$(\r\n    WRITES(\"Hello, world!*N\")\r\n$$)"
  },
  {
    "id": "205",
    "title": "Beanshell",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print (\"Hello World\");"
  },
  {
    "id": "206",
    "title": "Beatnik",
    "description": "Beatnik is a stack-based esoteric programming language created by Cliff L. Biffle. The code looks like English-language text (typically with sentences that don't make a lot of sense). The words are scored according to the rules of the Scrabble board game, and the score is used to determine the operation.",
    "url": "https://esolangs.org/wiki/Beatnik",
    "language_short": "plaintext",
    "code": "Soars, larkspurs, rains.\nIndistinctness.\nMario snarl (nurses, natures, rules...) sensuously retries goal.\nAgribusinesses' costs par lain ropes (mopes) autos' cores.\nTuner ambitiousness.\nFlit.\nDour entombment.\nLegals' saner kinking lapse.\nNests glint.\nDread, tied futures, dourer usual tumor grunts alter atonal\n  garb tries shouldered coins.\nTaste a vast lustiness.\nStile stuns gad subgroup gram lanes.\nDraftee insurer road: cuckold blunt, strut sunnier.\nRely enure pantheism: arty gain groups (genies, pan) titters, tattles, nears.\nBluffer tapes?  Idle diatom stooge!\nFeted antes anklets ague?  Remit goiter gout!\nDoubtless teared toed alohas will dull gangs' aerials' tails' sluices;\nGusset ends!  Gawkier halo!\n\nEnter abstruse rested loser beer guy louts.\nCurtain roams lasso weir lupus stunt.\nTruant bears animate talon.  Entire torte originally timer.\nRedo stilt gobs.\n\nUtter centaurs;\nUrgent stars;\nUsurers (dilute);\nNoses;\nBones;\nBrig sonar graders;\nUtensil silts;\nLazies.\nFret arson veterinary rows.\n\nAtlas grunted: \"Pates, slues, sulfuric manor liaising tines,\n  trailers, rep... unfair!  Instant snots!\"\n\nSled rested until eatery fail.\nErgs fortitude\n  Indent spotter\nEuros enter egg.\nCurious tenures.\nTorus cutlasses.\nSarong torso earns cruel lags it reeled.\n\nEngineer: \"Erase handbag -- unite ratification!\"\n\noaring oaten donkeys unsold, surer rapid saltest tags\nBUTTERED TIBIA LUGS REWIRING TOILETS\nanion festers raring edit epilogues.\nDIRGE ROTOR.\nlinnet oaring.\nGORE BOOTIES.\nIroned goon lists tallest sublets --\nRiots,\nRaucous onset.\n\nIgnobly, runners' diet anguishes sunrise loner.\nErode mob, slier switcher!\nLoaners stilt drudge pearl atoll, risking hats' ends.\n\nRebind sitters.\n\nToga epistles -- crud lard.  (Pager purse dons souls.)\n\nglob title a curio hired rites shed suds lade grease strut arctic revs toad\nunless idlers rind stilt region land GERMICIDES SULTANA GUTS gill siting leans\nnice spurs\ntests gloves\nroused asp\n\nHoles!  Moles!  (Sores!)\nHygienists!  Scars!  (Asses!)\nSmells spell rares.\n\nCubs instant sing in parse goodies.\nRosin.  Unhelpful sisal acres.  Slope told.\nMALENESS PASTA LAB.  \"Infirmary vine,\" rang illiterates (beans).\nRosin sours, insults truss abalones, nailed rules, helical atlases.\nDear remodeling stings mar rents.\nSunless shiner orb (silly idol.)\nClarity disses senna.\nVagabonds sauted; sloes performed gelds.\nAlter post radial lip sectioning gums.\nSaint Towellings.\nLarger aeons telephone stolid char, pal!\nBoats Dean forsook, rosters, tunas, terrariums -- united, traced.\nNude pagoda careens."
  },
  {
    "id": "207",
    "title": "Beef",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "using System;\r\n\r\nnamespace HelloWorld\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            Console.WriteLine(\"Hello World\");\r\n        }\r\n    }\r\n}"
  },
  {
    "id": "208",
    "title": "befunge",
    "description": "Befunge is a two-dimensional esoteric programming language invented in 1993 by Chris Pressey with the goal of being as difficult to compile as possible. Code is laid out on a two-dimensional grid of instructions, and execution can proceed in any direction of that grid.",
    "url": "https://esolangs.org/wiki/Befunge",
    "language_short": "bash",
    "code": ">\"dlroW olleH\",,,,,,,,,,,@"
  },
  {
    "id": "209",
    "title": "Befunk",
    "description": "Befunk is a Fungeoid created by TieSoul in 2014.",
    "url": "https://esolangs.org/wiki/Befunk",
    "language_short": "",
    "code": "[code]x = 0, y = 0, rule = LifeColorful\r\nBQMDLROWFCO2LEHQJPNDIX!\r\n[[ COLOR 0 255 255 255 ]]\r\n[[ COLOR 2 0 0 0 ]]\r\n[[ COLOR 3 0 144 144 ]]\r\n[[ COLOR 4 171 0 0 ]]\r\n[[ COLOR 5 171 0 251 ]]\r\n[[ COLOR 6 0 243 192 ]]\r\n[[ COLOR 8 0 127 192 ]]\r\n[[ COLOR 9 0 255 144 ]]\r\n[[ COLOR 10 0 255 0 ]]\r\n[[ COLOR 12 171 0 128 ]]\r\n[[ COLOR 13 0 243 243 ]]\r\n[[ COLOR 14 192 0 0 ]]\r\n[[ COLOR 15 171 171 171 ]]\r\n[[ COLOR 16 171 127 255 ]]\r\n[[ COLOR 17 192 255 216 ]]\r\n[[ COLOR 18 171 171 144 ]]\r\n[[ COLOR 23 171 171 99 ]]\r\n[[ COLOR 24 249 99 249 ]][/code]"
  },
  {
    "id": "210",
    "title": "BennuGD",
    "description": "BennuGD (also referred as Bennu Game Development or Bennu) is a high-level open-source video game development suite, originally created as a Fenix Project fork by Argentinian hacker SpliterGU. It is officially supported for Windows, Linux, GP2X Wiz, GP2X Caanoo and Dingux, but can also be run on multiple other platforms to some extent, including FreeBSD, Mac OS X, iOS, and consoles such as GP2X, Dingoo A320, and Wii. Most recently BennuGD has been ported to Sega Dreamcast and PlayStation 2.",
    "url": "https://en.wikipedia.org/wiki/BennuGD",
    "language_short": "c-like",
    "code": "import \"mod_say\" \r\n \r\nProcess Main()\r\nBegin \r\n    say(\"Hello World!\");\r\nEnd"
  },
  {
    "id": "211",
    "title": "BestFriends.js",
    "description": "BestFriends.js is a two-dimensional esoteric programming language invented in 2006 by David Millar with the goal of creating an esoteric javascript library. A BestFriends.js script is very similar to Brainfuck. It has almost exactly the same commands, except for the addition of a few new ones.",
    "url": "https://esolangs.org/wiki/BestFriends.js",
    "language_short": "javascript",
    "code": "var c = \"+++++ [>+++++<-] > + }|\" +\r\n        \"[<++++>-]<.[>+>+<<-]}{|\" +\r\n        \">++++<---.>..+++.@  {>\";\r\nalert(BF(c,\"input\") + \" world\");"
  },
  {
    "id": "212",
    "title": "beta",
    "description": "BETA is a pure object-oriented language originating within the \"Scandinavian School\" in object-orientation where the first object-oriented language Simula was developed.[1] Among its notable features, it introduced nested classes, and unified classes with procedures into so called patterns.",
    "url": "https://en.wikipedia.org/wiki/BETA_(programming_language)",
    "language_short": "c-like",
    "code": "ORIGIN '~beta/basiclib/betaenv'\r\n-- program: Descriptor --\r\n(* Hello World in BETA *)\r\n(# do 'Hello World' -> putLine #)"
  },
  {
    "id": "213",
    "title": "Betterave",
    "description": "Betterave is a functional programming language created by User:Boily in 2007.",
    "url": "https://esolangs.org/wiki/Betterave",
    "language_short": "gams",
    "code": "$$\"Hello, World!\""
  },
  {
    "id": "214",
    "title": "BFI",
    "description": "BFI is a esoteric programming language invented by User:Morex in 2009, and can be defined as a Brainfuck with procedures and recursion but without square brackets. BFI is the acronym of \"BrainFuck Itself\", as a reference to its recursive nature.",
    "url": "https://esolangs.org/wiki/BFI",
    "language_short": "brainfuck",
    "code": "++}}??{?>++.>+.+++}?..+++.>++.<<+++???.>.+++.------.--------.>+.>.;\r\n>+++}?>++??{>+++>+<<<<-?;\r\n++++"
  },
  {
    "id": "215",
    "title": "Binary lambda calculus (byte oriented) (BLC)",
    "description": "Binary lambda calculus (BLC) is a version of lambda calculus with provisions for binary I/O, a standard binary encoding of lambda terms, and a designated universal machine.",
    "url": "https://esolangs.org/wiki/Binary_lambda_calculus",
    "language_short": "stata",
    "code": "*Hello, world!"
  },
  {
    "id": "216",
    "title": "Binaryfuck",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "000 000 000 000 000 000 000 000 000 000 110 010 000 010 000\r\n000 000 010 000 000 000 000 000 000 000 010 000 000 000 000\r\n000 000 000 000 000 000 011 011 011 011 001 111 010 010 010\r\n000 000 100 010 000 100 000 000 000 000 000 000 000 100 100\r\n000 000 000 100 011 011 000 000 100 010 000 000 000 000 000\r\n000 000 000 000 000 000 000 000 000 000 100 010 100 000 000\r\n000 100 001 001 001 001 001 001 100 001 001 001 001 001 001\r\n001 001 100"
  },
  {
    "id": "217",
    "title": "Binodu",
    "description": "binodu is an esoteric programming language created by asiekierka in August 2011. It operates on the concept of very simple nodes, which can do simple logic operations or trigger different nodes.",
    "url": "https://esolangs.org/wiki/Binodu",
    "language_short": "autohotkey",
    "code": " Automatic Node Hey\n\tCompare\n\tAction\n\t\tOutput False\n\t\tOutput True\n\t\tFire TwoFalse\n\t\tOutput True\n\t\tOutput False\n\t\tFire TwoFalse\n\t\tFire Six\n\t\tOutput False\n\t\tOutput True\n\t\tOutput False\n\t\tOutput True\n\t\tFire L\n\t\tFire L\n\t\tFire Six\n\t\tFire TwoTrue\n\t\tFire TwoTrue\n\t\tFire Two\n\t\tFire TwoTrue\n\t\tFire TwoFalse\n\t\tFire TwoFalse\n\t\tFire TwoTrue\n\t\tFire Two\n\t\tFire Seven\n\t\tFire Seven\n\t\tFire Six\n\t\tFire TwoTrue\n\t\tFire TwoTrue\n\t\tFire Seven\n\t\tFire Two\n\t\tFire L\n\t\tFire Six\n\t\tOutput False\n\t\tOutput True\n\t\tFire TwoFalse\n\t\tFire Two\n\t\tFire TwoFalse\n\t\tFire False\n\t\tFire True\n\t\tStop\nNode Six\n\tCompare\n\tAction\n\t\tOutput False\n\t\tFire TwoTrue\n\t\tOutput False\nNode L\n\tCompare\n\tAction\n\t\tFire Six\n\t\tFire TwoTrue\n\t\tFire TwoFalse\nNode Two\n\tCompare\n\tAction\n\t\tFire TwoFalse\n\t\tOutput True\n\t\tOutput False\nNode Seven\n\tCompare\n\tAction\n\t\tOutput False\n\t\tOutput True\n\t\tFire TwoTrue\nNode TwoTrue\n\tCompare\n\tAction\n\t\tOutput True\n\t\tOutput True\nNode TwoFalse\n\tCompare\n\tAction\n\t\tOutput False\n\t\tOutput False"
  },
  {
    "id": "218",
    "title": "BIRL",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "HORA DO SHOW // main code block\r\n    CE QUER VER ESSA PORRA? (\"Hello, World!\\n\"); // print \"Hello, World!\"\"\r\n    BORA CUMPADE 0; // end function\r\nBIRL"
  },
  {
    "id": "219",
    "title": "BIT",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "LINENUMBERZEROCODEPRINTZEROGOTOONELINENUMBERONECODEPRINTONEGOTOONEZEROLINENUMBE\r\nRONEZEROCODEPRINTZEROGOTOONEONELINENUMBERONEONECODEPRINTZEROGOTOONEZEROZEROLINE\r\nNUMBERONEZEROZEROCODEPRINTONEGOTOONEZEROONELINENUMBERONEZEROONECODEPRINTZEROGOT\r\nOONEONEZEROL"
  },
  {
    "id": "220",
    "title": "BitBitJump",
    "description": "BitBitJump is one of the simplest OISC languages. It allows calculations by only bit copying process without using conventional logic operations like AND, OR, XOR, NAND, or NOT. Its instruction is to copy one bit from one address to another and jump.",
    "url": "https://esolangs.org/wiki/BitBitJump",
    "language_short": "brainfuck",
    "code": "       Z0:0 Z1:0\r\nstart: .deref p X\r\n        .testH X print -1\r\nprint: .out X\r\n        .add p (w+1) p\r\n        0 0 start\r\n        p:H X:0\r\n        H:72 101 108\r\n        108 111 44\r\n        32 87 111\r\n        114 108 100\r\n        33 10 -1\r\n        .include"
  },
  {
    "id": "221",
    "title": "bitch",
    "description": "bitch (alternatively bit**) is a minimalistic language created by User:Helen inspired by User:Arphimigon's BITCHWISE. It has a total of 15 instructions (one of which is no-op) and a (technically) infinite number of instruction characters, as all unrecognised characters are no-ops.",
    "url": "https://esolangs.org/wiki/Bitch",
    "language_short": "brainfuck",
    "code": "#72/#101/#108/#108/#111/#44/#32/#119/#111/#114/#108/#100/#33/\r\n"
  },
  {
    "id": "222",
    "title": "Bitsbox",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "text('Hello World')"
  },
  {
    "id": "223",
    "title": "Bitwise Cyclic Tag (BCT)",
    "description": "Bitwise Cyclic Tag (BCT) is a Turing-complete programming language using only two commands (0 and 1) to operate on a finite data-bitstring extensible without bound on the right. Its extremely simple syntax and semantics make it a useful target for simulation-based proofs of a language's computational class.",
    "url": "https://esolangs.org/wiki/Bitwise_Cyclic_Tag",
    "language_short": "brainfuck",
    "code": "1011101011101010 # H\n00000110000\n1011111010111011 # e\n0000000011\n1011111011111010 # ll\n000000011000\n1011111011111111 # o\n00000000\n1010111011111010 # ,\n000000\n111010101010     # _\n00011000000\n1011101110111111 # W\n00000000\n1011111011111111 # o\n00000000\n1011111110101110 # r\n0000000\n11111011111010   # l\n000\n111010           # d\n000\n101011           # !\n000000000"
  },
  {
    "id": "224",
    "title": "Black",
    "description": "Black is a two-dimensional esoteric programming language created in 2006 by User:ais523. It was inspired by 1L and BackFlip, as an attempt to create a symmetrical Turing-complete language with only one instruction (two counting NOP), that uses code as data (BackFlip-style).",
    "url": "https://esolangs.org/wiki/Black",
    "language_short": "brainfuck",
    "code": "           # #  \n\n                 #\n       #         \n\n              #\n\n\n     #    #    # \n                \n           #    \n              7\n              2\n              N\n              1\n              0\n              1\n              N\n              1\n              0\n              8\n              N\n              1\n              0\n              8\n              N\n              1\n              1\n              1\n              N\n              4\n              4\n              N\n              3\n              2\n              N\n              1\n              1\n              9\n              N\n              1\n              1\n              1\n              N\n              1\n              1\n              4\n              N\n              1\n              0\n              8\n              N\n              1\n              0\n              0\n              N\n              3\n              3\n              N\n              1\n              0\n              N\n              ##"
  },
  {
    "id": "225",
    "title": "BlackRum",
    "description": "",
    "url": "",
    "language_short": "nginx",
    "code": "slur \"Hello World\""
  },
  {
    "id": "226",
    "title": "BLC",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, world"
  },
  {
    "id": "227",
    "title": "Blender",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "import Blender\r\nfrom Blender import Scene, Text3d\r\n\r\ntext = Text3d.New(\"Text\")\r\ntext.setText(\"Hello World\")\r\nScene.GetCurrent().objects.new(text)\r\nBlender.Redraw()"
  },
  {
    "id": "228",
    "title": "blitz3d",
    "description": "Blitz BASIC is the programming language dialect of the first Blitz compilers, devised by New Zealand-based developer Mark Sibly. Being derived from BASIC, Blitz syntax was designed to be easy to pick up for beginners first learning to program. The languages are game-programming oriented but are often found general-purpose enough to be used for most types of application. The Blitz language evolved as new products were released, with recent incarnations offering support for more advanced programming techniques such as object-orientation and multithreading.",
    "url": "https://en.wikipedia.org/wiki/Blitz_BASIC#Blitz3D",
    "language_short": "c-like",
    "code": ";Blitz3D Hello World demo by MANIAK_dobrii\r\nPrint \"Hello world\"\r\nWaitKey\r\nEnd"
  },
  {
    "id": "229",
    "title": "Blood",
    "description": "Blood32 is a language designed to simulate a Turing machine with terse syntax. It is a language designed for experimentation with abstract, low-level computation. Programming in this language is challenging, as it does not feature many of the constructs common to high-level imperative languages, such as functions, variables, and structures.",
    "url": "https://esolangs.org/wiki/Blood32",
    "language_short": "",
    "code": "<a grid of 0 cells>\r\n[0,0]\r\n<set tape to 'HELLO WORLD' with ASCII values in binary (reversed)>\r\nT: 00100010B00110010B01001010B11110010B11101010B000001B11110010B00110010B00110010B10100010B0001001\r\n<note that if the tape input is interrupted by a newline in this source, the newline should be ignored>\r\n{\r\nC()\r\n}"
  },
  {
    "id": "230",
    "title": "Bloop",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "DEFINE PROCEDURE ''HELLO-WORLD'' [N]:\r\nBLOCK 0: BEGIN\r\n     PRINT['Hello World']\r\nBLOCK 0: END.\r\nHELLO-WORLD[1]; "
  },
  {
    "id": "231",
    "title": "blub",
    "description": "Blub is an esoteric programming language designed by User: Benni++. It is almost exactly like Ook, but with following rules:\r\n<br>• It has to be readable for fish\r\n<br>• Fishfood is good",
    "url": "https://esolangs.org/wiki/Blub",
    "language_short": "brainfuck",
    "code": "blub. blub? blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub! blub?\r\nblub? blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub. blub? bl"
  },
  {
    "id": "232",
    "title": "bolgefuck",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "wimpmodesHpsepslpslpsops psWpsopsrpslpsdpH     //hello world without moving pointers in wimpmode"
  },
  {
    "id": "233",
    "title": "boo",
    "description": "Boo is an object-oriented, statically typed, general-purpose programming language that seeks to make use of the Common Language Infrastructure's support for Unicode, internationalization, and web applications, while using a Python-inspired syntax and a special focus on language and compiler extensibility. Some features of note include type inference, generators, multimethods, optional duck typing, macros, true closures, currying, and first-class functions.",
    "url": "https://en.wikipedia.org/wiki/Boo_(programming_language)",
    "language_short": "c-like",
    "code": "print \"Hello World\""
  },
  {
    "id": "234",
    "title": "Boolet",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(Hello World)"
  },
  {
    "id": "235",
    "title": "Boolfuck",
    "description": "Boolfuck is an esoteric programming language based on Brainfuck, but operating only on bits. It does, however, provide input and output.",
    "url": "https://esolangs.org/wiki/Boolfuck",
    "language_short": "brainfuck",
    "code": ";;;+;+;;+;+;\r\n+;+;+;+;;+;;+;\r\n;;+;;+;+;;+;\r\n;;+;;+;+;;+;\r\n+;;;;+;+;;+;\r\n;;+;;+;+;+;;\r\n;;;;;+;+;;\r\n+;;;+;+;;;+;\r\n+;;;;+;+;;+;\r\n;+;+;;+;;;+;\r\n;;+;;+;+;;+;\r\n;;+;+;;+;;+;\r\n+;+;;;;+;+;;\r\n;+;+;+;"
  },
  {
    "id": "236",
    "title": "Bosque",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "namespace NSMain;\r\n\r\nentrypoint function main():\r\nString {  \r\n    return \"Hello World\";\r\n}"
  },
  {
    "id": "237",
    "title": "Brain-Flak",
    "description": "Brain-Flak is a stack-based esoteric language designed by Programming Puzzles and Code-Golf user, DJMcMayhem. The name is a cross between \"brainfuck\", which was a big inspiration for the language, and \"flak-overstow\", since the language is confusing and stack-based.",
    "url": "https://esolangs.org/wiki/Brain-Flak",
    "language_short": "brainfuck",
    "code": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
  },
  {
    "id": "238",
    "title": "brainflop",
    "description": "brainflop is a Turing tarpit by InfiniteDonuts. It is Turing-complete, minimalist, and inspired by HighFive. It has 7 instructions that manipulate an array of 1024 memory cells. It is also quite possibly the most horrible language ever invented, as it not only extremely minimalist but causes insanity if used for too long.",
    "url": "https://esolangs.org/wiki/Brainflop",
    "language_short": "",
    "code": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*\r\n+++++++++++++++++++++++++++++*\r\n+++++++**\r\n+++*#\r\n++++++++++++++++++++++++++++++++*\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++*\r\n++++++++++++++++++++++++*\r\n+++*\r\n------*\r\n--------*"
  },
  {
    "id": "239",
    "title": "brainfuck",
    "description": "Brainfuck is an esoteric programming language created in 1993 by Urban Müller. Notable for its extreme minimalism, the language consists of only eight simple commands and an instruction pointer. While it is fully Turing complete, it is not intended for practical use, but to challenge and amuse programmers. Brainfuck simply requires one to break commands into microscopic steps.",
    "url": "https://en.wikipedia.org/wiki/Brainfuck",
    "language_short": "brainfuck",
    "code": "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>."
  },
  {
    "id": "240",
    "title": "Brainfuck 2D",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "*\n *                                          *0**************\n  *                                        *                *\n   *                                      *                  *\n    *9*******************                *          *         *7***************\n                        *               *          **                         *\n                        *              *          * *                         *\n                        *             *          *  *                         *\n                        *            *          *   *                         *\n                        *           **********0*    *                         *\n                       *                            **********                *\n                      *                                     *                 *\n                     *                                     *                  *\n                    *44****************************       *                   *\n                                                   *     *                    *\n                                                    *   *                     *\n      ***********0*                                  * 0                      *\n     *            *                          *3***    *                       *\n    *             *                         *     0                           *\n   *              *                        2       *                          *\n  *               *           *7***********         *                        *\n *               *           *                       *                      *\n 0              *           *                         *                    *4***********\n *             *           *                           *                                *\n *            *           *                             *             *0****             *\n *           0           *                               *           *     *              *\n *          ********************************************************************************\n *                     *                                   *       *       *\n **********************                                     *     *        *\n                                                       *     *0***         *\n                                                       **                  *\n                                                       * *                 *\n                                                       *  *                *\n                              *                        *********************\n                             * *                            *\n                            *   *                            *\n                           *     *                            *8****************\n                          *       *26****                                      *\n                         *              *                                      *\n                        *               *              *0******                *\n                       *      *         *             *        *              *\n                      *      **         *            *     *    *            *\n                     *      * *         *           *     **     *          *4*******\n                    *      *  *         *          *     * *      *                  *\n                   *      *   *         *         *     *  *       *                  *\n                  *      *    *         *        *****0*   *****************************\n                 *      *     *         *                            *\n                *      *      *        *                              *\n               ******0*       *       *                                *\n                              *      *                                  *92***********\n                              *     *3******                                         *\n                              *             *                                        *\n                              *          *   *                                       *\n                              *         **    *                                      *\n                              *        * *     *        *0*****                     *\n                              *       *  *      *      *     0                     *\n                              *      *   *********    *     *                     *5****\n                              *     *                *     *                            *\n                              *     0      *3********     *                              *\n                              *     *     *              *                                *\n                              **************************************************************\n                                    *   *              *\n                                    *  *    *****8*   *\n                                    * *     0    *   *    *\n                                    **      *   *   *    **\n                                    *       *  ***6*    * *                                  *\n                     *                      *          *  *                                 *\n                     **                     *0*********   *                                *\n                     * *                                  *                               *\n                     *  *                                 *                              *\n                     *   *                                *                               *\n                     *    *                               *                                *\n                     **************************************                                 *\n                            *                                                                0\n                             *                                                 *91*************\n                              *2222*****************************               *\n                                                               *               *\n                                                               *               *\n                                                  *0**************************************   *\n                                                  *            *               *        *   **\n                                                  *            *               *       *   * *\n                                                  *           *                *      *   *  *\n                                                  *          *                 *     *   *   *\n                                                  *         *                  *    *****    *\n                                                  *        *31*******          *             *\n                                                  *                  *         *             *\n                                                  *                   *        ***************\n                                                  *                    *\n                                                  ***********************\n\n/* the new BrainFuckTwoD Code\n      \"Hello World!\"\n     (c) DuNe & oCaS          */\n"
  },
  {
    "id": "241",
    "title": "Brian & Chuck",
    "description": "Brian & Chuck is an esoteric programming language with two mutually modifying Brainfuck-like programs developed by user:Martin Ender. The language was remotely inspired by RubE on Conveyor Belts and Self-modifying Brainfuck.",
    "url": "https://esolangs.org/wiki/Brian_%26_Chuck",
    "language_short": "brainfuck",
    "code": "?Hello, World!\r\n!>.>.>.>.>.>.>.>.>.>.>.>.>."
  },
  {
    "id": "242",
    "title": "broccoli",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "(out \"Hello World\" crlf)"
  },
  {
    "id": "243",
    "title": "Broken Calculator",
    "description": "Broken Calculator is a programming language created by PixelatedStarfish; it is designed such that a program has a random chance of crashing on a given line of code. The chance of crashing is always greater than 0, which ensures that every program in the language must halt.",
    "url": "https://esolangs.org/wiki/Broken_Calculator",
    "language_short": "",
    "code": "PCR 72\r\nPCR 69\r\nPCR 76\r\nPCR 76\r\nPCR 79\r\nPCR 32\r\nPCR 87\r\nPCR 79\r\nPCR 82\r\nPCR 76\r\nPCR 68"
  },
  {
    "id": "244",
    "title": "BRZRK",
    "description": "BRZRK is an esoteric programming language invented on Saturday, April 19, 2008 by revcompgeek. Ans is a flexible language related to lisp, and is functional. Ans stands for Almost No Syntax.",
    "url": "BRZRK",
    "language_short": "gams",
    "code": "$$\"Hello, World!\""
  },
  {
    "id": "245",
    "title": "Bucket",
    "description": "Bucket is a set of languages involving 3 basic operations invented by User:A. The language variant is described by the tuple (a,b), where a<=b.",
    "url": "https://esolangs.org/wiki/Bucket",
    "language_short": "brainfuck",
    "code": "fpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfp\r\nfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpOfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpfpOfpfpfpfpfpfpfpOOfpfp\r\nfpOPePePePePePePePePePePePe"
  },
  {
    "id": "246",
    "title": "BuddyScript",
    "description": "BuddyScript is a domain-specific language originally developed by ActiveBuddy. The main purpose of the language is to be able to process natural language queries and return results in natural language form.",
    "url": "https://handwiki.org/wiki/BuddyScript",
    "language_short": "",
    "code": "=AnythingPerfect\r\n    - Hello World"
  },
  {
    "id": "247",
    "title": "bugSophia",
    "description": "bugSophia (bS for short) is a massively concurrent programming language. The language represents data as bytes being carried by bugs through a 2D field of paths. Each bug can carry only one byte. When a bug reaches an intersection it creates concurrently running copies of itself that travel down each possible path. Unary operations occur when bugs travel over commands. Binary (and higher-ary) operations occur when multiple bugs travel over commands at the same time.",
    "url": "https://esolangs.org/wiki/BugSophia",
    "language_short": "brainfuck",
    "code": " \"+-+-+-+-+-+-+-+-+-+-+-+-+\r\n` ` ` ` ` ` ` ` ` ` ` ` `\r\nH e l l o ,   W o r l d !\r\nᛥ'<-<-<-<-<-<-<-<-<-<-<-<-<"
  },
  {
    "id": "248",
    "title": "Bur",
    "description": "Bur is an esoteric programming language invented by Zane Porter in 2018. Bur is a simple stack-based language that features partially nondeterministic math, and no control structures other than function calls, which can be made conditionally or unconditionally.",
    "url": "https://esolangs.org/wiki/Bur",
    "language_short": "brainfuck",
    "code": "~@,#33!#100!#108!#114!#111!#87!#32!#44!#111!#108!#108!#101!#72!!.!.!.!.!.!.!.!.!.!.!.!.!v.;"
  },
  {
    "id": "249",
    "title": "burlesque",
    "description": "Burlesque is a concatenative, dynamic typed, lazy programming language by User:Feuermonster, and the successor of Stlang but less feature bloated. The name means what it means. The main design goals of Stlang still apply. Burlesque evolved to be a programming language used for both serious applications and golfing too. For a complete description of the language please refer to the Moonpage.",
    "url": "https://esolangs.org/wiki/Burlesque",
    "language_short": "vim",
    "code": "\"Hello, World!\"Q"
  },
  {
    "id": "250",
    "title": "Byte Syze",
    "description": "Byte Syze is a very simple programming language devised by User:Smjg. Source code takes the form of a binary file.",
    "url": "https://esolangs.org/wiki/Byte_Syze",
    "language_short": "brainfuck",
    "code": "000000: c7 3c 2a 3c 2a 2b 2a 5c  3c 29 5c 2a 2b 2a 5c 3c  .<*<*+*\\<)\\*+*\\<\n000010: 29 5c 2a 2b 2a 5c 3c 29  5c 2a 2b 2a 5c 3c 29 5c  )\\*+*\\<)\\*+*\\<)\\\n000020: 2a 2b 2a 5c 3c 29 5c 2a  2b 2a 5c 3c 29 5c 2a 2b  *+*\\<)\\*+*\\<)\\*+\n000030: 2a 5c 3c 29 5c 2a 2b 2a  5c 3c 29 5c 2a 2b 2a 5c  *\\<)\\*+*\\<)\\*+*\\\n000040: 3c 29 5c 2a 2b 2a 5c 3c  29 5c 2a 2b 2a 5c 3c 29  <)\\*+*\\<)\\*+*\\<)\n000050: 5c 2a 2b 2a 5c 3c 29 5c  2a 2b 2a 5c 3c 29 5c 2a  \\*+*\\<)\\*+*\\<)\\*\n000060: 2b 2a 00 00 01 00 00 00  00 00 00 00 00 00 00 00  +*..............\n000070: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000080: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000090: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n0000a0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n0000b0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n0000c0: 00 00 00 00 00 00 00 64  48 65 6c 6c 6f 2c 20 57  .......dHello,.W\n0000d0: 6f 72 6c 64 21 00 00 00  00 00 00 00 00 00 00 00  orld!..........."
  },
  {
    "id": "251",
    "title": "Byter",
    "description": "Byter is a language for training brains. Byter consists of 11 instructions that are intended to move the instruction pointer on a 16 × 16 matrix and for outputting the characters which are associated with each cell. On an output operation the ascii character associated with the specific cell is printed out. The correct ascii value is determined by the position of the cell: It starts with zero in the top left corner of the matrix, and is increased from left to right.",
    "url": "https://esolangs.org/wiki/Byter",
    "language_short": "brainfuck",
    "code": ">>>>>>>>>V00V00V\r\n0#00A00V<V00V0VV\r\n-+>>A00VV<<0$$0V>\r\nV0AA<00V>V<<<<V0\r\n>>V0V<<<-<000V<0\r\n0AV0VV<<<0000V<0\r\n0A>V+}>>>>>>}<V-\r\n0A{>&g"
  },
  {
    "id": "252",
    "title": "C",
    "description": "C (/siː/, as in the letter c) is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, with a static type system. By design, C provides constructs that map efficiently to typical machine instructions. It has found lasting use in applications previously coded in assembly language. Such applications include operating systems and various application software for computer architectures that range from supercomputers to PLCs and embedded systems.",
    "url": "https://en.wikipedia.org/wiki/C_(programming_language)",
    "language_short": "c",
    "code": "#include <stdio.h>\r\n \r\nint main() {\r\n    printf(\"Hello World\\n\");\r\n    return 0;\r\n}"
  },
  {
    "id": "253",
    "title": "C Shell",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "#!/bin/csh\r\necho \"Hello World\""
  },
  {
    "id": "254",
    "title": "C-INTERCAL",
    "description": "C-INTERCAL is an INTERCAL implementation first released on 12 May 1990 by Eric Raymond. Although compatible with INTERCAL-72, it has extensions for things like computed COME FROM, computed ABSTAIN, Threaded INTERCAL, Backtracking INTERCAL, and a debugger and profiler. The implementation is written in and compiles programs to POSIX-compatible C. It also supports TriINTERCAL.",
    "url": "https://esolangs.org/wiki/C-INTERCAL",
    "language_short": "x86asm",
    "code": "        PLEASE NOTE THIS PROGRAM RECOGNIZES \"HELLO, WORLD\" USING COME FROM\n        DON'T TYPE IN ANYTHING ELSE, OR YOU'LL GET AN ERROR!\n \n        PLEASE NOTE: COMPILE WITH ick -m FOR THIS TO WORK.\n        \n        DO ,1 <- #12\n (1)    DO WRITE IN ,1\n        DO GIVE UP\n \n        PLEASE NOTE THIS CHECKS EACH CHARACTER IN TURN\n        DO COME FROM '#255~'\"?',1SUB#1'$#72\"~\"#0$#255\"''~#1\n        PLEASE START WITH AN H NEXT TIME\n \n        DO COME FROM '#255~'\"?',1SUB#2'$#253\"~\"#0$#255\"''~#1\n        DO (2) NEXT\n        DO REMEMBER THAT E COMES SECOND\n \n        DO COME FROM '#255~'\"?',1SUB#3'$#7\"~\"#0$#255\"''~#1\n        DO (4) NEXT \n        PLEASE USE L THIRD NEXT TIME\n \n        DO COME FROM '#255~'\"?',1SUB#4'$#0\"~\"#0$#255\"''~#1\n        PLEASE DO (2) NEXT DO (4) NEXT\n        DO USE TWO LS, NOT A SINGLE L\n \n        DO COME FROM '#255~'\"?',1SUB#5'$#3\"~\"#0$#255\"''~#1\n        DO (8) NEXT\n        PLEASE END 'HELLO' WITH 'O'\n \n        DO COME FROM '#255~'\"?',1SUB#6'$#221\"~\"#0$#255\"''~#1\n        DO (8) NEXT PLEASE DO (2) NEXT\n        DO USE COMMAS TO SEPARATE WORDS\n \n        DO COME FROM '#255~'\"?',1SUB#7'$#244\"~\"#0$#255\"''~#1\n        DO (8) NEXT PLEASE DO (4) NEXT\n        PLEASE USE SPACES AFTER PUNCTUATION\n \n        DO COME FROM '#255~'\"?',1SUB#8'$#55\"~\"#0$#255\"''~#1\n        DO (8) NEXT DO (4) NEXT PLEASE DO (2) NEXT\n        DO START 'WORLD' WITH A 'W'\n \n        DO COME FROM '#255~'\"?',1SUB#9'$#248\"~\"#0$#255\"''~#1\n        DO (16) NEXT\n        PLEASE PLACE AN O IN THE NINTH POSITION\n \n        DO COME FROM '#255~'\"?',1SUB#10'$#3\"~\"#0$#255\"''~#1\n        DO (16) NEXT DO (2) NEXT\n        DO USE AN R IN THE MIDDLE OF WORLD\n \n        DO COME FROM '#255~'\"?',1SUB#11'$#250\"~\"#0$#255\"''~#1\n        DO (16) NEXT DO (4) NEXT\n        PLEASE LET AN L BE PENULTIMATE\n \n        DO COME FROM '#255~'\"?',1SUB#12'$#248\"~\"#0$#255\"''~#1\n        DO (16) NEXT PLEASE DO (4) NEXT DO (2) NEXT\n        DO END WITH A D\n \n (2)    PLEASE RESUME #1\n (4)    DO (2) NEXT DO (2) NEXT DO RESUME #1\n (8)    DO (4) NEXT DO (4) NEXT PLEASE RESUME #1\n (16)   DO (8) NEXT DO (8) NEXT PLEASE RESUME #1"
  },
  {
    "id": "255",
    "title": "C+",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "THATSCPLUSCODENONOTCPLUSPLUSCPLUS{includ =iostrea; usin namespac st> in mai()|cou == ^^Hello World^^ == en>retur -1>?"
  },
  {
    "id": "256",
    "title": "C++",
    "description": "C++ (/ˌsiːˌplʌsˈplʌs/) is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.",
    "url": "https://en.wikipedia.org/wiki/C%2B%2B",
    "language_short": "cpp",
    "code": "#include <iostream> // include API\r\n \r\nusing namespace std;\r\n \r\nint main() // the main code portion of a C++ program\r\n{\r\n    cout << \"Hello World\" << endl;  //print Hello World on the screen \r\n    return 0; // conventional\r\n}"
  },
  {
    "id": "257",
    "title": "C+++",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "integer new main()\r\n{\r\n  println.format(\"Hello World\");\r\n   return 0;\r\n}"
  },
  {
    "id": "258",
    "title": "C∗ (C* / C Star)",
    "description": "C* (or C-star) is an object-oriented, data-parallel superset of ANSI C with synchronous semantics.",
    "url": "https://en.wikipedia.org/wiki/C*",
    "language_short": "",
    "code": "#include <stdio.h>\r\n\r\nmain()\r\n{\r\n    printf(\"Hello World\\n\");\r\n}"
  },
  {
    "id": "259",
    "title": "Cache ObjectScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "HelloWorld  ;\r\n  Write \"Hello World\"\r\n  Quit"
  },
  {
    "id": "260",
    "title": "CAML",
    "description": "Caml (originally an acronym for Categorical Abstract Machine Language) is a multi-paradigm, general-purpose programming language which is a dialect of the ML programming language family. Caml was developed in France at INRIA and ENS.",
    "url": "https://en.wikipedia.org/wiki/Caml",
    "language_short": "ocaml",
    "code": "print_endline \"Hello world!\";;"
  },
  {
    "id": "261",
    "title": "Cardinal",
    "description": "Cardinal is an esoteric programming language by User:Madk, named for the directions that the instruction pointers can travel. Execution takes place on a 2D grid. For anything significantly complex, many instruction pointers must be operating and communicating simultaneously; each pointer has only 2 bytes of memory.",
    "url": "https://esolangs.org/wiki/Cardinal",
    "language_short": "c-like",
    "code": "%\"Hello, world!\";x"
  },
  {
    "id": "262",
    "title": "Casio BASIC",
    "description": "Casio BASIC is a programming language used in the Casio calculators such as the Classpad, PRIZM Series, fx-9860G Series, fx-5800P, Algebra FX and CFX graphing calculators.",
    "url": "https://en.wikipedia.org/wiki/Casio_BASIC",
    "language_short": "basic",
    "code": "\"HELLO, WORLD!\""
  },
  {
    "id": "263",
    "title": "cat",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello World"
  },
  {
    "id": "264",
    "title": "Cbot",
    "description": "The CBOT language is very close in structure and syntax to C++ and Java. It has been adapted for the specific purposes of Colobot, and for an efficient pedagogical approach",
    "url": "https://colobot.fandom.com/wiki/CBOT_Language",
    "language_short": "",
    "code": "extern void object::New()\r\n{\r\n\r\nmessage(\"Hello World\");\r\n\r\n}"
  },
  {
    "id": "265",
    "title": "CDuce",
    "description": "CDuce is an XML-oriented functional language, which extends XDuce in a few directions. It features XML regular expression types, XML regular expression patterns, XML iterators. CDuce is not strictly speaking an XML transformation language since it can be used for general-purpose programming.",
    "url": "https://en.wikipedia.org/wiki/CDuce",
    "language_short": "",
    "code": "print \"Hello World\";;"
  },
  {
    "id": "266",
    "title": "Cell",
    "description": "Cell is Turing-complete language founded by OsmineYT in 2019. The sense of making this language is simple: make an Turing-complete language first instead of irregular languages.",
    "url": "https://esolangs.org/wiki/Cell",
    "language_short": "brainfuck",
    "code": "j0 a72 . a101 . a108 . . a111 . a44 . a32 . a87 . a111 . a114 . a108 . a100 . a33 ."
  },
  {
    "id": "267",
    "title": "Cells",
    "description": "If you want to learn most to everything about Cells then go to this document. Or you can see the side image which is the current website.",
    "url": "https://esolangs.org/wiki/Cells",
    "language_short": "",
    "code": "(alpha)(8,=_)(5,=_)(12,=_)(12,=_)(15,=_)\r\n(ascii)(32,=_)\r\n(alpha)(23,=_)(15,=_)(18,=_)(12,=_)(4,=_)"
  },
  {
    "id": "268",
    "title": "centura",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "! Hello World in Centura\r\n \r\nFunction: HelloWorld\r\nDescription:\r\nReturns\r\nParameters\r\nStatic Variables\r\nLocal variables\r\nActions\r\nCall SalMessageBox( 'Hello World','Message',MB_Ok)"
  },
  {
    "id": "269",
    "title": "Ceylon",
    "description": "Ceylon is an object-oriented, strongly statically typed programming language with an emphasis on immutability, created by Red Hat. Ceylon programs run on the Java virtual machine (JVM), and could be compiled to JavaScript. The language design focuses on source code readability, predictability, toolability, modularity, and metaprogrammability.",
    "url": "https://en.wikipedia.org/wiki/Ceylon_(programming_language)",
    "language_short": "ceylon",
    "code": "shared void hello() {\r\n    print(\"Hello, World!\");\r\n}"
  },
  {
    "id": "270",
    "title": "CGI (Common Gateway Interface)",
    "description": "In computing, Common Gateway Interface (CGI) is an interface specification that enables web servers to execute an external program, typically to process user requests.",
    "url": "https://en.wikipedia.org/wiki/Common_Gateway_Interface",
    "language_short": "c-like",
    "code": "#include <stdio.h>\r\n \r\nmain ()\r\n{\r\n    printf (\"Content-type: text/html\\n\");\r\n    printf (\"\\n\");\r\n    printf (\"<html>\\n\");\r\n    printf (\"<head>\\n\");\r\n    printf (\"<title>Hello, world</title>\\n\");\r\n    printf (\"</head>\\n"
  },
  {
    "id": "271",
    "title": "Chaos",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print \"Hello World\""
  },
  {
    "id": "272",
    "title": "Chapel",
    "description": "Chapel, the Cascade High Productivity Language, is a parallel programming language developed by Cray. It is being developed as part of the Cray Cascade project, a participant in DARPA's High Productivity Computing Systems (HPCS) program, which had the goal of increasing supercomputer productivity by the year 2010. It is being developed as an open source project, under version 2 of the Apache license.",
    "url": "https://en.wikipedia.org/wiki/Chapel_(programming_language)",
    "language_short": "c-like",
    "code": "writeln(\"Hello World\");"
  },
  {
    "id": "273",
    "title": "Charcoal",
    "description": "Charcoal is an ASCII-art oriented prefix golfing language designed by the Programming Puzzles and Code Golf users DLosc and ASCII-only. The name is derived from the fact that it has a focus on ASCII art, which is composed of characters.",
    "url": "https://esolangs.org/wiki/Charcoal",
    "language_short": "plaintext",
    "code": "Hello, world!"
  },
  {
    "id": "274",
    "title": "Cheddar",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "print \"Hello, world!\""
  },
  {
    "id": "275",
    "title": "Cheese++",
    "description": "Cheese++ is a programming language based almost entirely on the operational working principles of cheese.",
    "url": "https://esolangs.org/wiki/Cheese%2B%2B",
    "language_short": "",
    "code": "Cheese\r\n    Wensleydale(SwissHello WorldSwiss)Brie\r\nNoCheese"
  },
  {
    "id": "276",
    "title": "Chef",
    "description": "Chef is a stack-based language where programs look like cooking recipes. Chef was designed by David Morgan-Mar in 2002.",
    "url": "https://esolangs.org/wiki/Chef",
    "language_short": "plaintext",
    "code": "Hello World Cake with Chocolate sauce.\n\nThis prints hello world, while being tastier than Hello World Souffle. The main\nchef makes a \" world!\" cake, which he puts in the baking dish. When he gets the\nsous chef to make the \"Hello\" chocolate sauce, it gets put into the baking dish\nand then the whole thing is printed when he refrigerates the sauce. When\nactually cooking, I'm interpreting the chocolate sauce baking dish to be\nseparate from the cake one and Liquify to mean either melt or blend depending on\ncontext.\n\nIngredients.\n33 g chocolate chips\n100 g butter\n54 ml double cream\n2 pinches baking powder\n114 g sugar\n111 ml beaten eggs\n119 g flour\n32 g cocoa powder\n0 g cake mixture\n\nCooking time: 25 minutes.\n\nPre-heat oven to 180 degrees Celsius.\n\nMethod.\nPut chocolate chips into the mixing bowl.\nPut butter into the mixing bowl.\nPut sugar into the mixing bowl.\nPut beaten eggs into the mixing bowl.\nPut flour into the mixing bowl.\nPut baking powder into the mixing bowl.\nPut cocoa  powder into the mixing bowl.\nStir the mixing bowl for 1 minute.\nCombine double cream into the mixing bowl.\nStir the mixing bowl for 4 minutes.\nLiquify the contents of the mixing bowl.\nPour contents of the mixing bowl into the baking dish.\nbake the cake mixture.\nWait until baked.\nServe with chocolate sauce.\n\nchocolate sauce.\n\nIngredients.\n111 g sugar\n108 ml hot water\n108 ml heated double cream\n101 g dark chocolate\n72 g milk chocolate\n\nMethod.\nClean the mixing bowl.\nPut sugar into the mixing bowl.\nPut hot water into the mixing bowl.\nPut heated double cream into the mixing bowl.\ndissolve the sugar.\nagitate the sugar until dissolved.\nLiquify the dark chocolate.\nPut dark chocolate into the mixing bowl.\nLiquify the milk chocolate.\nPut milk chocolate into the mixing bowl.\nLiquify contents of the mixing bowl.\nPour contents of the mixing bowl into the baking dish.\nRefrigerate for 1 hour."
  },
  {
    "id": "277",
    "title": "Chicekn",
    "description": "Chicken is an esoteric programming language by Torbjörn Söderstedt, in which \"chicken\" is the only valid symbol.",
    "url": "https://esolangs.org/wiki/Chicken",
    "language_short": "brainfuck",
    "code": "chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicke"
  },
  {
    "id": "278",
    "title": "Chicken",
    "description": "Chicken is an esoteric programming language by Torbjörn Söderstedt, in which \"chicken\" is the only valid symbol.",
    "url": "https://esolangs.org/wiki/Chicken",
    "language_short": "",
    "code": "chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken\r\nchicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken\r\n\r\nchicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken\r\n\r\nchicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken\r\nchicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken\r\n\r\nchicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken\r\n\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken\r\nchicken chicken chicken chicken chicken chicken"
  },
  {
    "id": "279",
    "title": "Choon",
    "description": "Choon is an esoteric programming language that produces musical notes as its only output. It also has no data storage, but it can read any note it has previously output. Choon is Turing-complete and was invented in 2002 by Stephen Sykes.",
    "url": "https://esolangs.org/wiki/Choon",
    "language_short": "brainfuck",
    "code": "AGb-A#A#+A+%A#DF-AC#"
  },
  {
    "id": "280",
    "title": "Cil",
    "description": "Choon is an esoteric programming language that produces musical notes as its only output. It also has no data storage, but it can read any note it has previously output. Choon is Turing-complete and was invented in 2002 by Stephen Sykes.",
    "url": "https://esolangs.org/wiki/Choon",
    "language_short": "c-like",
    "code": "// ilasm cil.il\r\n.assembly HelloWorld {}\r\n.method public static void Main() cil managed\r\n{\r\n    .entrypoint\r\n    .maxstack 1\r\n    ldstr \"Hello World\"\r\n    call void [mscorlib]System.Console::WriteLine(string)\r\n    ret\r\n}"
  },
  {
    "id": "281",
    "title": "CLC-INTERCAL",
    "description": "CLC-INTERCAL introduced a small number of new statements, types of expressions, statement variants and data structure; these extensions are listed here in no particular order.",
    "url": "https://esolangs.org/wiki/CLC-INTERCAL",
    "language_short": "x86asm",
    "code": "\tPLEASE ;1 <- #12\n(1)\tPLEASE WRITE IN ;1\n\tPLEASE GIVE UP\n\n\tPLEASE PLEASE PLEASE (PRETTY PLEASE)\n\tDO NOT ASK ME TO READ THE REST OF THIS PROGRAM\n\n\tDO COME FROM '\".1/'\"'¥#29¢\"';1SUB#1'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#29¢\"';1SUB#1'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢.1\n\tERROR: THE FIRST CHARACTER IS NOT \"H\"\n\n\tDO COME FROM '\".2/'\"'¥#1356¢\"';1SUB#2'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#1356¢\"';1SUB#2'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '.2~\"'¥#1¢.1'~#1\"'\n\tERROR: THE SECOND CHARACTER IS NOT \"E\"\n\n\tDO COME FROM '\".3/'\"'¥#377¢\"';1SUB#3'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#377¢\"';1SUB#3'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".22/'\"V.1¢.2\"~#1'\"~#0'¢'.3~\"'¥#1¢.22'~#1\"'\n\tERROR: THE THIRD CHARACTER IS NOT \"L\"\n\n\tDO COME FROM '\".4/'\"'¥#383¢\"';1SUB#4'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#383¢\"';1SUB#4'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".23/'\"V.22¢.3\"~#1'\"~#0'¢'.4~\"'¥#1¢.23'~#1\"'\n\tERROR: THE FOURTH CHARACTER IS NOT \"L\"\n\n\tDO COME FROM '\".5/'\"'¥#378¢\"';1SUB#5'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#378¢\"';1SUB#5'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".24/'\"V.23¢.4\"~#1'\"~#0'¢'.5~\"'¥#1¢.24'~#1\"'\n\tERROR: THE FIFTH CHARACTER IS NOT \"O\"\n\n\tDO COME FROM '\".6/'\"'¥#177¢\"';1SUB#6'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#177¢\"';1SUB#6'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".25/'\"V.24¢.5\"~#1'\"~#0'¢'.6~\"'¥#1¢.25'~#1\"'\n\tERROR: THE SIXTH CHARACTER IS NOT COMMA\n\n\tDO COME FROM '\".7/'\"'¥#373¢\"';1SUB#7'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#373¢\"';1SUB#7'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".26/'\"V.25¢.6\"~#1'\"~#0'¢'.7~\"'¥#1¢.26'~#1\"'\n\tERROR: THE SEVENTH CHARACTER IS NOT SPACE\n\n\tDO COME FROM '\".8/'\"'¥#4160¢\"';1SUB#8'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#4160¢\"';1SUB#8'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".27/'\"V.26¢.7\"~#1'\"~#0'¢'.8~\"'¥#1¢.27'~#1\"'\n\tERROR: THE EIGHTH CHARACTER IS NOT \"W\"\n\n\tDO COME FROM '\".9/'\"'¥#574¢\"';1SUB#9'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#574¢\"';1SUB#9'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".28/'\"V.27¢.8\"~#1'\"~#0'¢'.9~\"'¥#1¢.28'~#1\"'\n\tERROR: THE NINTH CHARACTER IS NOT \"O\"\n\n\tDO COME FROM '\".10/'\"'¥#540¢\"';1SUB#10'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#540¢\"';1SUB#10'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".29/'\"V.28¢.9\"~#1'\"~#0'¢'.10~\"'¥#1¢.29'~#1\"'\n\tERROR: THE TENTH CHARACTER IS NOT \"R\"\n\n\tDO COME FROM '\".11/'\"'¥#353¢\"';1SUB#11'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#353¢\"';1SUB#11'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".30/'\"V.29¢.10\"~#1'\"~#0'¢'.11~\"'¥#1¢.30'~#1\"'\n\tERROR: THE ELEVENTH CHARACTER IS NOT \"L\"\n\n\tDO COME FROM '\".12/'\"'¥#375¢\"';1SUB#12'~#65535\"'~'#0¢#65535'\"~\n\t\t     \"'¥#375¢\"';1SUB#12'~#65535\"'~'#0¢#65535'\"'~#1\"~#0'¢\n\t\t     '\".31/'\"V.30¢.11\"~#1'\"~#0'¢'.12~\"'¥#1¢.31'~#1\"'\n\tERROR: THE TWELFTH AND LAST CHARACTER IS NOT \"D\""
  },
  {
    "id": "282",
    "title": "CLCLC-INTERCAL",
    "description": "CLCLC-INTERCAL by User:Zzo38 is a variation on CLC-INTERCAL, just like CLC-INTERCAL is variation on C-INTERCAL and INTERCAL-72. These are the differences of CLC-INTERCAL are listed here, please.",
    "url": "https://esolangs.org/wiki/CLCLC-INTERCAL",
    "language_short": "x86asm",
    "code": "PLEASE ;1 <- #2\r\nDO ;1 SUB #1 <- #17947$$#20775\r\nDO ;1 SUB #2 <- #5204$$#21386\r\nDO READ OUT ;1\r\nPLEASE GIVE UP"
  },
  {
    "id": "283",
    "title": "Clean",
    "description": "Clean is a general-purpose purely functional computer programming language. For much of the language's active development history it was called Concurrent Clean, but this was dropped at some point. Clean is being developed by a group of researchers from the Radboud University in Nijmegen since 1987.",
    "url": "https://en.wikipedia.org/wiki/Clean_(programming_language)",
    "language_short": "clean",
    "code": "module hello\r\nStart :: {#Char}\r\nStart = \"Hello, world!\""
  },
  {
    "id": "284",
    "title": "Clipper",
    "description": "Clipper is an xBase compiler that implements a variant of the xBase computer programming language. It is used to create or extend software programs that originally operated primarily under MS-DOS. Although it is a powerful general-purpose programming language, it was primarily used to create database/business programs.",
    "url": "https://en.wikipedia.org/wiki/Clipper_(programming_language)",
    "language_short": "c-like",
    "code": "? \"Hello World\""
  },
  {
    "id": "285",
    "title": "CLIPS",
    "description": "CLIPS is a public domain software tool for building expert systems. The name is an acronym for \"C Language Integrated Production System.\" The syntax and name were inspired by Charles Forgy's OPS5.",
    "url": "https://en.wikipedia.org/wiki/CLIPS",
    "language_short": "",
    "code": "(defrule hw\r\n    (f ?x)\r\n=>\r\n    (printout t ?x crlf))\r\n\r\n(assert (f \"Hello World\"))\r\n\r\n(run)"
  },
  {
    "id": "286",
    "title": "CLISP",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "(write-line \"Hello World\")"
  },
  {
    "id": "287",
    "title": "Clojure",
    "description": "Clojure (/ˈkloʊʒər/, like closure) is a dynamic and functional dialect of the Lisp programming language on the Java platform. Like other Lisp dialects, Clojure treats code as data and has a Lisp macro system. The current development process is community-driven, overseen by Rich Hickey as its benevolent dictator for life (BDFL).",
    "url": "https://en.wikipedia.org/wiki/Clojure",
    "language_short": "clojure",
    "code": "(println \"Hello, World\")"
  },
  {
    "id": "288",
    "title": "CLU",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "start_up = proc ()\r\n   po: stream := stream$primary_output ()\r\n   stream$putl (po, \"Hello World\")\r\n   end start_up"
  },
  {
    "id": "289",
    "title": "COBOL",
    "description": "COBOL (/ˈkoʊbɒl, -bɔːl/; an acronym for \"common business-oriented language\") is a compiled English-like computer programming language designed for business use. ",
    "url": "https://en.wikipedia.org/wiki/COBOL",
    "language_short": "plaintext",
    "code": "       identification division.\r\n        program-id. cobol.\r\n        procedure division.\r\n        main.\r\n            display 'Hello, world.' end-display.\r\n            stop run."
  },
  {
    "id": "290",
    "title": "CobolScript",
    "description": "CobolScript is a programming language created by Matthew Dean and Charles Schereda of Deskware in 1999. The language was intended to provide web-enabled COBOL, and was targeted at businesses using legacy software written in that language.",
    "url": "https://en.wikipedia.org/wiki/CobolScript",
    "language_short": "",
    "code": "DISPLAY `Content-type: text/html `.\r\nDISPLAY LINEFEED.\r\nDISPLAY `<HTML><BODY>`.\r\nDISPLAY `<CENTER>Hello World</CENTER>`.\r\nDISPLAY `</BODY></HTML>`.\r\nGOBACK."
  },
  {
    "id": "291",
    "title": "Cobra",
    "description": "Cobra is a discontinued general-purpose, object-oriented programming language. Cobra is designed by Charles Esterbrook, and runs on the Microsoft .NET and Mono platforms. It is strongly influenced by Python, C#, Eiffel, Objective-C, and other programming languages.",
    "url": "https://en.wikipedia.org/wiki/Cobra_(programming_language)",
    "language_short": "",
    "code": "class Hello\r\n\r\n    def main\r\n        print 'Hello World'"
  },
  {
    "id": "292",
    "title": "Coconut",
    "description": "Coconut is a functional programming language that compiles to Python. Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python.",
    "url": "http://coconut-lang.org/",
    "language_short": "c-like",
    "code": "\"Hello, world!\" |> print"
  },
  {
    "id": "293",
    "title": "Codd",
    "description": "Codd, (which has nothing to do with Cod), is an esoteric programming language made by Areallycoolusername. It's meant to be a Turing complete language implementing the use of lambda calculus.",
    "url": "https://esolangs.org/wiki/Codd",
    "language_short": "brainfuck",
    "code": "λrx.r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[r[x]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \r\n \r\nλqw.q[q[q[q[q[q[q[q[q[q[q["
  },
  {
    "id": "294",
    "title": "CoffeeScript",
    "description": "CoffeeScript is a programming language that compiles to JavaScript. It adds syntactic sugar inspired by Ruby, Python and Haskell in an effort to enhance JavaScript's brevity and readability. Specific additional features include list comprehension and destructuring assignment.",
    "url": "https://en.wikipedia.org/wiki/CoffeeScript",
    "language_short": "coffeescript",
    "code": "alert \"Hello, World!\""
  },
  {
    "id": "295",
    "title": "coldfusion",
    "description": "ColdFusion Markup Language, more commonly known as CFML, is a scripting language for web development that runs on the JVM, the .NET framework, and Google App Engine. Multiple commercial and open source implementations of CFML engines are available, including Adobe ColdFusion, Lucee, New Atlanta BlueDragon (who offer both a Java-based and a .NET-based version), Railo, and Open BlueDragon as well as other CFML server engines.",
    "url": "https://en.wikipedia.org/wiki/ColdFusion_Markup_Language",
    "language_short": "xml",
    "code": "<cfset message = \"Hello World\">\r\n<cfoutput> #message#</cfoutput>"
  },
  {
    "id": "296",
    "title": "Comefrom0x10",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "'Hello World'"
  },
  {
    "id": "297",
    "title": "Commercial",
    "description": "This language is based off, as the title implies, TV commercials. This language was created by User:Poolala. It's probably Turing complete, but there's no formal proof.",
    "url": "https://esolangs.org/wiki/Commercial",
    "language_short": "plaintext",
    "code": "\"Hello, world!\" - Satisfied Consumer of Hello\r\nHello has been selling out worldwide!"
  },
  {
    "id": "298",
    "title": "Common Lisp (Common-Lisp)",
    "description": "Common Lisp (CL) is a dialect of the Lisp programming language, published in ANSI standard document ANSI INCITS 226-1994 (S20018)[1] (formerly X3.226-1994 (R1999)).[2] The Common Lisp HyperSpec, a hyperlinked HTML version, has been derived from the ANSI Common Lisp standard.",
    "url": "https://en.wikipedia.org/wiki/Common_Lisp",
    "language_short": "lisp",
    "code": ";; Common Lisp\r\n \r\n(defun hello-world ()\r\n    (format t \"Hello World~%\"))"
  },
  {
    "id": "299",
    "title": "Compute",
    "description": "Compute has no required syntax and has the power to solve any and all problems. It is smart enough to interpret any human language (English, Spanish, Latin, etc), any programming language (C++, Java, brainfuck, etc), or any kind of data you can think of. The only downfall is that there is absolutely no I/O.",
    "url": "https://esolangs.org/wiki/Compute",
    "language_short": "",
    "code": "Hello World"
  },
  {
    "id": "300",
    "title": "Concurnas",
    "description": "Type inferred language. Concurnas is a statically typed language which uses type inference extensively to remove the burden of types.",
    "url": "https://concurnas.com/",
    "language_short": "",
    "code": "System.out.println(\"Hello World\")"
  },
  {
    "id": "301",
    "title": "ContinuousEquation (ContinuesEquation)",
    "description": "ContinuousEquation is an esoteric programming language invented by User:Zzo38. Program flow runs by continuous equations rather than by discrete steps.",
    "url": "https://esolangs.org/wiki/ContinuousEquation",
    "language_short": "brainfuck",
    "code": "0 0 o'H'e'l'l'o',' 'w'o'r'l'd'!"
  },
  {
    "id": "302",
    "title": "Control Language",
    "description": "The Control Language (CL) is a scripting language originally created by IBM for the System/38 Control Program Facility[1] and later used in OS/400 (now known as IBM i). It bears a resemblance to the IBM Job Control Language and consisting of a set of command objects (*CMD) used to invoke traditional programs or get help on what those programs do. ",
    "url": "https://en.wikipedia.org/wiki/Control_Language",
    "language_short": "",
    "code": "SNDPGMMSG MSG(\"Hello World\")"
  },
  {
    "id": "303",
    "title": "Cool",
    "description": "Cool, an acronym for Classroom Object Oriented Language, is a computer programming language designed by Alexander Aiken for use in an undergraduate compiler course project. While small enough for a one term project, Cool still has many of the features of modern programming languages, including objects, automatic memory management, strong static typing and simple reflection.",
    "url": "https://en.wikipedia.org/wiki/Cool_(programming_language)",
    "language_short": "c-like",
    "code": "class Main inherits IO {\r\n    main(): Object {\r\n        out_string(\"Hello, World.\\n\")\r\n    };\r\n};"
  },
  {
    "id": "304",
    "title": "🆒",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "💬🔤👋🗺️🔤"
  },
  {
    "id": "305",
    "title": "CopyPasta Language",
    "description": "CopyPasta Language is an esoteric programming language created by User:Rerednaw in 2018. This programming language refers to the CopyPasta meme. The purpose of this programming language is to facilitate the practice of CopyPasta.",
    "url": "https://esolangs.org/wiki/CopyPasta_Language",
    "language_short": "plaintext",
    "code": "Copy\r\nHello, World!\r\nPasta"
  },
  {
    "id": "306",
    "title": "Cor",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "func main() console.log('Hello World!')"
  },
  {
    "id": "307",
    "title": "Coral 66",
    "description": "CORAL, short for Computer On-line Real-time Applications Language is a programming language originally developed in 1964 at the Royal Radar Establishment (RRE), Malvern, Worcestershire, in the United Kingdom. The R was originally for \"radar\", not \"real-time\". It was influenced primarily by JOVIAL, and thus ALGOL, but is not a subset of either.",
    "url": "https://en.wikipedia.org/wiki/CORAL",
    "language_short": "",
    "code": "'external' (\r\n   'procedure' write (\r\n      'value''integer', 'byte''array', 'value''integer');\r\n)\r\n\r\n'begin'\r\n   'byte''array' Buf [1:12] := \"Hello World\", 10;\r\n\r\n   write (1, Buf, 12);\r\n'end'"
  },
  {
    "id": "308",
    "title": "COW",
    "description": "The COW programming language is an esoteric programming language created by Sean Heber in 2003. It is a Brainfuck variant designed humorously with Bovinae in mind. COW has twelve instructions (four more than Brainfuck) and is Turing-complete. Most instructions are moos, only the capitalization varies: mOo, moO, mOO, Moo, and so on. MMM, OOO, oom and OOM are the exceptions. All other character combinations are ignored and treated as comments.",
    "url": "https://esolangs.org/wiki/COW",
    "language_short": "brainfuck",
    "code": "MoO MoO MoO MoO MoO MoO MoO MoO MOO moO MoO MoO MoO MoO MoO moO MoO MoO MoO MoO moO MoO MoO MoO MoO moO MoO MoO MoO MoO MoO MoO MoO\r\nMoO MoO moO MoO MoO MoO MoO mOo mOo mOo mOo mOo MOo moo moO moO moO moO Moo moO MOO mOo MoO moO MOo moo mOo MOo MOo MOo Mo"
  },
  {
    "id": "309",
    "title": "Crazy",
    "description": "Crazy is an esolang created by User:Vulture001. The language is based off of Python, and it uses reverse alphabet strings to print characters.",
    "url": "https://esolangs.org/wiki/Crazy",
    "language_short": "brainfuck",
    "code": "kirmg(s + v + o + o + l + xln + yoz + d + l + i + o + w + vcx)"
  },
  {
    "id": "310",
    "title": "Crystal",
    "description": "Crystal is a general-purpose, object-oriented programming language, designed and developed by Ary Borenszweig, Juan Wajnerman, Brian Cardiff and more than 300 contributors.",
    "url": "https://en.wikipedia.org/wiki/Crystal_(programming_language)",
    "language_short": "crystal",
    "code": "puts \"Hello, world!\""
  },
  {
    "id": "311",
    "title": "CSH",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "#!/bin/csh\r\n                    echo \"Hello, World!\""
  },
  {
    "id": "312",
    "title": "CSharp (C#)",
    "description": "C# (pronounced see sharp, like the musical note C♯, but written with the number sign)[b] is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines.",
    "url": "https://en.wikipedia.org/wiki/C_Sharp_(programming_language)",
    "language_short": "csharp",
    "code": "class HelloWorld {\r\n    static void Main() {\r\n        System.Console.WriteLine(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "313",
    "title": "CSON",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "{'hello': 'world'}"
  },
  {
    "id": "314",
    "title": "CSS",
    "description": "Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML.",
    "url": "https://en.wikipedia.org/wiki/CSS",
    "language_short": "css",
    "code": "body:before {\r\n    content:\"Hello World!\"\r\n}"
  },
  {
    "id": "315",
    "title": "Cuda",
    "description": "CUDA (an acronym for Compute Unified Device Architecture) is a parallel computing platform and application programming interface (API) model created by Nvidia. It allows software developers and software engineers to use a CUDA-enabled graphics processing unit (GPU) for general purpose processing – an approach termed GPGPU (general-purpose computing on graphics processing units). The CUDA platform is a software layer that gives direct access to the GPU's virtual instruction set and parallel computational elements, for the execution of compute kernels.",
    "url": "https://en.wikipedia.org/wiki/CUDA",
    "language_short": "",
    "code": "#include <stdio.h>\r\n\r\n__global__ void hello_world(){\r\n    printf(\"Hello World\\n\");\r\n }\r\n\r\nint main() {\r\n    hello_world<<<1,1>>>();\r\n    return 0;\r\n}"
  },
  {
    "id": "316",
    "title": "Cufrab",
    "description": "Cufrab is an esoteric programming language designed by User:Zzo38 in 2010. Based on brainfuck, it uses 256 commands, where 1 byte is normally 8 bits (0-255), and 1 word is the address size. They have 16 tapes.",
    "url": "https://esolangs.org/wiki/Cufrab",
    "language_short": "bash",
    "code": ":PRINT[-]~\\.;\r\n\"Hello, World!\\n\"PRINT"
  },
  {
    "id": "317",
    "title": "Cuneiform",
    "description": "Cuneiform is an open-source workflow language for large-scale scientific data analysis. It is a statically typed functional programming language promoting parallel computing. It features a versatile foreign function interface allowing users to integrate software from many external programming languages. At the organizational level Cuneiform provides facilities like conditional branching and general recursion making it Turing-complete. In this, Cuneiform is the attempt to close the gap between scientific workflow systems like Taverna, KNIME, or Galaxy and large-scale data analysis programming models like MapReduce or Pig Latin while offering the generality of a functional programming language.",
    "url": "https://en.wikipedia.org/wiki/Cuneiform_(programming_language)",
    "language_short": "c-like",
    "code": "def greet() -> <out : Str>\r\nin Bash *{\r\n    out=\"Hello world\"\r\n}*\r\n \r\n( greet()|out );"
  },
  {
    "id": "318",
    "title": "Curry",
    "description": "Curry is an experimental functional logic programming language, based on the Haskell language. It merges elements of functional and logic programming, including constraint programming integration.",
    "url": "https://en.wikipedia.org/wiki/Curry_(programming_language)",
    "language_short": "c-like",
    "code": "-- \"Hello World\" demo for the Tcl/Tk library\r\n \r\nimport Tk\r\n \r\nmain = runWidget \"Hello\"\r\n            (TkCol [] [TkLabel [TkText \"Hello world!\"],\r\n                        TkButton tkExit [TkText \"Stop\"]])"
  },
  {
    "id": "319",
    "title": "CypherNeo4j",
    "description": "CypherNeo4j (Network Exploration and Optimization 4 Java) is a graph database management system developed by Neo4j, Inc. Described by its developers as an ACID-compliant transactional database with native graph storage and processing,[3] Neo4j is available in a GPL3-licensed open-source \"community edition\", with online backup and high availability extensions licensed under a closed-source commercial license. Neo also licenses Neo4j with these extensions under closed-source commercial terms.",
    "url": "https://en.wikipedia.org/wiki/Neo4j",
    "language_short": "c-like",
    "code": "CREATE (Hello:Word { val: 'Hello' }), (World:Word { val: 'World!' }),\r\n(Hello)-[:SPACE]->(World)\r\nRETURN Hello,World"
  },
  {
    "id": "320",
    "title": "Cω",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "System.Console.WriteLine(\"Hello World\");"
  },
  {
    "id": "321",
    "title": "D",
    "description": "D, also known as Dlang, is a multi-paradigm system programming language created by Walter Bright at Digital Mars and released in 2001. Andrei Alexandrescu joined the design and development effort in 2007. Though it originated as a re-engineering of C++, D is a distinct language. It has redesigned some core C++ features, while also sharing characteristics of other languages, notably Java, Python, Ruby, C#, and Eiffel.",
    "url": "https://en.wikipedia.org/wiki/D_(programming_language)",
    "language_short": "d",
    "code": "// Hello World in D\r\nimport std.stdio;\r\n \r\nvoid main()\r\n{\r\n        writeln(\"Hello World!\");\r\n}"
  },
  {
    "id": "322",
    "title": "D♭♭",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "#include <stdio.h>\r\nint main() {\r\n    printf(\"Hello World\");\r\n    return 0;\r\n}"
  },
  {
    "id": "323",
    "title": "Daoyu",
    "description": "Dàoyǔ (道语), or DaoLanguage, is an esoteric, homoiconic programming language made by User:Kaynato in 2016, modeled after about two or so tenets of Daoist philosophy. It is inspired by other elegant and minimal programming languages such as Iota, Jot and FALSE, though the actual functionality bears little resemblance to that of those.",
    "url": "https://esolangs.org/wiki/Daoyu",
    "language_short": "brainfuck",
    "code": "$$$$$$\r\n(([]!)/([])):\r\n((/[])/([]!/[]!)):\r\n(/[])::\r\n[/([]!/[])]!:\r\n[[[]]!]:\r\n[([]!)/[/[]!]!]:\r\n[/([]!/[])]!:\r\n[([]!)/(/[])]:\r\n((/[])/[]):\r\n(/([]!)):\r\n([[]]!/[[]!]!):\r\n[[[]/[]]]!:"
  },
  {
    "id": "324",
    "title": "Dark",
    "description": "Dark is an Esoteric programming language by David Catt (user:David.werecat) which is designed to be inherently evil.",
    "url": "https://esolangs.org/wiki/Dark",
    "language_short": "c-like",
    "code": "+helloworld hell\r\nhelloworld$$twist stalker io\r\nhelloworld$$twist sign string\r\nio$$stalk\r\nio$$personal\r\nstring$$scrawl \" Hello World!\r\nstring$$read ~\r\nio$$echo\r\nhelloworld$$consume io\r\nhelloworld$$consume string\r\nhelloworld$$empty\r\nhelloworld$$apocalypse"
  },
  {
    "id": "325",
    "title": "Dart",
    "description": "Dart is a programming language designed for client development, such as for the web and mobile apps. It is developed by Google and can also be used to build server and desktop applications.",
    "url": "https://en.wikipedia.org/wiki/Dart_(programming_language)",
    "language_short": "dart",
    "code": "main() {\r\n    print('Hello, World!');\r\n}"
  },
  {
    "id": "326",
    "title": "Darwin",
    "description": "Darwin is a closed source programming language developed by Gaston Gonnet and colleagues at ETH Zurich. It is used to develop the OMA orthology inference software, which was also initially developed by Gonnet. The language backend consists of the kernel, responsible for performing simple mathematical calculations, for transporting and storing data and for interpreting the user's commands, and the library, a set of programs which can perform more complicated calculations.",
    "url": "https://en.wikipedia.org/wiki/Darwin_(programming_language)",
    "language_short": "",
    "code": "printf(\"Hello World\")"
  },
  {
    "id": "327",
    "title": "DataFlex",
    "description": "DataFlex is an object-oriented high-level programming language and a fourth generation visual tool 4GL for developing Windows, web and mobile software applications on one framework-based platform. It was introduced and developed by Data Access Corporation beginning in 1982.",
    "url": "https://en.wikipedia.org/wiki/DataFlex",
    "language_short": "",
    "code": "/tela\r\n\r\nHello World\r\n\r\n/*\r\n\r\nclearscreen\r\n\r\npage tela"
  },
  {
    "id": "328",
    "title": "db2",
    "description": "Db2 is a family of data management products, including database servers, developed by IBM. They initially supported the relational model, but were extended to support object–relational features and non-relational structures like JSON and XML. The brand name was originally styled as DB/2, then DB2 until 2017 and finally changed to its present form.",
    "url": "https://en.wikipedia.org/wiki/IBM_Db2_Family",
    "language_short": "sql",
    "code": "VALUES('hello world')"
  },
  {
    "id": "329",
    "title": "dBase",
    "description": "dBase (also stylized dBASE) was one of the first database management systems for microcomputers and the most successful in its day. The dBase system includes the core database engine, a query system, a forms engine, and a programming language that ties all of these components together. dBase's underlying file format, the .dbf file, is widely used in applications needing a simple format to store structured data.",
    "url": "https://en.wikipedia.org/wiki/DBase",
    "language_short": "",
    "code": "? \"Hello World\""
  },
  {
    "id": "330",
    "title": "DBFV!",
    "description": "DBFV! is an esoteric programming language by David Catt (User:David.werecat) where each line of code is a separate function.",
    "url": "https://esolangs.org/wiki/DBFV!",
    "language_short": "brainfuck",
    "code": "Z<9Z+A<Z.YA:[A-*YZ].AB<7C<2~1A<1B<0C<1~1A<1B<0C<8~1A<1B<0C<8~1A<1B<1C<1~1.AB<4C<4~1.AB<3C<2~1A<1B<1C<9~1A<1B<1C<1~1A<1B<1C<4~1A<1B<0C<8~1A<1B<0C<0~1.A"
  },
  {
    "id": "331",
    "title": "Dc",
    "description": "dc (desk calculator) is a cross-platform reverse-polish calculator which supports arbitrary-precision arithmetic. Written by Robert Morris while at Bell Labs,[2] it is one of the oldest Unix utilities, preceding even the invention of the C programming language. Like other utilities of that vintage, it has a powerful set of features but terse syntax. Traditionally, the bc calculator program (with infix notation) was implemented on top of dc.",
    "url": "https://en.wikipedia.org/wiki/Dc_(computer_program)",
    "language_short": "brainfuck",
    "code": "[Hello World\r\n]n"
  },
  {
    "id": "332",
    "title": "DCL (DIGITAL Command Language)",
    "description": "DCL (DIGITAL Command Language) is the standard command language adopted by most of the operating systems that were sold by the former Digital Equipment Corporation. DCL had its roots in IAS, TOPS-20, and RT-11 and was implemented as a standard across most of Digital's operating systems, notably RSX-11 and RSTS/E, but took its most powerful form in VAX/VMS (later OpenVMS). DCL continues to be developed by VSI as part of OpenVMS.",
    "url": "https://en.wikipedia.org/wiki/DIGITAL_Command_Language",
    "language_short": "cos",
    "code": "WRITE SYS$$OUTPUT \"Hello, world!\""
  },
  {
    "id": "333",
    "title": "DCPU",
    "description": "DCPU-16 assembler, disassembler and emulator written in Rust.",
    "url": "https://github.com/gustavla/dcpu16",
    "language_short": "",
    "code": "  set i, 0xf615\r\n  set j, 0x7349\r\n  hwn z\r\n  sub z, 1\r\n\r\n:device_detect_loop\r\n  hwq z\r\n\r\n  ife a, i\r\n    ife b, j\r\n      set pc, device_detect_ret\r\n\r\n  sub z, 1\r\n  ifa z, 0xffff\r\n    set pc, device_detect_loop\r\n\r\n:device_detect_ret\r\n  set a, 0\r\n  set b, [vidmem]\r\n  hwi z\r\n\r\n  set i, [vidmem]\r\n  set j, string\r\n  set c, 0xc\r\n\r\n:memcpy_loop\r\n  bor [j], 0xf000 ; OR with font style.\r\n  sti [i], [j]\r\n  sub c, 1\r\n  ife c, 0\r\n    sub pc, 1\r\n  set pc, memcpy_loop\r\n\r\n:display dat 0\r\n:vidmem dat 0x8000\r\n:string dat \"Hello World!\""
  },
  {
    "id": "334",
    "title": "dd/dd",
    "description": "dd/dd is something created by User:Zzo38, based on dd/sh but different. It is based on the UNIX 'dd' command, but it doesn't use 'dd' command, actually, because it is different.",
    "url": "https://esolangs.org/wiki/Dd/dd",
    "language_short": "brainfuck",
    "code": "<!Hello,\\ World!\\0A;"
  },
  {
    "id": "335",
    "title": "Decimal",
    "description": "Decimal, also called 09D, is an esoteric stack-based programming language that uses the characters 0 through 9 and D. Whitespace is ignored. Any other characters in the source code are simply printed.",
    "url": "https://esolangs.org/wiki/Decimal",
    "language_short": "brainfuck",
    "code": " 13072101108108111044032087111114108100033010D301\r\n;13                                               push string\r\n;  072                                            'H'\r\n;     101                                         'e'\r\n;        108                   "
  },
  {
    "id": "336",
    "title": "Defunc",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "4a++++a\r\nBa44444444a\r\nLBBB4440\r\n.+4444444.BB440\r\n..L\r\n.+++L\r\n.+++44444BB.B0\r\n.+++.+++L\r\n.L\r\n.BBB40\r\n.+B0"
  },
  {
    "id": "337",
    "title": "Delphi",
    "description": "Defunc is a function-based, minimalist esoteric programming language currently developed by User:Obvious. The language operates on functions that return integers. These functions can vary in input size. Its name comes from a portmanteau of \"define\" and \"function\"",
    "url": "https://esolangs.org/wiki/Defunc",
    "language_short": "delphi",
    "code": "// Hello World in Delphi\r\nProgram Hello_World;\r\n \r\n($$APPTYPE CONSOLE)\r\n \r\nBegin\r\n    WriteLn('Hello World');\r\nEnd."
  },
  {
    "id": "338",
    "title": "Deno",
    "description": "Deno is a runtime for JavaScript and TypeScript that is based on the V8 JavaScript engine and the Rust programming language. It was created by Ryan Dahl, original creator of Node.js, and is focused on productivity. It was announced by Dahl in 2018 during his talk \"10 Things I Regret About Node.js\". Deno explicitly takes on the role of both runtime and package manager within a single executable, rather than requiring a separate package-management program.",
    "url": "https://en.wikipedia.org/wiki/Deno_(software)",
    "language_short": "",
    "code": "console.log(\"Hello World\");"
  },
  {
    "id": "339",
    "title": "Desmos",
    "description": "Desmos is an advanced graphing calculator implemented as a web application and a mobile application written in JavaScript. It was founded by Eli Luberoff, a math and physics double major from Yale University, and was launched as a startup at TechCrunch's Disrupt New York conference in 2011.",
    "url": "https://en.wikipedia.org/wiki/Desmos_(graphing)",
    "language_short": "",
    "code": "x=0{0<y<4}\r\nx^2+y^2=4{0<x}{0<y}\r\n(x-3.5)^2+(y-1)^2=1^2{1<y}\r\n(x-3.5)^2+(y-1)^2=1^2{1<y}\r\ny=1{2.5<x<4.5}\r\nx=5{0<y<4}\r\nx=5.5{0<y<4}\r\n(x-7)^2+(y-1)^2=1^2\r\nx=-0.25y+11{0<y<2}\r\nx=0.5y+11{0<y<1}\r\nx=-0.5y+12{0<y<1}\r\nx=0.25y+12{0<y<2}\r\n(x-14)^2+(y-1)^2=1^2\r\n(x-17.5)^2+(y)^2=2^2{0<y}{x<17.5}\r\nx=18{0<y<4}\r\n(x-20.5)^2+(y)^2=2^2{0<y}{x<20.5}\r\nx=20.5{0<y<4}"
  },
  {
    "id": "340",
    "title": "DFA-er",
    "description": "DFA-er is an esoteric programming language created by User:Largejamie in March 2021 whose programs create and then run input on a Finite-state automaton.",
    "url": "https://esolangs.org/wiki/DFA-er",
    "language_short": "",
    "code": ".1001000.\r\n--1100101-\r\n.1100101.\r\n--1101100-\r\n.1101100.\r\n--1101100-\r\n-1-1101111-\r\n-10-1100100-\r\n.1101111.\r\n--101100-\r\n-1-1110010-\r\n.101100.\r\n--100000-\r\n.100000.\r\n--1110111-\r\n.1110111.\r\n--1101111-\r\n.1110010.\r\n--1101100-\r\n.1100100.\r\n--100001-\r\n..100001.\r\n!\r\n.......1..........1....10..."
  },
  {
    "id": "341",
    "title": "Difficult",
    "description": "Difficult is an esoteric programming language that tries to add every characteristic possible into the concept, making it harder to learn. It is created by User:A.",
    "url": "https://esolangs.org/wiki/Difficult",
    "language_short": "c-like",
    "code": "thing.console.print(\"Hello, world\")?"
  },
  {
    "id": "342",
    "title": "DigFill",
    "description": "DigFill is an esoteric programming language by Abraham Karplus, based on the idea that memory is only accessible once it has been dug out.",
    "url": "https://esolangs.org/wiki/DigFill",
    "language_short": "brainfuck",
    "code": "@n _Clear a space to output 1 bits_\r\n&s&n&s&s&n&s&s&s _H_\r\n&s&n&n&s&s&n&s&n _e_\r\n&s&n&n&s&n&n&s&s _l_\r\n&s&n&n&s&n&n&s&s _l_\r\n&s&n&n&s&n&n&n&n _o_\r\n&s&s&n&s&n&n&s&s _,_\r\n&s&s&n&s&s&s&s&s _ _\r\n&s&n&s&n&s&n&n&n _W_\r\n&s&n&n&s&n&n&n&n _o_\r\n&s&n&n&n&s&s&n&s _r_"
  },
  {
    "id": "343",
    "title": "Dirst",
    "description": "Dirst is an Esoteric programming language by David Catt (user:David.werecat) where the source code is a directory.",
    "url": "https://esolangs.org/wiki/Dirst",
    "language_short": "plaintext",
    "code": "dss_Hello, world-e.txt"
  },
  {
    "id": "344",
    "title": "Dis",
    "description": "Dis is an esoteric programming language designed by Ben Olmstead to walk the line between humanly impossible to program in and just extremely painful. While it is not quite as fearsome as Malbolge, Dis is still pretty bad.",
    "url": "https://esolangs.org/wiki/Dis",
    "language_short": "brainfuck",
    "code": "^!|||||||||||||||||||||||||||||||||{!!!||||||||||||||||||||||||||||||||||||||||\r\n||||||||||||||||*_>_*>|_*_>_*_>_*_>_*_>_*_>_*_>_*_>_*_>_*_>_*>__*|_>*__|*|||*__\r\n>*>||*>_|*__>*__>*__>*__>*__>*__>*__>*{_>*>_|*>||*__>*>||*>||*__>*__>*__>*>_|*>\r\n||*__>*__>*__>*__>*__>*__>*{__*>||*>_|*__>*__>*>||*>||*__>*>_|*>||*__>*__>*__>*\r\n__>*__>*__>*__>*{{>*>||*>_|*__>*__>*__>*__>*__>*__>*__>*__>*__>*{_>*>_|*>||*__>\r\n*>_|*>||*__>*__>*__>*__>*__>*__>*__>*__>*__>*{_>*>||*>_|*>|>*>||*>_|*__>*__>*__\r\n>*__>*__>*__>*__>*__>*{_>*>|_*>||*>_|*__>*>||*>_|*__>*__>*>_|*>||*__>*__>*__>*_\r\n_>*__>*__>*{__*>||*>_|*__>*>_|*>||*__>*>|_*>||*>_|*__>*__>*__>*__>*__>*__>*__>*\r\n__>*{_>*>|_*>||*>||*__>*__>*__>*__>*__>*__>*__>*__>*__>*{_>*>|_*>||*>_|*__>*__>\r\n*__>*__>*__>*__>*__>*__>*__>*{_>*__|*>__|*>__|*__|*__>*__>*__>*__>*__>*__>*__>*\r\n__>*__>*>_|*>||*{_>*__|*>__|*>__|*{_|*__>*>||*>||*{!"
  },
  {
    "id": "345",
    "title": "Divzeros",
    "description": "Divzeros program is in a format with function definitions name = expression and a semicolon, the last entry is the main program, without a name and equal sign. The function name can contain uppercase/lowercase letters, period, comma, and numbers, but it cannot start with a number.",
    "url": "https://esolangs.org/wiki/Divzeros",
    "language_short": "brainfuck",
    "code": "(?'H+?'e+?'l+?'l+?'o+?',+?' +?'W+?'o+?'r+?'l+?'d+?'!)/0"
  },
  {
    "id": "346",
    "title": "DL",
    "description": "DL is an esoteric programming language, created and implemented by User:Disa. DL source files can be compiled to Windows Executable files.",
    "url": "https://esolangs.org/wiki/DL",
    "language_short": "c-like",
    "code": "CREATE (Hello:Word { val: 'Hello' }), (World:Word { val: 'World!' }),\r\n(Hello)-[:SPACE]->(World)\r\nRETURN Hello,World"
  },
  {
    "id": "347",
    "title": "DNA Sharp (DNA#)",
    "description": "DNA# is an esoteric programming language which is based on the schematic structure of the DNA molecule and was invented 2009 by User: Benni++.",
    "url": "https://esolangs.org/wiki/DNA-Sharp",
    "language_short": "plaintext",
    "code": "   AT\r\n  T--A\r\n A----T\r\n T-----A\r\n T-----A\r\n G----C\r\n  T--A\r\n   GC\r\n   CG\r\n  C--G\r\n A----T\r\n A-----T\r\n T-----A\r\n A----T\r\n  A--T\r\n   GC\r\n   AT\r\n  C--G\r\n T----A\r\n C-----G\r\n T-----A\r\n G----C\r\n  C--G\r\n   CG\r\n   AT\r\n  A--T\r\n T----A\r\n A-----T\r\n A-----T\r\n G----C\r\n  A--T\r\n   GC\r\n   TA\r\n  G--C\r\n T----A\r\n G-----C\r\n C-----G\r\n C----G\r\n  A--T\r\n   GC\r\n   TA\r\n  G--C\r\n A----T\r\n G-----C\r\n A-----T\r\n C----G\r\n  A--T\r\n   CG\r\n   GC\r\n  A--T\r\n A----T\r\n C-----G\r\n A-----T\r\n C----G\r\n  A--T\r\n   CG\r\n   GC\r\n  A--T\r\n T----A\r\n G-----C\r\n A-----T\r\n G----C\r\n  A--T\r\n   CG\r\n   GC\r\n  A--T\r\n G----C\r\n A-----T\r\n A-----T\r\n T----A\r\n  A--T\r\n   TA\r\n   AT\r\n  T--A\r\n G----C\r\n A-----T\r\n A-----T\r\n A----T\r\n  G--C\r\n   AT\r\n   AT\r\n  G--C\r\n T----A\r\n G-----C\r\n A-----T\r\n G----C\r\n  G--C\r\n   AT\r\n   TA\r\n  T--A\r\n A----T\r\n G-----C\r\n G-----C\r\n A----T\r\n  A--T\r\n   TA\r\n   AT\r\n  T--A\r\n A----T\r\n T-----A\r\n G-----C\r\n A----T\r\n  T--A\r\n   TA\r\n   AT\r\n  G--C\r\n A----T\r\n T-----A\r\n A-----T\r\n T----A\r\n  G--C\r\n   AT\r\n   TA\r\n  T--A\r\n A----T\r\n G-----C\r\n G-----C\r\n A----T\r\n  A--T\r\n   AT\r\n   AT\r\n  T--A\r\n G----C\r\n A-----T"
  },
  {
    "id": "348",
    "title": "Dog",
    "description": "DOG is an esoteric programming language created by Jeremy Ruten. The commands in this program are supposed to look like commands you'd give to a dog. Numbers are represented as piles of cookies. Piles of cookies (numbers) are stored in dishes, plates, and the floor.",
    "url": "https://esolangs.org/wiki/DOG",
    "language_short": "",
    "code": "Day 1\r\n  Awake\r\n  food Recipe \"Hello World\"\r\n  Bowl food\r\n  Eat food\r\n  Outside\r\n  Walk\r\n  Poop food\r\n  Run\r\n  Inside\r\n  Sleep\r\nEndOf Day 1"
  },
  {
    "id": "349",
    "title": "DogeScript",
    "description": "Dogescript is a programming language that compiles into JavaScript. While JavaScript is a beautiful language, it’s not quite Doge friendly. Thankfully, Dogescript fixes that, so that your code can truly go to the moon.",
    "url": "https://dogescript.io/",
    "language_short": "javascript",
    "code": "shh such hello dogescript very next-gen wow difficulty\r\n \r\nplz console.loge with 'Hello World'"
  },
  {
    "id": "350",
    "title": "DOGO",
    "description": "DOGO is one of the lesser known programming languages. In the original Usenet post, DOGO was described as follows:",
    "url": "https://esolangs.org/wiki/DOGO",
    "language_short": "plaintext",
    "code": "roll-over roll-over heel roll-over roll-over roll-over roll-over heel heel heel \nheel heel heel heel heel heel sit roll-over roll-over roll-over heel roll-over \nroll-over roll-over heel heel heel heel heel heel heel heel roll-over roll-over \nheel roll-over roll-over roll-over roll-over roll-over heel roll-over roll-over \nroll-over roll-over roll-over stay roll-over roll-over roll-over heel roll-over \nroll-over heel roll-over roll-over roll-over heel roll-over roll-over roll-over \nroll-over heel heel heel heel heel heel heel sit roll-over roll-over roll-over \nheel roll-over roll-over roll-over heel heel heel heel roll-over roll-over heel \nroll-over roll-over roll-over roll-over roll-over heel roll-over roll-over \nroll-over roll-over roll-over stay roll-over roll-over roll-over heel roll-over  \nroll-over roll-over heel roll-over roll-over roll-over roll-over roll-over heel \nroll-over heel heel heel heel heel heel heel roll-over roll-over roll-over \nroll-over roll-over heel heel roll-over heel heel heel roll-over roll-over \nroll-over roll-over roll-over heel roll-over roll-over roll-over heel heel heel \nroll-over roll-over roll-over roll-over heel heel heel heel heel heel heel heel \nsit roll-over roll-over roll-over heel roll-over roll-over roll-over heel heel \nheel heel roll-over roll-over heel roll-over roll-over roll-over roll-over \nroll-over heel roll-over roll-over roll-over roll-over roll-over stay roll-over \nroll-over roll-over heel roll-over roll-over heel roll-over roll-over roll-over \nheel heel heel roll-over roll-over roll-over roll-over heel heel heel heel heel \nheel heel heel heel heel sit roll-over roll-over roll-over heel roll-over \nroll-over roll-over heel heel heel heel heel heel heel heel heel roll-over \nroll-over heel roll-over roll-over roll-over roll-over roll-over heel roll-over \nroll-over roll-over roll-over roll-over stay roll-over roll-over roll-over heel \nroll-over roll-over roll-over roll-over heel heel heel roll-over roll-over \nroll-over roll-over heel roll-over roll-over roll-over roll-over heel heel heel \nheel roll-over roll-over heel roll-over heel heel heel roll-over roll-over \nroll-over roll-over roll-over heel roll-over roll-over heel heel heel heel heel \nheel roll-over roll-over roll-over roll-over heel roll-over roll-over heel heel \nheel heel heel heel heel heel roll-over roll-over roll-over roll-over heel \nroll-over roll-over roll-over heel heel roll-over roll-over roll-over roll-over \nheel roll-over roll-over roll-over roll-over roll-over heel"
  },
  {
    "id": "351",
    "title": "dongbei",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "唠唠：“Hello World”。 "
  },
  {
    "id": "352",
    "title": "DOS",
    "description": "DOS (/dɒs/, /dɔːs/) is a platform-independent acronym for disk operating system which later became a common shorthand for disk-based operating systems on IBM PC compatibles. DOS primarily consists of Microsoft's MS-DOS and a rebranded version under the name IBM PC DOS, both of which were introduced in 1981. Later compatible systems from other manufacturers include DR DOS (1988), ROM-DOS (1989), PTS-DOS (1993), and FreeDOS (1998). MS-DOS dominated the IBM PC compatible market between 1981 and 1995.",
    "url": "https://en.wikipedia.org/wiki/DOS",
    "language_short": "dos",
    "code": "@echo Hello World!"
  },
  {
    "id": "353",
    "title": "Dotlang",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "•v\r\n#`Hello World`\r\n#"
  },
  {
    "id": "354",
    "title": "DPATL Python",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "{start python}\r\nprint(\"Hello World\")\r\n{end python}"
  },
  {
    "id": "355",
    "title": "Draco",
    "description": "Draco was a shareware programming language created by Chris Gray. First developed for CP/M systems, Amiga version followed in 1987.",
    "url": "https://en.wikipedia.org/wiki/Draco_(programming_language)",
    "language_short": "",
    "code": "proc main()void:\r\n    writeln(\"Hello World!\");\r\ncorp;"
  },
  {
    "id": "356",
    "title": "Dragon",
    "description": "DRAKON is an algorithmic visual programming and modeling language developed within the Buran space project following ergonomic design principles. The language provides a uniform way to represent flowcharts of any complexity that are easy to read and understand.",
    "url": "https://en.wikipedia.org/wiki/DRAKON",
    "language_short": "",
    "code": "showln \"Hello World\""
  },
  {
    "id": "357",
    "title": "DreamMaker",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "mob\r\n    Login()\r\n      world << \"Hello World\""
  },
  {
    "id": "358",
    "title": "Drive-In Window",
    "description": "Drive-In Window is an esoteric programming language created by User:JWinslow23 in 2013. The layout is similar to what someone would order at a restaurant.",
    "url": "https://esolangs.org/wiki/Drive-In_Window",
    "language_short": "plaintext",
    "code": "Hi, welcome to Hello_World_Buffet. Here is a menu.\n\nRice Krispie Treat: $10\nIce Cream: $30\nCookies: $70\n\nHere are your sides.\n\nWhipped Cream: $1\nChocolate: $2\nCaramel: $3\n\nMay I take your order?\n\nPerson 1 would like the Cookies with Chocolate.\nPerson 1 will pay for his order!\nPerson 2 would like the Ice Cream, hold the Whipped Cream.\nPerson 2 would also like what Person 1 has.\nPerson 2 will pay for his order!\nPerson 2 needs 7 dollars more for his order!\nPerson 2 will pay for his order!\nPerson 2 will pay for his order!\nPerson 2 needs 3 dollars more for his order!\nPerson 2 will pay for his order!\nPerson 3 would like the Ice Cream with Chocolate.\nPerson 3 will pay for his order!\nPerson 1 would also like the Rice Krispie Treat with Caramel.\nPerson 1 needs 2 more dollars for his order!\nPerson 1 will pay for his order!\nPerson 2 will pay for his order!\nPerson 2 needs 3 dollars more for his order!\nPerson 2 will pay for his order!\nPerson 2 needs 6 dollars less for his order!\nPerson 2 will pay for his order!\nPerson 2 needs 8 dollars less for his order!\nPerson 2 will pay for his order!\nPerson 3 needs 1 dollar more for his order!\nPerson 3 will pay for his order!\nJust wait while we decide...\n\nOK, that will be $1.14. Thanks for coming!"
  },
  {
    "id": "359",
    "title": "DStack",
    "description": "DStack is a stack-based esoteric language created by User:-Dark-Phantom- on November, 2015. The language uses two stacks, a cursor and a register, the four begin with the value zero. It has only one data type: unsigned integers of at least 8 bits. The cursor marks the position in the code of the instruction to be executed. There is also a dictionary which maps numbers to string literals.",
    "url": "https://esolangs.org/wiki/DStack",
    "language_short": "dos",
    "code": "@0\r\nHello, world!\r\n@\r\nad"
  },
  {
    "id": "360",
    "title": "DTrace",
    "description": "DTrace is a comprehensive dynamic tracing framework originally created by Sun Microsystems for troubleshooting kernel and application problems on production systems in real time. Originally developed for Solaris, it has since been released under the free Common Development and Distribution License (CDDL) in OpenSolaris and its descendant illumos, and has been ported to several other Unix-like systems.",
    "url": "https://en.wikipedia.org/wiki/DTrace",
    "language_short": "c-like",
    "code": "#!/usr/sbin/dtrace -qs\r\nBEGIN {\r\n    printf(\"Hello World\");\r\n    exit(0);\r\n}"
  },
  {
    "id": "361",
    "title": "DUP",
    "description": "Ian Osgood created a FALSE interpreter which he enhanced into a variant called DUP with several changes to make coding somewhat more convenient. In the spirit of FALSE, the language is named after Ian's favorite Forth stack operator.",
    "url": "https://esolangs.org/wiki/DUP",
    "language_short": "brainfuck",
    "code": "[\\[^^>][$$;,1+]#%%]p:\r\n0$$\"Hello, world!\"p;!10,"
  },
  {
    "id": "362",
    "title": "Dupdog",
    "description": "Dupdog is a thing made by Seven Inch Bread that looks like a self-modifying esoteric language.",
    "url": "https://esolangs.org/wiki/Dupdog",
    "language_short": "brainfuck",
    "code": "H?????????????????????????????????????????????????????????????????????????????????????????????????????????????????e????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
  },
  {
    "id": "363",
    "title": "Dylan",
    "description": "Dylan is a multi-paradigm programming language that includes support for functional and object-oriented programming (OOP), and is dynamic and reflective while providing a programming model designed to support generating efficient machine code, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer.",
    "url": "https://en.wikipedia.org/wiki/Dylan_(programming_language)",
    "language_short": "c-like",
    "code": "define method main (#rest args)\r\n    princ(\"Hello world!\");\r\nend;\r\n \r\nmain();"
  },
  {
    "id": "364",
    "title": "Dyvil",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "class Dyvil\r\n{\r\n    static func main(args: [String]) = print 'Hello World'\r\n}"
  },
  {
    "id": "365",
    "title": "E",
    "description": "E is an object-oriented programming language for secure distributed computing, created by Mark S. Miller, Dan Bornstein, Douglas Crockford, Chip Morningstar and others at Electric Communities in 1997.",
    "url": "https://en.wikipedia.org/wiki/E_(programming_language)",
    "language_short": "",
    "code": "println(\"Hello World\")"
  },
  {
    "id": "366",
    "title": "e62qpodb593",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "tqqqyoyyyyyypoyqqooqqqoztkkkkkkppotyyyyyppo2oqqqokpokkqqo"
  },
  {
    "id": "367",
    "title": "EBuild",
    "description": "An ebuild file is a text file, used by Gentoo package managers, which identifies a specific software package and how the Gentoo package manager should handle it. It uses a bash-like syntax style and is standardized through the EAPI version.",
    "url": "https://wiki.gentoo.org/wiki/Ebuild",
    "language_short": "x86asm",
    "code": "# Copyright 1999-2008 Gentoo Foundation\r\n# Distributed under the terms of the GNU General Public License v2\r\n# $$Header: $$\r\n \r\nDESCRIPTION=\"Hello World\"\r\nHOMEPAGE=\"http://hello-world.org/\"\r\nSRC_URI=\"http://hello-world.org/\"\r\n \r\nLICENSE=\"GPL\"\r\nSLOT=\"0\"\r\nKEY"
  },
  {
    "id": "368",
    "title": "Ec",
    "description": "eC (Ecere C) is an object-oriented programming language, defined as a super-set of the C language.",
    "url": "https://en.wikipedia.org/wiki/EC_(programming_language)",
    "language_short": "",
    "code": "class HelloWorldApp : Application\r\n{\r\n    void Main()\r\n    {\r\n      PrintLn(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "369",
    "title": "EchoLisp",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(display \"Hello World\" \"color:blue\")"
  },
  {
    "id": "370",
    "title": "Efene",
    "description": "Efene is an alternative syntax for the Erlang Programming Language focusing on simplicity, consistency, ease of use and programmer UX.",
    "url": "https://efene.org/",
    "language_short": "",
    "code": "@public\r\nrun = fn () {\r\n    io.format(\"Hello World~n\")\r\n}"
  },
  {
    "id": "371",
    "title": "Egl",
    "description": "EGL (Enterprise Generation Language), originally developed by IBM and now available as the EDT (EGL Development Tools) open source project under the Eclipse Public License (EPL), is a programming technology designed to meet the challenges of modern, multi-platform application development by providing a common language and programming model across languages, frameworks, and runtime platforms.",
    "url": "https://en.wikipedia.org/wiki/EGL_(programming_language)",
    "language_short": "",
    "code": "program HelloWorld\r\n    function main()\r\n        SysLib.writeStdout(\"Hello World\");\r\n    end\r\nend"
  },
  {
    "id": "372",
    "title": "Eiffel",
    "description": "Eiffel is an object-oriented programming language designed by Bertrand Meyer (an object-orientation proponent and author of Object-Oriented Software Construction) and Eiffel Software. Meyer conceived the language in 1985 with the goal of increasing the reliability of commercial software development; the first version becoming available in 1986. In 2005, Eiffel became an ISO-standardized language.",
    "url": "https://en.wikipedia.org/wiki/Eiffel_(programming_language)",
    "language_short": "c-like",
    "code": "indexing \"Hello World in Eiffel , from http://roesler-ac.de/wolfram/hello.htm#Eiffel\"\r\n \r\nclass HELLO\r\n \r\ncreation\r\n    run\r\n \r\nfeature\r\n \r\n    run is\r\n        local\r\n            io : BASIC_IO;\r\n        do\r\n            !!io;\r\n            io.put_string(\"He"
  },
  {
    "id": "373",
    "title": "ELANG",
    "description": "ELANG is an esoteric programming language by David Catt (User:David.werecat) which runs in two dimensions and has a two dimensional register matrix and a string register.",
    "url": "https://esolangs.org/wiki/ELANG",
    "language_short": "brainfuck",
    "code": "\"\" .H .e .l .l .o ., ._ .w .o .r .l .d .! ()"
  },
  {
    "id": "374",
    "title": "Elena",
    "description": "ELENA supports rich set of object-oriented features: abstract classes, interfaces, singletons, class constants, named constructors, variadic methods / constructors and class extensions. Several advanced features are implemented: re-sending and dispatching methods.",
    "url": "https://elena-lang.github.io/",
    "language_short": "",
    "code": "public program\r\n[\r\n    console writeLine(\"Hello World\").\r\n]"
  },
  {
    "id": "375",
    "title": "Elixir",
    "description": "Elixir is a functional, concurrent, general-purpose programming language that runs on the BEAM virtual machine used to implement the Erlang programming language. Elixir builds on top of Erlang and shares the same abstractions for building distributed, fault-tolerant applications. Elixir also provides productive tooling and an extensible design. The latter is supported by compile-time metaprogramming with macros and polymorphism via protocols.",
    "url": "https://en.wikipedia.org/wiki/Elixir_(programming_language)",
    "language_short": "elixir",
    "code": "IO.puts \"Defining the function world\""
  },
  {
    "id": "376",
    "title": "Elm",
    "description": "Elm is a domain-specific programming language for declaratively creating web browser-based graphical user interfaces. Elm is purely functional, and is developed with emphasis on usability, performance, and robustness. It advertises \"no runtime exceptions in practice\", made possible by the Elm compiler's static type checking.",
    "url": "https://en.wikipedia.org/wiki/Elm_(programming_language)",
    "language_short": "elm",
    "code": "import Html exposing (text)\r\n \r\nmain =\r\n    text \"Hello, World!\""
  },
  {
    "id": "377",
    "title": "EmacsLisp (Emacs Lisp)",
    "description": "Emacs Lisp is a dialect of the Lisp programming language used as a scripting language by Emacs (a text editor family most commonly associated with GNU Emacs and XEmacs). It is used for implementing most of the editing functionality built into Emacs, the remainder being written in C, as is the Lisp interpreter. Emacs Lisp is also termed Elisp, although there is also an older, unrelated Lisp dialect with that name.",
    "url": "https://en.wikipedia.org/wiki/Emacs_Lisp",
    "language_short": "lisp",
    "code": ";;for emacs elisp\r\n \r\n(message \"hello,world\")"
  },
  {
    "id": "378",
    "title": "Emerald",
    "description": "Emerald is a distributed, object-oriented programming language developed in the 1980s by Andrew P. Black, Norman C. Hutchinson, Eric B. Jul, and Henry M. Levy, in the Department of Computer Science at the University of Washington.",
    "url": "https://en.wikipedia.org/wiki/Emerald_(programming_language)",
    "language_short": "",
    "code": "const main <- object mainProgram\r\n    initially\r\n      stdout.putString[\"Hello World\\n\"]\r\n    end initially\r\nend mainProgram"
  },
  {
    "id": "379",
    "title": "Emmental",
    "description": "Emmental is an esoteric programming language designed by Chris Pressey in 2007.\r\nEmmental is a self-modifying language. It is defined by a meta-circular interpreter (an Emmental interpreter described in Emmental.) The meta-circular interpreter provides an operation which modifies operations of the meta-circular interpreter.",
    "url": "https://esolangs.org/wiki/Emmental",
    "language_short": "brainfuck",
    "code": ";#58#126#63#36!;#46#36#!;#0#1!;#0#2!;#0#3!;#0#4!;#0#5!;#0#6!;#0#7!#0#33#100#108#114#111#119#32#44#111#108#108#101#72$$"
  },
  {
    "id": "380",
    "title": "Emoji",
    "description": "Emoji is a stack-based esoteric programming language that uses emoji to manipulate the stack. In most cases, non-emoji characters are ignored.",
    "url": "https://esolangs.org/wiki/Emoji",
    "language_short": "plaintext",
    "code": "💬Hello World💬➡"
  },
  {
    "id": "381",
    "title": "Emoji Code",
    "description": "Emojicode is a straightforward language to learn, whatever background you have. Our documentation is known to be excellent and stuffed with walk-through guides and examples",
    "url": "https://www.emojicode.org/",
    "language_short": "plaintext",
    "code": "🏁 🍇\r\n    😀 🔤Hello World🔤❗️\r\n🍉"
  },
  {
    "id": "382",
    "title": "Emoji gramming",
    "description": "Emoji-gramming (proper name 💻) is a simple emoji-based esolang.",
    "url": "https://esolangs.org/wiki/Emoji-gramming",
    "language_short": "plaintext",
    "code": "😊🕐💖\r\n😇🕐🕐\r\n😊🕑🕐\r\n😇🕑🕑\r\n😊🕒🕑\r\n😇🕒🕒\r\n😊♈💖\r\n😇♈🕒\r\n😊📢♈\r\n😊♈💜\r\n😇♈💞\r\n😇♈🕑\r\n😇♈🕒\r\n😊📢♈\r\n😊♉💞\r\n😇♉💖\r\n😇♉🕑\r\n😇♉🕒\r\n😊📢♉\r\n😊📢♉\r\n😊♊💜\r\n😇♊💕\r\n😇♊💞\r\n😇♊💖\r\n😇♊🕑\r\n😇♊🕒\r\n😊📢♊\r\n😊♈💞\r\n😇♈💖\r\n😇♈🕑\r\n😊📢♈\r\n😊📢🕑\r\n😊♈💜\r\n😇♈💕\r\n😇♈💞\r\n😇♈🕐\r\n😇♈🕒\r\n😊📢♈\r\n😊📢♊\r\n😊♈💕\r\n😇♈🕐\r\n😇♈🕑\r\n😇♈🕒\r\n😊📢♈\r\n😊📢♉\r\n😊♈💞\r\n😇♈🕑\r\n😇♈🕒\r\n😊📢♈\r\n😊♈💜\r\n😇♈🕑\r\n😊📢♈\r\n😊♈💖\r\n😇♈💕\r\n😊📢♈"
  },
  {
    "id": "383",
    "title": "Emoticon",
    "description": "Emoticon, designed by David Donachie in 2004, is an esoteric",
    "url": "https://esolangs.org/wiki/Emoticon",
    "language_short": "plaintext",
    "code": "Hello World! :Q S::P :P"
  },
  {
    "id": "384",
    "title": "Enigma 2D (Enigma-2D)",
    "description": "Enigma-2D is the name of a 2D programming language made by User:Alegend, on February 14, 2010. It is a mix of Minimal-2D, and BF. It only has 12 commands:",
    "url": "https://esolangs.org/wiki/Enigma-2D",
    "language_short": "brainfuck",
    "code": ">+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.>>>++++++++[<++++>-]D\r\n        .+>>.--------.------.+++.<<<<.---<]->+++++++++<[++++++++++>>>.<L"
  },
  {
    "id": "385",
    "title": "Enkelt",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "skriv(\"Hello World\")"
  },
  {
    "id": "386",
    "title": "EnScript",
    "description": "EnScript is an esoteric programming language invented by User:A mainly based on encrypting data. It was created due to the desire of creating a simple language(4 instructions) that will probably result in complex documents. It is created to make writing an implementation very hard, due to the CHS command.",
    "url": "https://esolangs.org/wiki/EnScript",
    "language_short": "avrasm",
    "code": "LDA A, 72\r\nOUT A\r\nLDA A, 101\r\nOUT A\r\nLDA A, 108\r\nOUT A\r\nOUT A\r\nLDA A, 111\r\nOUT A\r\nLDA A, 44\r\nOUT A\r\nLDA A, 32\r\nOUT A\r\nLDA A, 119\r\nOUT A\r\nLDA A, 111\r\nOUT A\r\nLDA A, 114\r\nOUT A\r\nLDA A, 108\r\nOUT A\r\nLDA A, 100\r\nOUT A\r\nLDA A, 33\r\nOUT A\r\nLDA A, 9"
  },
  {
    "id": "387",
    "title": "Eodermdrome",
    "description": "Eodermdrome is a graph-rewriting tarpit created in 2008 by User:ais523.",
    "url": "https://esolangs.org/wiki/Eodermdrome",
    "language_short": "plaintext",
    "code": "this (Hello, World!) says... hi!"
  },
  {
    "id": "388",
    "title": "EOOOL",
    "description": "EOOOL stands for Esoteric Obfuscated Object Oriented Language (I know it is redundant to say a language is esoteric or obfuscated on this site, but I do not really care.)",
    "url": "https://esolangs.org/wiki/EOOOL",
    "language_short": "brainfuck",
    "code": ",{,{89+(59+~1&(7~+1&2&2&((3~+1&(4~(32_((6~+((8+(38_(},}"
  },
  {
    "id": "389",
    "title": "Erlang",
    "description": "Erlang (/ˈɜːrlæŋ/ UR-lang) is a general-purpose, concurrent, functional programming language, and a garbage-collected runtime system. The term Erlang is used interchangeably with Erlang/OTP, or Open Telecom Platform (OTP), which consists of the Erlang runtime system, several ready-to-use components (OTP) mainly written in Erlang, and a set of design principles for Erlang programs.",
    "url": "https://en.wikipedia.org/wiki/Erlang_(programming_language)",
    "language_short": "erlang",
    "code": "-module(erlang_hw).\r\n-export([start/0]).\r\n \r\nstart() ->\r\n    io:format(\"Hello World~n\")."
  },
  {
    "id": "390",
    "title": "Erlang EScript",
    "description": "",
    "url": "",
    "language_short": "erlang",
    "code": "#!/usr/bin/env escript\r\n \r\nmain(_) ->\r\n    io:format(\"Hello World~n\")."
  },
  {
    "id": "391",
    "title": "es",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "echo Hello World"
  },
  {
    "id": "392",
    "title": "Euphoria",
    "description": "Euphoria is a programming language created by Robert Craig of Rapid Deployment Software in Toronto, Ontario, Canada. Initially developed (though not publicly released) on the Atari ST, the first commercial release was for the 16-bit DOS platform and was proprietary. In 2006, with the release of version 3, Euphoria became open-source software. The openEuphoria Group continues to administer and develop the project. In December 2010, the openEuphoria Group released version 4 of openEuphoria along with a new identity and mascot for the project. OpenEuphoria is currently available for Windows, Linux, macOS and three flavors of *BSD.",
    "url": "https://en.wikipedia.org/wiki/Euphoria_(programming_language)",
    "language_short": "",
    "code": "puts(1, \"Hello World\")"
  },
  {
    "id": "393",
    "title": "evil",
    "description": "evil is a minimal language of the line-noise school. It was devised by Tom Wrensch in about 1999, while he was a graduate student at the University of Colorado.",
    "url": "https://esolangs.org/wiki/Evil",
    "language_short": "plaintext",
    "code": "    zaeeeaeeew\r\n    zaeeaeeaeaw\r\n    zaeaeeaeeaew\r\n    zaeaeeaeeaew\r\n    zuueeueew\r\n    zaeeeeew\r\n    zuueueueeeew\r\n    zuueeueew\r\n    zaeeaeeaeaeew\r\n    zaeaeeaeeaew\r\n    zaeeaeeaew\r\n    zaeeeeeaw\r\n    zaeeeeeaeawuuuw\r\n"
  },
  {
    "id": "394",
    "title": "Exp",
    "description": "Exp (short for \"Expression\") is an esoteric programming language based on expressions, created by User:PythonshellDebugwindow.",
    "url": "https://esolangs.org/wiki/Exp",
    "language_short": "brainfuck",
    "code": "{<|^^^^^^^^^| x |^^^^^^^^|>}\r\n{<|^^^^^^^^^^| x |^^^^^^^| - |^|>}\r\n{<|^^^^^^^^^| x |^^^^^^^^| + |^^^^|>}\r\n{<|^^^^^^^^^| x |^^^^^^^^| + |^^^^|>}\r\n{<|^^^^^^^^^^| x |^^^^^^^^| - |^|>}\r\n{<|^^^^^^^^| x |^^^^| - |^|>}\r\n{<|^^^^^^^^^^| x |^^^^^^^^^| - |^^^|>}\r\n{<|^^^^^^^^^^| x |^^^^^^^^| - |^|>}\r\n{<|^^^^^^^^^^| x |^^^^^^^^| + |^^|>}\r\n{<|^^^^^^^^^| x |^^^^^^^^| + |^^^^|>}\r\n{<|^^^^^^^^^^^^^^^^^| x |^^^^|>}"
  },
  {
    "id": "395",
    "title": "Express",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "const express = require('express')\r\nconst app = express()\r\n\r\napp.get('/', (_, res) => res.send(\"Hello World\"))\r\n\r\napp.listen(8080)"
  },
  {
    "id": "396",
    "title": "F",
    "description": "F is a modular, compiled, numeric programming language, designed for scientific programming and scientific computation. F was developed as a modern Fortran, thus making it a subset of Fortran 95. It combines both numerical and data abstraction features from these languages. F is also backwards compatible with Fortran 77, allowing calls to Fortran 77 programs. F was first included in the g95 compiler.",
    "url": "https://en.wikipedia.org/wiki/F_(programming_language)",
    "language_short": "",
    "code": "program hello\r\n  print *, \"Hello World\"\r\nend program hello"
  },
  {
    "id": "397",
    "title": "F-PULSE",
    "description": "F-PULSE, is an esoteric programming language derived from brainfuck with a PHP interpreter. Its commands are separated by spaces, and commands are text commands like in asm. In F-PULSE there are no input commands, only output commands.",
    "url": "https://esolangs.org/wiki/F-PULSE",
    "language_short": "php",
    "code": "PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS CBGN[ NXT PLS PLS PLS PLS PLS PLS PLS NXT PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS NXT PLS PLS PLS LST LST LST MNS ]CEND NXT PLS PLS OUT NXT PLS OUT PLS PLS PLS PLS PLS PLS PLS OUT OUT PLS PLS PLS OUT NXT PLS PLS OUT LST LST PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS PLS OUT NXT OUT PLS PLS PLS OUT MNS MNS MNS MNS MNS MNS OUT MNS MNS MNS MNS MNS MNS MNS MNS OUT NXT PLS OUT NXT PTN OUT"
  },
  {
    "id": "398",
    "title": "Factor",
    "description": "Factor (also known as Factors) is a zero-dimensional, cell-based, imperative programming language invented by User:Bangyen in 2020.",
    "url": "https://esolangs.org/wiki/Factor",
    "language_short": "c-like",
    "code": "USING: io ;\r\n\"Hello World\" print"
  },
  {
    "id": "399",
    "title": "FakeASM",
    "description": "FakeASM (Fake Assembly) is an esoteric programming language in the past by User:CosmoConsole (in fact, so past that the original interpreter source is now thought to be lost). Made to resemble assembly languages of various processors, like the 65c816, code written with FakeASM may look like an assembly language at first. The original command-line interpreter was created in 2012 with VB.net.",
    "url": "https://esolangs.org/wiki/FakeASM",
    "language_short": "c-like",
    "code": " ECHO \"Hello, world!\"\r\n STP"
  },
  {
    "id": "400",
    "title": "falcon",
    "description": "Falcon is an open source, multi-paradigm programming language. Design and implementation is led by Giancarlo Niccolai, a native of Bologna, Italy and Information Technology graduate from Pistoia.",
    "url": "https://en.everybodywiki.com/Falcon_(programming_language)",
    "language_short": "bash",
    "code": "#!/usr/bin/env falcon\r\n \r\n> \"Hello, World\""
  },
  {
    "id": "401",
    "title": "FALSE",
    "description": "FALSE (named after the author's favourite truth value) is an early Forth-like esoteric programming language invented by Wouter van Oortmerssen in 1993, with the goal of creating a powerful (and obfuscated) language with as small a compiler as possible. The original compiler is 1024 bytes, written in 68000 assembler. FALSE inspired the prominent esoteric languages Brainfuck and Befunge, among other languages.",
    "url": "https://esolangs.org/wiki/FALSE",
    "language_short": "plaintext",
    "code": "\"Hello, World!\r\n\""
  },
  {
    "id": "402",
    "title": "Fancy",
    "description": "Fancy is a dynamic, pure object-oriented, class-based programming language with built-in support for futures and actors.",
    "url": "http://www.fancy-lang.org/",
    "language_short": "c-like",
    "code": "\"Hello, world!\" println"
  },
  {
    "id": "403",
    "title": "Fantom",
    "description": "Fantom is a general purpose object-oriented programming language created by Brian and Andy Frank that runs on the Java Runtime Environment (JRE), JavaScript, and the .NET Common Language Runtime (CLR) (.NET support is considered \"prototype\" status). Its primary design goal is to provide a standard library API that abstracts away the question of whether the code will ultimately run on the JRE or CLR. Like C# and Java, Fantom uses a curly brace syntax. The language supports functional programming through closures and concurrency through the Actor model. Fantom takes a \"middle of the road\" approach to its type system, blending together aspects of both static and dynamic typing.",
    "url": "https://en.wikipedia.org/wiki/Fantom_(programming_language)",
    "language_short": "c-like",
    "code": "// Hello from Fantom!\r\nclass HelloWorld {\r\n    static Void main() {\r\n        echo(\"Hello, World!\")\r\n    }\r\n}"
  },
  {
    "id": "404",
    "title": "Fennel",
    "description": "Fennel is a programming language that brings together the speed, simplicity, and reach of Lua with the flexibility of a lisp syntax and macro system.",
    "url": "https://fennel-lang.org/",
    "language_short": "",
    "code": "(print \"Hello World\")"
  },
  {
    "id": "405",
    "title": "Ferite",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "uses \"console\";\r\nConsole.println( \"Hello World\" );"
  },
  {
    "id": "406",
    "title": "Fetlang",
    "description": "Fetlang is a statically typed, procedural, esoteric programming language and reference implementation. It is designed such that source code looks like poorly written fetish erotica.",
    "url": "https://esolangs.org/wiki/Fetlang",
    "language_short": "c-like",
    "code": "Make slave scream \"Hello World!\""
  },
  {
    "id": "407",
    "title": "FiM++",
    "description": "FiM++ is an object-oriented language made by fans of My Little Pony: Friendship is Magic, which takes its name from the initials of the show's subtitle. Its syntax and structure are inspired by Java and ALGOL. The original idea was published on October 4th, 2012 by Cereal Velocity, one of the bloggers on Equestria Daily and inventor of the language, after being unable to find pre-existing programming language based on My Little Pony. It was then picked up by an team of community programmers and completed within the month.",
    "url": "https://esolangs.org/wiki/FiM%2B%2B",
    "language_short": "plaintext",
    "code": " Dear Princess Celestia: Hello World!"
  },
  {
    "id": "408",
    "title": "Fish",
    "description": "fish is a Unix shell with a focus on interactivity and usability. Fish is designed to give the user features by default, rather than by configuration. Fish is considered an exotic shell since it does not rigorously adhere to POSIX shell standards, at the discretion of the maintainers.",
    "url": "https://en.wikipedia.org/wiki/Fish_(Unix_shell)",
    "language_short": "bash",
    "code": "#!/usr/bin/env fish\r\necho \"Hello, World!\""
  },
  {
    "id": "409",
    "title": "Fishing",
    "description": "Fishing is a two dimensional esoteric programming language created by User:OriginalOldMan in 2013. Programs are controlled by a fisherman who walks along a dock, casts, and catches different fish. Commands can be given through the dock that the fisherman walks on and through the fish that the fisherman catches. Fishing's memory is in the form of a tape like BF's memory tape.",
    "url": "https://esolangs.org/wiki/Fishing",
    "language_short": "brainfuck",
    "code": "v+CCCCCCCCCCCCCCCC\r\n    `Hello, World!`N"
  },
  {
    "id": "410",
    "title": "Fjölnir (Fjolnir / Fjoelnir)",
    "description": "Fjölnir (also Fjolnir or Fjoelnir) is a programming language developed by professor Snorri Agnarsson of computer science at Háskóli Íslands (University of Iceland) that was mostly used in the 1980s. The source files usually have the extension fjo or sma.",
    "url": "https://en.wikipedia.org/wiki/Fj%C3%B6lnir_(programming_language)",
    "language_short": "c-like",
    "code": "\"hello\" < main\r\n{\r\n    main ->\r\n    stef(;)\r\n    stofn\r\n        skrifastreng(;\"Hello World!\"),\r\n    stofnlok\r\n}\r\n*\r\n\"GRUNNUR\"\r\n;"
  },
  {
    "id": "411",
    "title": "FlaScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "main() -> main {\r\n  print(string) -> \"Hello World\"\r\n  print(newline)\r\n} main;"
  },
  {
    "id": "412",
    "title": "Flask",
    "description": "Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. However, Flask supports extensions that can add application features as if they were implemented in Flask itself. Extensions exist for object-relational mappers, form validation, upload handling, various open authentication technologies and several common framework related tools.",
    "url": "https://en.wikipedia.org/wiki/Flask_(web_framework)",
    "language_short": "",
    "code": "from flask import Flask\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef hello():\r\n    return \"Hello World\"\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()"
  },
  {
    "id": "413",
    "title": "FlinnScrip",
    "description": "FlinnScrip is a programming language created in 2021 by Dtuser1337. The program syntax is inspired by Jug.",
    "url": "https://esolangs.org/wiki/FlinnScrip",
    "language_short": "",
    "code": "print(\"Hello World!\");"
  },
  {
    "id": "414",
    "title": "Flip",
    "description": "Flip is a two-dimensional esoteric programming language designed by Rune Zedeler and Erik Søe Sørensen. Computation is performed by balls carrying values colliding with playfield elements; it has been described as \"a little like a game of billiards, if you play Programmers' Billiards.\" The only other data storage mechanism is the possibility to self-modifyingly flip diagonal walls (called \"flippers\") - similarily to how the much newer BackFlip operates. Combined with elements which split and combine balls this requires rather than allows for multithreaded programming.",
    "url": "https://esolangs.org/wiki/Flip",
    "language_short": "brainfuck",
    "code": " >0> 5+  \\\r\n@'+  \r\n    >0>4*+\\\r\n+,  /    /\r\nvXv/   /\r\n    \\   \\  \\  \\  \\  \\  \\  \\  \\  \\  \\  \\  \\  \\ \r\n        4@ 6@ 7@ 7@ 7@ 0@ 5@ 7@ 8@ 7@ 6@ 0@ 2@\r\n    *<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~<<\r\n    P++<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~<<\r\n    Q  0@ 9@ 6@ 6@ 9@ 0@ 5@ 9@ 2@ 6@ 8@ 1@ 2@\r\n\\     /  /  /  /  /  /  /  /  /  /  /  /  /"
  },
  {
    "id": "415",
    "title": "FlipJump",
    "description": "FlipJump is a 1-instruction language, intending to be the simplest / most-primitive OISC. It successfully shows that you need practically nothing to do anything.",
    "url": "https://esolangs.org/wiki/FlipJump",
    "language_short": "",
    "code": "       ;start\r\nIO:    ;\r\nstart:\r\n       output\r\n\"Hello, World!\\n\"\r\nend:   ;end\r\n\r\ndef output_bit bit {\r\n    bit ? IO+1 : IO;  // output (0/1) is done by flipping the 2w / 2w+1 bits.\r\n}\r\n\r\ndef output str {\r\n\r\n    rep(((#str)+7)&(0-8), i) output_bit (str>>i)&1  // # is the number of bits needed to represent the number\r\n}"
  },
  {
    "id": "416",
    "title": "Flutter",
    "description": "Flutter is an open-source UI software development kit created by Google. It is used to develop applications for Android, iOS, Linux, Mac, Windows, Google Fuchsia, and the web from a single codebase.",
    "url": "https://en.wikipedia.org/wiki/Flutter_(software)",
    "language_short": "",
    "code": "import 'package:flutter/widgets.dart';\r\n\r\nvoid main() {\r\n  runApp(\r\n   Text(\r\n       'Hello World',\r\n        textDirection: TextDirection.ltr,\r\n    ),\r\n  );\r\n}"
  },
  {
    "id": "417",
    "title": "Fob",
    "description": "Fob was created by Tslil Clingman, aka Hiato, in early 2010 and represented the author's wishes for a stack based, modal, argument-less-syntax and slightly obfuscated language. It came about as the product of many proto-esolangs horribly mutilated and then joined together in a haphazard manner.",
    "url": "https://esolangs.org/wiki/Fob",
    "language_short": "brainfuck",
    "code": " $$:#&$$Hello, World!:#<>#="
  },
  {
    "id": "418",
    "title": "focal",
    "description": "FOCAL is an interactive interpreted programming language based on JOSS and primarily used on Digital Equipment Corporation (DEC) PDP-series machines. The name is an acronym for Formulating On-Line Calculations in Algebraic Language, or for FOrmula CALculator.",
    "url": "https://en.wikipedia.org/wiki/FOCAL_(programming_language)",
    "language_short": "plaintext",
    "code": "0.1.0.1 TYPE \"HELLO WORLD\" , !"
  },
  {
    "id": "419",
    "title": "Fog.fog",
    "description": "Fog computing or fog networking, also known as fogging, is an architecture that uses edge devices to carry out a substantial amount of computation, storage, and communication locally and routed over the Internet backbone.",
    "url": "https://en.wikipedia.org/wiki/Fog_computing",
    "language_short": "xml",
    "code": "<ins>Hello, World!</ins>"
  },
  {
    "id": "420",
    "title": "Foo",
    "description": "Foo is an esoteric programming language, created by User:Feky in February 2008. It is inspired mainly by Brainfuck.",
    "url": "https://esolangs.org/wiki/Foo",
    "language_short": "plaintext",
    "code": "\"Hello, World!\""
  },
  {
    "id": "421",
    "title": "Foobar and Foobaz and Barbaz, oh my!",
    "description": "Foobar and Foobaz and Barbaz, oh my! is a simple esolang by User:Ihope127. The syntax is as follows:",
    "url": "https://esolangs.org/wiki/Foobar_and_Foobaz_and_Barbaz,_oh_my!",
    "language_short": "plaintext",
    "code": "72 and 27 and 27, oh my.\r\n101 and 101 and 101, oh my.\r\n108 and 108 and 108, oh my.\r\n108 and 108 and 108, oh my.\r\n111 and 111 and 111, oh my.\r\n44 and 44 and 44, oh my.\r\n32 and 32 and 32, oh my.\r\n119 and 119 and 119, oh my.\r\n111 and 111 and 111, oh my.\r\n114 and 114 and 114, oh my.\r\n108 and 108 and 108, oh my.\r\n100 and 100 and 100, oh my.\r\n33 and 33 and 33, oh my.\r\n10 and 10 and 10, oh my.\r\n"
  },
  {
    "id": "422",
    "title": "Forobj",
    "description": "Forobj is an object oriented programming language created by User:Fergusq. It is designed to be easily extendable and almost impossible to parse without interpreting.",
    "url": "https://esolangs.org/wiki/Forobj",
    "language_short": "plaintext",
    "code": "\"Hello world!\\n\"d"
  },
  {
    "id": "423",
    "title": "Forth",
    "description": "Forth is an imperative stack-based computer programming language and environment originally designed by Chuck Moore. Language features include structured programming, reflection (the ability to examine and modify program structure during execution), concatenative programming (functions are composed with juxtaposition) and extensibility (the programmer can create new commands). Although not an acronym, the language's name is sometimes spelled with all capital letters as FORTH, following the customary usage during its earlier years.",
    "url": "https://en.wikipedia.org/wiki/Forth_(programming_language)",
    "language_short": "plaintext",
    "code": ".( Hello, world!)"
  },
  {
    "id": "424",
    "title": "Fortob",
    "description": "Fortob is the second language of the For series, first being Forobj. It shares many aspects of its predecessor. The main difference is its lexical structure, as it is based on tokens and not characters. The name is a play of \"forobj\" and \"token\".",
    "url": "https://esolangs.org/wiki/Fortob",
    "language_short": "bash",
    "code": "@print[$$!.readcom.println;$$\\.push:'\\;]\\;\r\nprint \"Hello world!\"\\;"
  },
  {
    "id": "425",
    "title": "Fortran",
    "description": "Fortran (/ˈfɔːrtræn/; formerly FORTRAN, derived from Formula Translation) is a general-purpose, compiled imperative programming language that is especially suited to numeric computation and scientific computing.",
    "url": "https://en.wikipedia.org/wiki/Fortran",
    "language_short": "c-like",
    "code": "program helloworld\r\nprint *,'Hello World'\r\nend program helloworld"
  },
  {
    "id": "426",
    "title": "Fortran77",
    "description": "Fortran (/ˈfɔːrtræn/; formerly FORTRAN, derived from Formula Translation) is a general-purpose, compiled imperative programming language that is especially suited to numeric computation and scientific computing.",
    "url": "https://en.wikipedia.org/wiki/Fortran#FORTRAN_77",
    "language_short": "c-like",
    "code": "    PROGRAM HELLOW\r\n    WRITE(UNIT=*, FMT=*) 'Hello World'\r\n    END"
  },
  {
    "id": "427",
    "title": "Fourier",
    "description": "Fourier is a golfing language created by Stack Exchange user Beta Decay, with similarities to Brainfuck, but more advanced. It is still undergoing development as of August 2015.",
    "url": "https://esolangs.org/wiki/Fourier",
    "language_short": "brainfuck",
    "code": "72a101a108aa111a44a32a119a111a114a108a100a33a10a"
  },
  {
    "id": "428",
    "title": "FoxPro",
    "description": "FoxPro was a text-based procedurally oriented programming language and database management system (DBMS), and it was also an object-oriented programming language, originally published by Fox Software and later by Microsoft, for MS-DOS, Windows, Macintosh, and UNIX. The final published release of FoxPro was 2.6. Development continued under the Visual FoxPro label, which in turn was discontinued in 2007.",
    "url": "https://en.wikipedia.org/wiki/FoxPro",
    "language_short": "",
    "code": "? \"Hello World\""
  },
  {
    "id": "429",
    "title": "Fractran++",
    "description": "This document describes briefly the specifications of Fractran programming language. Once the Fractran language is documented, there follows a definition of the upgraded Fractran language called Fractran++. There are described some aspects of this new language, as well as some suggestions for implementing Fractran++ compilers and interpreters. The target is to create a full functional language, by the use of just numeric notations and fractional symbols.",
    "url": "https://esolangs.org/wiki/Fractran%2B%2B",
    "language_short": "",
    "code": "3,-1/2,(2*37)/3,0/0,<71 101 108 108 111 32 87 111 114 108 100 0>/37,4/0"
  },
  {
    "id": "430",
    "title": "FRAK",
    "description": "FRAK is an assembler for the esoteric language brainfuck. It works by simulating an 8-bit conventional computer on the brainfuck machine. The simulated architecture is a RISC whose instruction set is inspired by Processor/1. The word \"Frak\" is the offensive word used in Battlestar Galactica instead of fuck. It was selected to represent the fact that an assembler 'fracked' the goal of brainfuck by allowing the writing of brainfuck program in an intuitive and not clever way.",
    "url": "https://esolangs.org/wiki/FRAK",
    "language_short": "mipsasm",
    "code": "LI 0,C'H'\r\nPUT 0\r\nLI 0,C'e'\r\nPUT 0\r\nLI 0,C'l'\r\nPUT 0\r\nLI 0,C'l'\r\nPUT 0\r\nLI 0,C'o'\r\nPUT 0\r\nLI 0,32\r\nPUT 0\r\nLI 0,C'w'\r\nPUT 0\r\nLI 0,C'o'\r\nPUT 0\r\nLI 0,C'r'\r\nPUT 0\r\nLI 0,C'l'\r\nPUT 0\r\nLI 0,C'd'\r\nPUT 0\r\nLI 0,C'!'\r\nPUT 0"
  },
  {
    "id": "431",
    "title": "FrancePROG",
    "description": "FrancePROG is a french half-assisting programming tool (develops itself your ideas), that can only be opened in Microsoft Windows computers because of the fact that it's written in Batch. It is designed to be easy to understand, and having a totally familiar language, even if some words are more complex and mathematics-based. The syntax looks mostly like a programming language, and thus, he has a place in the programming world.",
    "url": "https://esolangs.org/wiki/FrancePROG",
    "language_short": "plaintext",
    "code": "Alors en gros, on va commencer un programme.\r\nCe serait bien si on écrivait «Hello, world!».\r\nAprès, on arrête le programme un instant! C'est bien ça."
  },
  {
    "id": "432",
    "title": "Freebrain",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "!->:>_^>~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<^_<:\r\n!->:>_^>~+++++++++++++++++++++++++++++++++<^_<:\r\n[!->:>_^> ? <^_<:] ?* (~++++++++++++++++++++++++++++++++++++++++++++++++++) *? !->:>_^>(~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++)<*>(~++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++)<^_<:"
  },
  {
    "id": "433",
    "title": "Frink",
    "description": "Frink is a computer programming language. It is, according to creator of the language, \"designed to make physical calculations simple, to help ensure that answers come out right, and to make a tool that's really useful in the real world. It tracks units of measure (feet, meters, kilograms, watts, etc.) through all calculations, allowing you to mix units of measure transparently, and helps you easily verify that your answers make sense.",
    "url": "https://en.wikipedia.org/wiki/Frink_(programming_language)\"",
    "language_short": "",
    "code": "println[\"Hello World!\"]"
  },
  {
    "id": "434",
    "title": "FROM HERE TO THERE",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "FROM \"Hello World\" TO OUT"
  },
  {
    "id": "435",
    "title": "FSharp (F#)",
    "description": "F# (pronounced F sharp) is a functional-first, general purpose, strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. F# is most often used as a cross-platform Common Language Infrastructure (CLI) language on .NET, but it can also generate JavaScript and graphics processing unit (GPU) code.",
    "url": "https://en.wikipedia.org/wiki/F_Sharp_(programming_language)",
    "language_short": "fsharp",
    "code": "printfn \"Hello World!\""
  },
  {
    "id": "436",
    "title": "FStar (F*)",
    "description": "F* (pronounced F star) is a functional programming language inspired by ML and aimed at program verification. Its type system includes dependent types, monadic effects, and refinement types. This allows expressing precise specifications for programs, including functional correctness and security properties.",
    "url": "https://en.wikipedia.org/wiki/F*_(programming_language)",
    "language_short": "c-like",
    "code": "module Hello\r\n \r\nlet main = FStar.IO.print_string \"Hello World\\n\""
  },
  {
    "id": "437",
    "title": "Fueue",
    "description": "Fueue is a queue-based esoteric programming language created by Nathan van Doorn in 2012. Everything is stored in a single queue. The source of the program is converted to this queue on execution.",
    "url": "https://esolangs.org/wiki/Fueue",
    "language_short": "plaintext",
    "code": "72 101 108 108 111 44 32 119 111 114 108 100 33 10 H"
  },
  {
    "id": "438",
    "title": "Full O (Full 0)",
    "description": "Full 0 (pronounced Full Circle or Full Oh) is an Esoteric Programming Language devised by Tslil Clingman in late 2007. Full 0 encompassed the author's wishes for a language with a minimal set of commands, but many possible instructions. This was achieved through the unique implementation of a command list and modifiers in the language.",
    "url": "https://esolangs.org/wiki/Full_0",
    "language_short": "brainfuck",
    "code": "{6}[(a0)(?H)]{3}[a0]{2}[(a0)(?e)]{3}[a0]\r\n{2}[(a0)(?l)]{3}[a0]~{1}[a0]~{4}[(a0)(?o)]\r\n{3}[a0]{2}[(a0)(?,)]{3}[a0]{2}[(a0)(? )]\r\n{3}[a0]{2}[(a0)(?w)]{3}[a0]{2}[(a0)(?o)]\r\n{3}[a0]{2}[(a0)(?r)]{3}[a0]{2}[(a0)(?l)]\r\n{3}[a0]{2}[(a0)(?d)]{3}[a0]{2}[(a0)(?!)]\r\n{3}[a0]"
  },
  {
    "id": "439",
    "title": "Funciton",
    "description": "Funciton (pronounced: /ˈfʌŋkɪtɒn/) is a two-dimensional, minimalistic, declarative programming language invented by User:Timwi in 2011.",
    "url": "https://esolangs.org/wiki/Funciton",
    "language_short": "lsl",
    "code": "    ╔═══════════════╗\r\n    ║ 2388215291394 ║\r\n    ║ 5970717094395 ║\r\n    ║ 9830070909071 ║\r\n    ║ 3359207734160 ║\r\n    ║ 6896177782105 ║\r\n    ║ 7169552834632 ║\r\n    ╚═══════╤═══════╝\r\n            │"
  },
  {
    "id": "440",
    "title": "GAML",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "model GAML\r\n\r\nglobal {\r\n init {\r\n write(\"Hello World\");\r\n }\r\n}\r\n\r\nexperiment GAML {}"
  },
  {
    "id": "441",
    "title": "Gammaplex",
    "description": "Gammaplex is an esoteric programming language designed by Lode Vandevenne. It is similar to Befunge in some respects; what makes it especially remarkable is the support for mouse input and graphical output.",
    "url": "https://esolangs.org/wiki/Gammaplex",
    "language_short": "brainfuck",
    "code": "X\"Hello World!\"XXSXrRE"
  },
  {
    "id": "442",
    "title": "GASOIL",
    "description": "GASOIL (General Application Stack Oriented Imperative Language) is a postfix notation esoteric programming language invented by User:Morex in 2009.",
    "url": "https://esolangs.org/wiki/GASOIL",
    "language_short": "c-like",
    "code": "main\r\n(\"Hello World!\"; WRITE)"
  },
  {
    "id": "443",
    "title": "GDScript",
    "description": "Godot is a 2D and 3D, cross-platform, free and open-source game engine released under the MIT license. It was initially developed by Argentinians Juan Linietsky and Ariel Manzur for several companies in Latin America prior to its public release. The development environment runs on multiple operating systems including Linux, BSDs, macOS, and Microsoft Windows. Godot can create games targeting PC, mobile, and web platforms.",
    "url": "https://en.wikipedia.org/wiki/Godot_(game_engine)",
    "language_short": "",
    "code": "extends Node2D\r\n\r\nfunc _ready():\r\n  print(\"Hello World\")"
  },
  {
    "id": "444",
    "title": "Gecho",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "print 'hello '<> 'world"
  },
  {
    "id": "445",
    "title": "Genie",
    "description": "Genie is a modern, general-purpose high-level programming language in development since 2008. It was designed as an alternative, simpler and cleaner dialect for the Vala compiler, while preserving the same functionality of the Vala language. Genie uses the same compiler and libraries as Vala; the two can indeed be used alongside each other. The differences are only syntactic.",
    "url": "https://en.wikipedia.org/wiki/Genie_(programming_language)",
    "language_short": "",
    "code": "[indent=2]\r\ninit\r\n  print \"Hello World\""
  },
  {
    "id": "446",
    "title": "Gentzen",
    "description": "Gentzen is an alternative syntax for proofs in the LK sequent calculus, with several shortcuts. O, actually, it is a programming language.",
    "url": "https://esolangs.org/wiki/Gentzen",
    "language_short": "gml",
    "code": "<- \"stdlib\";\r\n<- \"iolib\";\r\nmain : () / ($$1(iosys) |- $$2(++));\r\nmain = [x,y] cut \"Hello, World!\" [z] outtext x z y;\r\n-> main;"
  },
  {
    "id": "447",
    "title": "GeoJSON",
    "description": "GeoJSON is an open standard format designed for representing simple geographical features, along with their non-spatial attributes. It is based on the JSON format.",
    "url": "https://en.wikipedia.org/wiki/GeoJSON",
    "language_short": "json",
    "code": "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-103.35937499999999,66.93006025862448],[-104.4140625,39.90973623453719],[-94.21875,39.36827914916011],[-93.8671875,50.28933925329178],[-85.78125,50.28933925329178],[-85.78125,39.639537564366684],[-75.5859375,39.639537564366684],[-77.6953125,67.06743335108298],[-86.484375,66.79190947341796],[-85.78125,57.7041472343419],[-92.8125,57.32652122521709],[-94.21875,66.51326044311188],[-103.35937499999999,66.93006025862448]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-71.3671875,67.47492238478702],[-40.42968749999999,67.60922060496382],[-40.78125,64.01449619484472],[-61.52343749999999,63.548552232036414],[-61.52343749999999,57.89149735271031],[-50.625,57.89149735271031],[-50.625,51.39920565355378],[-60.1171875,51.39920565355378],[-61.17187499999999,42.032974332441405],[-42.1875,42.293564192170095],[-42.1875,36.87962060502676],[-68.203125,34.88593094075317],[-71.3671875,67.47492238478702]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-32.6953125,67.60922060496382],[-32.34375,39.36827914916011],[-4.21875,40.713955826286046],[-4.21875,47.754097979680026],[-20.7421875,47.040182144806664],[-21.796875,67.87554134672945],[-32.6953125,67.60922060496382]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[4.5703125,68.78414378041504],[5.9765625,42.553080288955826],[37.265625,43.83452678223682],[37.265625,49.61070993807422],[18.6328125,50.28933925329178],[15.468749999999998,69.03714171275197],[4.5703125,68.78414378041504]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[41.8359375,43.068887774169625],[41.8359375,68.65655498475735],[95.625,68.65655498475735],[95.625,43.068887774169625],[41.8359375,43.068887774169625]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[50.9765625,47.27922900257082],[50.9765625,66.93006025862448],[89.296875,66.93006025862448],[89.296875,47.27922900257082],[50.9765625,47.27922900257082]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-115.6640625,18.312810846425442],[-98.7890625,18.979025953255267],[-84.72656249999999,-15.961329081596634],[-75.5859375,-4.565473550710278],[-69.2578125,-4.214943141390639],[-65.7421875,-15.284185114076433],[-53.0859375,19.973348786110602],[-39.7265625,21.28937435586041],[-65.0390625,-41.244772343082076],[-73.828125,-42.0329743324414],[-76.640625,-28.613459424004414],[-84.375,-41.50857729743933],[-94.921875,-42.0329743324414],[-115.6640625,18.312810846425442]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-34.80468749999999,-39.09596293630548],[-34.80468749999999,21.28937435586041],[14.414062499999998,21.28937435586041],[14.414062499999998,-39.09596293630548],[-34.80468749999999,-39.09596293630548]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-28.125,-31.05293398570514],[-28.125,14.944784875088372],[8.7890625,14.944784875088372],[8.7890625,-31.05293398570514],[-28.125,-31.05293398570514]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[23.203125,21.616579336740603],[22.148437499999996,-38.27268853598096],[32.34375,-37.99616267972812],[33.75,-15.961329081596634],[45.3515625,-36.597889133070204],[59.765625,-36.03133177633187],[39.0234375,-5.266007882805485],[54.84375,-3.513421045640032],[53.0859375,23.241346102386135],[23.203125,21.616579336740603]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[28.828124999999996,2.811371193331128],[28.828124999999996,16.972741019999035],[46.7578125,16.972741019999035],[46.7578125,2.811371193331128],[28.828124999999996,2.811371193331128]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[65.0390625,22.917922936146045],[66.09375,-34.30714385628803],[111.4453125,-34.30714385628803],[110.390625,-25.79989118208832],[78.3984375,-24.206889622398023],[76.9921875,23.56398712845123],[65.0390625,22.917922936146045]]]}},{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[117.0703125,25.165173368663954],[121.640625,-33.13755119234615],[135.35156249999997,-31.653381399663985],[146.25,-20.3034175184893],[148.7109375,-9.79567758282973],[148.359375,0],[145.1953125,7.36246686553575],[140.2734375,14.604847155053898],[135.703125,20.632784250388028],[128.671875,24.206889622398023],[121.9921875,26.11598592533351],[117.0703125,25.165173368663954]]]}}]}"
  },
  {
    "id": "448",
    "title": "GFA Basic",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "PRINT \"Hello World\""
  },
  {
    "id": "449",
    "title": "Gibberish (programming language)",
    "description": "Gibberish is a Turing-complete (proof will come soon in the form of a BF interpreter written in Gibberish), stack-based programming language created by User:Javawizard. It's designed to be confusingly comprehensive. To that end, the instruction set is quite large, but every instruction is a letter, and each letter can mean something different depending on where it appears.",
    "url": "https://esolangs.org/wiki/Gibberish_(programming_language)",
    "language_short": "plaintext",
    "code": "[Hello, world!\r\n]eo"
  },
  {
    "id": "450",
    "title": "Gibberish/JavaScript",
    "description": "Gibberish/JavaScript is a Gibberish derivative.",
    "url": "https://esolangs.org/wiki/Gibberish/JavaScript",
    "language_short": "javascript",
    "code": "$${echo:Hello, World!}"
  },
  {
    "id": "451",
    "title": "Glass",
    "description": "Glass is an esoteric programming language developed by Gregor Richards in 2005. It combines an unintuitive postfix notation with heavy object-orientation, requiring extensive juggling of a main stack combined with its object-oriented structure.",
    "url": "https://esolangs.org/wiki/Glass",
    "language_short": "brainfuck",
    "code": "+{M[m(_o)O!\"Hello World!\"(_o)o.?]}"
  },
  {
    "id": "452",
    "title": "GML (Game Maker Language)",
    "description": "GameMaker Language is GameMaker's scripting language. It is an imperative, dynamically typed language commonly likened to JavaScript and C-like languages.",
    "url": "https://en.wikipedia.org/wiki/GameMaker#GameMaker_Language",
    "language_short": "gml",
    "code": "// Draws \"Hello, world!\" onto the screen at position 1, 1\r\ndraw_text(1, 1, \"Hello, world!\");"
  },
  {
    "id": "453",
    "title": "Go",
    "description": "Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency. The language is often referred to as Golang because of its domain name, golang.org, but the proper name is Go.",
    "url": "https://en.wikipedia.org/wiki/Go_(programming_language)",
    "language_short": "go",
    "code": "package main\r\n \r\nfunc main() {\r\n    println(\"Hello, World\")\r\n}"
  },
  {
    "id": "454",
    "title": "Godencode",
    "description": "Godencode is an esoteric programming language based off of Gödel numbering and encoding created by Plasmath. Every line of code is composed of a single number, and all other characters are ignored (this can be used for commenting).",
    "url": "https://esolangs.org/wiki/Godencode",
    "language_short": "",
    "code": "64\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n10548276695938598352868912402271232\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n64\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n64\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n64\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n64\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n64\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n5274138347969299176434456201135616\n10548276695938598352868912402271232\n8"
  },
  {
    "id": "455",
    "title": "Goldfish",
    "description": "Goldfish is an esoteric programming language by User:Fergusq inspired by Deadfish i. Only way to store data is creating functions and static variables inside them.",
    "url": "https://esolangs.org/wiki/Goldfish",
    "language_short": "brainfuck",
    "code": "0 iisiiiisiiiiiiiioniiisisioiiiiiiiooiiioniisiisddddoniisiiiiisiiiiiioniiisiisddddddddddoiiioddddddoddddddddoniiisio"
  },
  {
    "id": "456",
    "title": "Golfscript",
    "description": "GolfScript is a concatenative programming language embedded on top of Ruby, designed to allow very short programs to be written, in order to win code-golf contests. It supports a range of datatypes including arbitrary precision integers, and a wider range of standard operations than many other esoteric programming languages.",
    "url": "https://esolangs.org/wiki/GolfScript",
    "language_short": "plaintext",
    "code": "\"Hello World\""
  },
  {
    "id": "457",
    "title": "golfuck",
    "description": "golfuck is an extension of brainfuck invented by User:A. It is created in order to write short programs. In addition to brainfuck, golfuck adds a stack.",
    "url": "https://esolangs.org/wiki/Golfuck",
    "language_short": "plaintext",
    "code": "'Hello, world!"
  },
  {
    "id": "458",
    "title": "Golo",
    "description": "Golo is computer software, a programming language for the Java virtual machine (JVM). It is simple, with dynamic, weak typing. It was created in 2012 as part of the research activities of the DynaMid group of the Centre of Innovation in Telecommunications and Integration of service (CITI) Laboratory at Institut national des sciences appliquées de Lyon (INSA). It is distributed as free and open-source software under the Eclipse Public License 2.0.",
    "url": "https://en.wikipedia.org/wiki/Golo_(programming_language)",
    "language_short": "golo",
    "code": "module hello.world\r\n \r\nfunction main = |args| { \r\n    println(\"Hello world\")\r\n}"
  },
  {
    "id": "459",
    "title": "Google Apps Script",
    "description": "Apps Script is a scripting platform developed by Google for light-weight application development in the Google Workspace platform. Google Apps Script was initially developed by Mike Harm as a side project whilst working as a developer on Google Sheets.",
    "url": "https://en.wikipedia.org/wiki/Google_Apps_Script",
    "language_short": "javascript",
    "code": "function helloWorld() {\r\n    Logger.log('Hello World');\r\n}"
  },
  {
    "id": "460",
    "title": "Gosu",
    "description": "Gosu is a statically-typed general-purpose programming language that runs on the Java Virtual Machine. Its influences include Java, C#, and ECMAScript. Development of Gosu began in 2002 internally for Guidewire Software, and the language saw its first community release in 2010 under the Apache 2 license.",
    "url": "https://en.wikipedia.org/wiki/Gosu_(programming_language)",
    "language_short": "c-like",
    "code": "print(\"Hello World from Gosu!!\")"
  },
  {
    "id": "461",
    "title": "GraphQL",
    "description": "GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. GraphQL was developed internally by Facebook in 2012 before being publicly released in 2015. On 7 November 2018, the GraphQL project was moved from Facebook to the newly-established GraphQL Foundation, hosted by the non-profit Linux Foundation. Since 2012, GraphQL's rise has followed the adoption timeline as set out by Lee Byron, GraphQL's creator, with accuracy. Byron's goal is to make GraphQL omnipresent across web platforms.",
    "url": "https://en.wikipedia.org/wiki/GraphQL",
    "language_short": "",
    "code": "{\r\n    \"Hello World\"\r\n}"
  },
  {
    "id": "462",
    "title": "Grass",
    "description": "Grass is a functional grass-planting programming language. Its unique characteristics is sakd to be easy to slip into ASCII art.\r\nGrass is based on lambda calculus, and the program consists of a list of abstractions and applications of functions, using only the characters: W w v",
    "url": "https://esolangs.org/wiki/Grass",
    "language_short": "brainfuck",
    "code": "wv\r\nwwWWwWWWwv\r\nWwwww\r\nWWw\r\nWWWw\r\nWWWWw\r\nWWWWWw\r\nWWWWWWw\r\nWWWWWWWw \r\nWwwwwwwwwwwww\r\nWWWWw\r\nWWWWWWWw\r\nWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWww\r\nWWWWWWWWWWww\r\nWWWWWWWWWWWWw\r\nWWWWWWWWWWww\r\nWWWWWWWWWWwwwwwww\r\nWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWWWWww\r\nWWWWWWWWWWWWWWWWWWww\r\nWWWWWWWWWWWWWWWWWWwwwww\r\nWWWWWWWWWWWWWWWWWWWWWww\r\nWWWWWWWWWWWWWWWWWWWWWWWw\r\nWWWWWWWWWWWWWWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwwww\r\nWwwwwwwwwwww\r\nWWwwwwwww\r\nWWWwwwwwww\r\nWWWWw\r\nWWWWWwwwwwwww\r\nWWWWWWwwwwwwwwwwwwwwwww\r\nWWWWWWWwwwwwwwwwwwwwwwwwwwww\r\nWWWWWWWWwwwwwwwwwwwwwwwww\r\nWWWWWWWWWwwww\r\nWWWWWWWWWWwwwwwwwwwww\r\nWWWWWWWWWWWwwwwwww\r\nWWWWWWWWWWWWwwwwwwwwwwwwwwwwww\r\nWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwww"
  },
  {
    "id": "463",
    "title": "Gravity",
    "description": "Gravity was invented by Safalra (Stephen Morley) on 4th August 2005, based on a idea from Isaac Newton. Gravity is very different from any other existing programming language. Although its behavior is well-defined and deterministic, the evolution of its space is in general non-computable, due to the nature of the differential equations that govern it.",
    "url": "https://esolangs.org/wiki/Gravity",
    "language_short": "c-like",
    "code": "func main() {\r\n    System.print(\"Hello World\");\r\n}"
  },
  {
    "id": "464",
    "title": "GreeeeeeeeenText",
    "description": "GreeeeeeeeenText is a joke language being worked on by User:Areallycoolusername. All code is in the format of 4chans greentext memes.",
    "url": "https://esolangs.org/wiki/GreeeeeeeeenText",
    "language_short": "",
    "code": ">be me\r\n>says Hello World\r\n>*gets output*"
  },
  {
    "id": "465",
    "title": "Green Marl",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "procedure hello_world() {\r\n    println(\"Hello World\");\r\n}"
  },
  {
    "id": "466",
    "title": "Gri",
    "description": "Gri is a programming language for creating scientific graphics. It is licensed under the terms of the GNU General Public License.",
    "url": "https://en.wikipedia.org/wiki/Gri_graphical_language",
    "language_short": "c-like",
    "code": "show \"hello world\""
  },
  {
    "id": "467",
    "title": "GridScript",
    "description": "GridScript is an esoteric programming language designed by user SuperJedi224. It is not yet implemented.",
    "url": "https://esolangs.org/wiki/GridScript",
    "language_short": "plaintext",
    "code": "#HELLO WORLD.\r\n \r\n@width 3\r\n@height 1\r\n \r\n(1,1):START\r\n(3,1):PRINT 'Hello World' "
  },
  {
    "id": "468",
    "title": "Grin",
    "description": "Grin is an esoteric programming language by User:Madk based on brainfuck and named for the frequent occurrence of smiling emoticons. Its intention is to provide the fun of BrainFuck with more powerful maths. Despite some differences in the language, any BrainFuck program can be converted into a Grin program by replacing the \"+\"s with \"}\" and the \"-\"s with \"{\".",
    "url": "https://esolangs.org/wiki/Grin",
    "language_short": "plaintext",
    "code": "(Hello, world!)"
  },
  {
    "id": "469",
    "title": "Grok",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "iHello World`lY!}q\r\n              kwph"
  },
  {
    "id": "470",
    "title": "Groovy",
    "description": "Groovy is a Java-syntax-compatible object-oriented programming language for the Java platform. It is both a static and dynamic language with features similar to those of Python, Ruby, and Smalltalk. It can be used as both a programming language and a scripting language for the Java Platform, is compiled to Java virtual machine (JVM) bytecode, and interoperates seamlessly with other Java code and libraries. Groovy uses a curly-bracket syntax similar to Java's.",
    "url": "https://en.wikipedia.org/wiki/Apache_Groovy",
    "language_short": "groovy",
    "code": "println \"Hello World\""
  },
  {
    "id": "471",
    "title": "GTA3Script",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "SCRIPT_START\r\n{\r\nNOP\r\n\r\nWAIT 0\r\nPRINT_STRING_NOW \"Hello World\"\r\n}\r\nSCRIPT_END"
  },
  {
    "id": "472",
    "title": "Gui4Cli",
    "description": "Gui4Cli is an event-driven programming language for creating GUIs that originated on the Amiga and was ported to Windows around 2001. The language itself somewhat resembles Basic. It allowed one to use native controls on Windows before Tile (Ttk) came about. GUIs built with Gui4Cli use coordinate-based widget placement (like place), which can be adjusted through a visual editor. As the name suggests, can be used to drive a console application from a GUI.",
    "url": "http://gui4cli.com/",
    "language_short": "plaintext",
    "code": "G4C MyGui\r\nWindow 10 10 200 300 \"My window\"\r\n \r\nxOnLoad\r\n    GuiOpen MyGui\r\n \r\nxButton 10 10 100 20 \"Hello World\"\r\n    GuiQuit MyGui"
  },
  {
    "id": "473",
    "title": "Gulp",
    "description": "Gulp is an esoteric, deque based, golfing programming language made to win many CG challenges. It has 128 commands, each one often having many functions at once. This tutorial will run you through the basics in order to start programming right away. All commands that are not explained here, will be in a chart soon to be in this repo.",
    "url": "https://github.com/Areallycoolusername/Gulp-lang",
    "language_short": "plaintext",
    "code": "'Hello, world!"
  },
  {
    "id": "474",
    "title": "H🌍",
    "description": "H🌍 (or HWorld) is a joke esoteric programming language by User:OsmineYT designed in 2019. Because it only has printing and quitting commands, it can't be used for real programming.",
    "url": "https://esolangs.org/wiki/H%F0%9F%8C%8D",
    "language_short": "plaintext",
    "code": "hw"
  },
  {
    "id": "475",
    "title": "Hack",
    "description": "Hack is a programming language for the HipHop Virtual Machine (HHVM), created by Facebook as a dialect of PHP. The language implementation is open-source, licensed under the MIT License.",
    "url": "https://en.wikipedia.org/wiki/Hack_(programming_language)",
    "language_short": "php",
    "code": "<?hh \r\necho 'Hello World';"
  },
  {
    "id": "476",
    "title": "Haml",
    "description": "Haml (HTML Abstraction Markup Language) is a templating system that is designed to avoid writing inline code in a web document and make the HTML cleaner. Haml gives the flexibility to have some dynamic content in HTML. Similar to other web languages like PHP, ASP, JSP and template systems like eRuby, Haml also embeds some code that gets executed during runtime and generates HTML code in order to provide some dynamic content. In order to run Haml code, files need to have a .haml extension. These files are similar to .erb or eRuby files which also help to embed Ruby code while developing a web application.",
    "url": "https://en.wikipedia.org/wiki/Haml",
    "language_short": "",
    "code": "%html\r\n  %title Hello World\r\n  %body\r\n    %h1 Hello World"
  },
  {
    "id": "477",
    "title": "Hanoi Love",
    "description": "Hanoi Love is a minimal stack based language created by Jeffry Johnston, April 30, 2001. Its name was inspired by the Towers of Hanoi game, while the language itself was inspired by Spaz and brainfuck.",
    "url": "https://esolangs.org/wiki/Hanoi_Love",
    "language_short": "brainfuck",
    "code": ".'...,;';';;';';';'.,...;\"'.'...,;;';;';';;'.,...;\"';;;;;;;\"'\"';;;\r\n\"'.'.,...'...,;';';';';'.,...;\"'..'...,'...,;;';';';'.,...`\"'.'...,\r\n;;';';';'.,...;\"';;;\"'``````\"'````````\"'.'.,..;\"'.'.,..;;;;;;;;;;\"'"
  },
  {
    "id": "478",
    "title": "Haskell",
    "description": "Haskell /ˈhæskəl/ is a general-purpose, statically typed, purely functional programming language with type inference and lazy evaluation. Designed for teaching, research and industrial application, Haskell has pioneered a number of advanced programming language features such as type classes, which enable type-safe operator overloading. Haskell's main implementation is the Glasgow Haskell Compiler (GHC). It is named after logician Haskell Curry.",
    "url": "https://en.wikipedia.org/wiki/Haskell_(programming_language)",
    "language_short": "haskell",
    "code": "module Main where\r\n \r\nmain = putStrLn \"Hello, World!\""
  },
  {
    "id": "479",
    "title": "Haxe",
    "description": "Haxe is an open source high-level cross-platform programming language and compiler that can produce applications and source code, for many different computing platforms from one code-base. It is free and open-source software, released under the MIT License. The compiler, written in OCaml, is released under the GNU General Public License (GPL) version 2.",
    "url": "https://en.wikipedia.org/wiki/Haxe",
    "language_short": "haxe",
    "code": "class HelloWorld {\r\n    static function main() {\r\n        trace(\"Hello World!\");\r\n    }\r\n}"
  },
  {
    "id": "480",
    "title": "Heck",
    "description": "Heck is a programing language designed such that source code is expressible as a hexadecimal number. It was created by PixelatedStarfish in 2021.",
    "url": "https://esolangs.org/wiki/Heck",
    "language_short": "",
    "code": "6488645864C864C864F86208657864F8652864C86448"
  },
  {
    "id": "481",
    "title": "Hello",
    "description": "Hello programming language is a minimal programming language with only one instruction, 'h', which will print out the string \"Hello World\". Hello was created by Anne Veling.",
    "url": "https://esolangs.org/wiki/Hello",
    "language_short": "plaintext",
    "code": "h"
  },
  {
    "id": "482",
    "title": "Hello++",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "h"
  },
  {
    "id": "483",
    "title": "HEX",
    "description": "HEX is a language created by User:Barrucadu based on the HEX machine from the Discworld books. As stated in the books, anything is possible if you get enough bugs in the system. If any discworld-enthusiasts want to help me with this, send me an email! The current specification is Hex Version 2.2",
    "url": "https://esolangs.org/wiki/HEX",
    "language_short": "plaintext",
    "code": "GBL;\r\nBug(\"1\", \"Hello, World!\");\r\nScuttle(\"1\");\r\nWrite;"
  },
  {
    "id": "484",
    "title": "Hexadecimal Stacking Pseudo-Assembly Language",
    "description": "The Hexadecimal Stacking Pseudo-Assembly Language (HSPAL) is a programming language by User:SuperJedi224 in which a program is represented by a list of six-digit hexidecimal numbers seperated by line breaks (or not at all, the line breaks are optional and, in fact, all other whitespace is forbidden).",
    "url": "https://esolangs.org/wiki/Hexadecimal_Stacking_Pseudo-Assembly_Language",
    "language_short": "plaintext",
    "code": "200021\r\n400000\r\n200064\r\n400000\r\n20006C\r\n400000\r\n200072\r\n400000\r\n20006F\r\n400000\r\n200057\r\n400000\r\n200020\r\n400000\r\n20002C\r\n400000\r\n20006F\r\n400000\r\n20006C\r\n400000\r\n20006C\r\n400000\r\n200065\r\n400000\r\n200048\r\n400000\r\n140000"
  },
  {
    "id": "485",
    "title": "Hexagony",
    "description": "Hexagony is a two-dimensional stack-based programming language developed by user:Martin Ender. To the best of the author's knowledge it's the first ever 2D language where the instruction pointer moves on a hexagonal grid. Furthermore, the memory layout also resembles a (separate) hexagonal grid. The name is a portmanteau of \"hexagon\" and \"agony\", because I expect programming in it to be quite painful.",
    "url": "https://esolangs.org/wiki/Hexagony",
    "language_short": "brainfuck",
    "code": "H;e;l;d;*;r;o;Wl;;o;*433;@.>;23<\\4;*/"
  },
  {
    "id": "486",
    "title": "Hexish",
    "description": "",
    "url": "https://esolangs.org/wiki/Hexish",
    "language_short": "brainfuck",
    "code": "0902160E48656C6C6F20776F726C6421001001161508"
  },
  {
    "id": "487",
    "title": "Higher Subleq (HSQ)",
    "description": "Higher Subleq (HSQ) is a typeless simplified C-like language by Oleg which compiles into Subleq.",
    "url": "https://esolangs.org/wiki/Higher_Subleq",
    "language_short": "c-like",
    "code": "int printf();\r\nint main()\r\n{\r\n    printf(\"Hello, World!\\n\");\r\n}"
  },
  {
    "id": "488",
    "title": "HighFive",
    "description": "HighFive is an esoteric programming language by Ben Russell, which is loosely inspired by brainfuck.",
    "url": "https://esolangs.org/wiki/HighFive",
    "language_short": "brainfuck",
    "code": "-----------------------------------////++++++++////\r\n/+++++++++/+++++++++++++/++++/-////*/\r\n./---.+++++++..+++././/////+++++++++++++++./.+++.------.--------./+."
  },
  {
    "id": "489",
    "title": "Hodor",
    "description": "Do you feel that there aren't enough programming languages or frameworks to get the job done right? We certainly do. As engineers, we want to focus on what we do best -- creating disruptive technology that just plain works. Using jumbled permutations of the word \"hodor\" over and over again we have simplified programming syntax to make it easier than ever before. We hope that you find Hodor as easy to use as we have!",
    "url": "https://github.com/hummingbirdtech/hodor/blob/master/README.md",
    "language_short": "c-like",
    "code": "hodor.hod('Hhodor? Hodor!? Hodor!? o, Hooodorrhodor orHodor!? d!');"
  },
  {
    "id": "490",
    "title": "Hollow",
    "description": "Hollow is an esolanguage based on low-level string-manipulation, designed by Keymaker in 2011, but completed and published in 2012. The language is Turing-complete. The memory model is an unbound stack of strings.",
    "url": "https://esolangs.org/wiki/Hollow",
    "language_short": "plaintext",
    "code": "{Hello, world!.9}:?"
  },
  {
    "id": "491",
    "title": "Holy C (HolyC)",
    "description": "HolyC is a variation of C developed by Terry A. Davis. HolyC is the official programming language for The Temple Operating System (TempleOS).",
    "url": "https://rosettacode.org/wiki/Category:HolyC",
    "language_short": "plaintext",
    "code": "\"Hello, world!\";"
  },
  {
    "id": "492",
    "title": "Homespring",
    "description": "Homespring, alternatively HOtMEfSPRIbNG, is a high-level esoteric programming language created by Jeff Binder in 2003 with the express intention of being far higher level than anyone would ever reasonably need or want.",
    "url": "https://esolangs.org/wiki/Homespring",
    "language_short": "plaintext",
    "code": "Universe bear hatchery powers world.\r\n    bear hatchery powers o.      bear hatchery powers hell     marshy marshy marshy a snowmelt"
  },
  {
    "id": "493",
    "title": "HOP",
    "description": "Hop is a Lisp-like programming language by Manuel Serrano for web 2.0 and also the name of the web broker (server and proxy) that implements this language. It is written in Bigloo Scheme. It is a project funded by INRIA.",
    "url": "https://en.wikipedia.org/wiki/Hop_(software)",
    "language_short": "xml",
    "code": "(define-service (hello-world)\r\n(<HTML>\r\n    (<HEAD>\r\n        (<TITLE> \"Hello, world!\"))\r\n    (<BODY>\r\n        \"Hello, world!\")))"
  },
  {
    "id": "494",
    "title": "HP 41C (HP-41C)",
    "description": "The HP-41C series are programmable, expandable, continuous memory handheld RPN calculators made by Hewlett-Packard from 1979 to 1990. The original model, HP-41C, was the first of its kind to offer alphanumeric display capabilities. Later came the HP-41CV and HP-41CX, offering more memory and functionality.",
    "url": "https://en.wikipedia.org/wiki/HP-41C",
    "language_short": "",
    "code": "01 LBL \"HELLO\"\r\n02 \"HELLO WORLD\"\r\n03 AVIEW"
  },
  {
    "id": "495",
    "title": "HQ9+",
    "description": "HQ9+ is a joke language with four instructions:\r\n<br>H: Print \"hello, world\"\r\n<br>Q: Print the program's source code\r\n<br>9: Print the lyrics to \"99 Bottles of Beer\"\r\n<br>+: Increment the accumulator",
    "url": "https://esolangs.org/wiki/HQ9%2B",
    "language_short": "plaintext",
    "code": "h"
  },
  {
    "id": "496",
    "title": "HTML",
    "description": "The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.",
    "url": "https://en.wikipedia.org/wiki/HTML",
    "language_short": "xml",
    "code": "<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <title>Hello World HTML</titl>\r\n    </head>\r\n    <body>\r\n        <h1>Hello World</h1>\r\n    </body>\r\n</html>"
  },
  {
    "id": "497",
    "title": "Hubot",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "module.exports = (robot) ->\r\n    robot.respond /hello/i, (msg) ->\r\n      msg.send 'Hello World'"
  },
  {
    "id": "498",
    "title": "Huf",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "++++++++++|+++++++!++>\r\n++++++++++|++++++++++!+>\r\n++++++++++|++++++++++!++++++++>\r\n++++++++++|++++++++++!++++++++>\r\n++++++++++|+++++++++++!+>\r\n++++++|+++++!++>\r\n++++++++++|++++++++!+++++++>\r\n++++++++++|+++++++++++!+>\r\n++++++++++|+++++++++++!++++>\r\n++++++++++|++++++++++!++++++++>\r\n++++++++++|++++++++++!>"
  },
  {
    "id": "499",
    "title": "Hy",
    "description": "Hy is a dialect of the Lisp programming language. It is designed to interact with the language Python by translating expressions into Python's abstract syntax tree (AST). Hy was introduced at Python Conference (PyCon) 2013 by Paul Tagliamonte.",
    "url": "https://en.wikipedia.org/wiki/Hy",
    "language_short": "hy",
    "code": "(print \"Hello World!\")"
  },
  {
    "id": "500",
    "title": "HyperTalk",
    "description": "HyperTalk is a discontinued high-level, procedural programming language created in 1987 by Dan Winkler and used in conjunction with Apple Computer's HyperCard hypermedia program by Bill Atkinson. Because the main target audience of HyperTalk was beginning programmers, HyperTalk programmers were usually called \"authors\" and the process of writing programs was known as \"scripting\".",
    "url": "https://en.wikipedia.org/wiki/HyperTalk",
    "language_short": "vim",
    "code": "put \"Hello, World!\""
  },
  {
    "id": "501",
    "title": "I5",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "fn main() {\r\n    $$print(\"Hello World\")\r\n}"
  },
  {
    "id": "502",
    "title": "IBM1401",
    "description": "The IBM 1401 is a variable-wordlength decimal computer that was announced by IBM on October 5, 1959. The first member of the highly successful IBM 1400 series, it was aimed at replacing unit record equipment for processing data stored on punched cards and at providing peripheral services for larger computers.",
    "url": "https://en.wikipedia.org/wiki/IBM_1401",
    "language_short": "x86asm",
    "code": ",008015,022029,036043,050054,055062,063065,066077/333/M0762502F1.HELLO\r\nWORLD"
  },
  {
    "id": "503",
    "title": "IcedCoffeeScript",
    "description": "",
    "url": "",
    "language_short": "coffeescript",
    "code": "console.log \"Hello, World!\""
  },
  {
    "id": "504",
    "title": "ICI",
    "description": "ICI is a general purpose interpreted, computer programming language originally developed by Tim Long in the late 1980s. It has dynamic typing and flexible data types, with the basic syntax, flow control constructs and operators of C. It can be considered broadly similar to Perl, with which it is roughly contemporary. Like Perl, it also has tight integration with regular expressions.",
    "url": "https://en.wikipedia.org/wiki/ICI_(programming_language)",
    "language_short": "c-like",
    "code": "printf(\"Hello World\\n\");"
  },
  {
    "id": "505",
    "title": "Icon",
    "description": "Icon is a very high-level programming language featuring goal-directed execution and many facilities for managing strings and textual patterns. It is related to SNOBOL and SL5, string processing languages. Icon is not object-oriented, but an object-oriented extension called Idol was developed in 1996 which eventually became Unicon.",
    "url": "https://en.wikipedia.org/wiki/Icon_(programming_language)",
    "language_short": "c-like",
    "code": "procedure main()\r\n    write(\"Hello World\");\r\nend"
  },
  {
    "id": "506",
    "title": "IDL",
    "description": "IDL, short for Interactive Data Language, is a programming language used for data analysis. It is popular in particular areas of science, such as astronomy, atmospheric physics and medical imaging.[citation needed] IDL shares a common syntax with PV-Wave and originated from the same codebase, though the languages have subsequently diverged in detail. There are also free or costless implementations, such as GNU Data Language (GDL) and Fawlty Language (FL).",
    "url": "https://en.wikipedia.org/wiki/IDL_(programming_language)",
    "language_short": "c-like",
    "code": "print, \"Hello, world!\"\r\nend"
  },
  {
    "id": "507",
    "title": "Idris",
    "description": "Idris is a purely-functional programming language with dependent types, optional lazy evaluation, and features such as a totality checker. Idris may be used as a proof assistant, but it is designed to be a general-purpose programming language similar to Haskell.",
    "url": "https://en.wikipedia.org/wiki/Idris_(programming_language)",
    "language_short": "c-like",
    "code": "module Main\r\n \r\nmain : IO ()\r\nmain = putStrLn \"Hello World\""
  },
  {
    "id": "508",
    "title": "Il (Instruction list)",
    "description": "Il (Instruction list) is one of the 5 languages supported by the initial versions of IEC 61131-3 standard, and subsequently deprecated in the third edition.",
    "url": "https://en.wikipedia.org/wiki/Instruction_list",
    "language_short": "c-like",
    "code": "// compile:\r\n// ilasm <this file's name>\r\n// (if ilasm cannot be found, it's in the .NET directory (%windir%\\Microsoft.NET\\Framework\\v4.0.30319\\ilasm.exe))\r\n \r\n// assembly references\r\n.assembly extern mscorlib\r\n{\r\n    .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\\V.4..\r\n    .ver 4:0:0:0\r\n}\r\n \r\n// assembly manifest\r\n.assembly ilhw\r\n{"
  },
  {
    "id": "509",
    "title": "INCAL",
    "description": "INCAL is an esoteric programming language by (presumably) User:Zzo38.",
    "url": "https://esolangs.org/wiki/INCAL",
    "language_short": "x86asm",
    "code": "send,66#111#102#<101#42#93#101#120#102#110#43#\r\ndie"
  },
  {
    "id": "510",
    "title": "Incident",
    "description": "Incident is a language created by User:ais523 for the CALESYTA 2016 contest. The goals of the language were to make an interesting puzzle for programmers (trying to figure out how to write anything at all in the language is decidedly nontrivial, although once you know the tricks the language is viably possible to write by hand); and to create a language which would allow programs to obey almost arbitrary restrictions on what can appear in the source (e.g. bans on certain characters, polyglotting with some other language, valid as an image / executable / save file for some other program, and the like).",
    "url": "https://esolangs.org/wiki/Incident",
    "language_short": "brainfuck",
    "code": "A1.A2.A3,A4.A5,A6,A7;A8;B1;B2,B3.B4,B5;B6.B7.B8;C1,C2.C3;C4.C5,C6;C7,\r\nC8.D1;D2,D3.D4,D5.D6;D7.D8,E1;E2;E3;E4,E5,E6.E7,E8.F1;F2.F3.F4,F5.F6;\r\nF7.F8;G1,G2;G3,G4;G5.G6.G7.G8;H1.H2;H3.H4.H5.H6,H7;H8;I1,I2.I3;I4,I5.\r\nI6,I7.I8,J1;J2,J3,J4,J5;J6;J7.J8;K1;K2;K3;K4,K5,K6;K7.K8,L1;L2,L3;L4,\r\nL5;L6;L7,L8,M1.M2.M3.M4,M5,M6,M7,M8,N1.N2;N3,N4.N5;N6,N7.N8,Z4;a1,a1.\r\nZ3.A1,a1;a2,a2,A1,A2.a2,a3.a3.A2,A3,a3.a5,a5,A3;A5.a5,a6,a6.A5;A6.a6.\r\na8.a8.A6;A8.a8;b2,b2.A8;B2.b2,b4.b4,B2,B4;b4.b5;b5;B4;B5;b5.b8.b8,B5.\r\nB8.b8.c1;c1,B8,C1;c1,c2,c2;C1;C2,c2.c5,c5;C2,C5,c5.c8.c8,C5;C8;c8,d1;\r\nd1.C8,D1;d1.d2;d2.D1.D2.d2.d5,d5,D2.D5.d5.d8,d8;D5;D8.d8,e5.e5.D8;E5,\r\ne5,e8,e8,E5,E8;e8,f1.f1.E8.F1;f1;f2,f2;F1.F2.f2;f5.f5;F2;F5,f5;f7;f7.\r\nF5,F7,f7;f8.f8;F7.F8,f8,g1;g1.F8;G1.g1,g2;g2.G1,G2,g2,g3;g3;G2,G3;g3,\r\ng4,g4.G3;G4.g4.g5.g5,G4,G5.g5;g7;g7.G5;G7,g7,g8;g8.G7,G8;g8;h4.h4,G8;\r\nH4,h4;h8,h8,H4.H8,h8.i5.i5;H8;I5;i5.i8;i8.I5,I8,i8.j1;j1;I8,J1;j1.j3.\r\nj3;J1,J3;j3;j4,j4.J3,J4.j4,j8,j8.J4;J8,j8.k1.k1.J8.K1,k1,k2.k2;K1,K2;\r\nk2.k5;k5;K2,K5.k5,k8;k8,K5.K8,k8;l1,l1;K8;L1;l1,Z1;Z2;Z2,Z3.Z2;Z1.Z1,\r\nl2;l2;L1;L2,l2;l4.l4.L2.L4;l4.l5.l5.L4;L5;l5.l8.l8,L5.L8;l8;m2;m2.L8;\r\nM2.m2,m3,m3,M2,M3,m3;m4.m4.M3;M4.m4,m5.m5.M4,M5,m5;m7,m7.M5.M7;m7.m8.\r\nm8,M7,M8,m8,n1;n1.M8,N1;n1.n3,n3;N1;N3,n3.n5,n5;N3,N5;n5,n6.n6.N5.N6.\r\nn6,n7;n7;N6.N7;n7.n8,n8;N7,N8;n8,a4,a4;Z3;A4,a4;a7.a7.A4.A7;a7,b1.b1;\r\nA7;B1,b1;b3;b3,B1,B3.b3,b6.b6;B3;B6,b6;b7;b7,B6,B7,b7;c3,c3.B7,C3,c3.\r\nc4.c4,C3,C4.c4;c6.c6,C4,C6.c6;c7,c7;C6.C7,c7.d3;d3.C7,D3,d3;d4;d4.D3,\r\nD4,d4;d6,d6,D4,D6.d6;d7,d7,D6,D7.d7,e1,e1;D7,E1.e1,e2,e2;E1;E2,e2.e3;\r\ne3,E2,E3,e3.e4;e4.E3.E4;e4,e6;e6;E4,E6,e6.e7.e7;E6.E7.e7,f3,f3.E7,F3;\r\nf3.f4;f4,F3;F4,f4;f6;f6.F4.F6,f6,g6.g6;F6.G6.g6.h1;h1;G6;H1,h1.h2;h2.\r\nH1;H2,h2.h3,h3,H2,H3,h3.h5.h5;H3,H5;h5;h6;h6;H5.H6.h6,h7.h7.H6,H7.h7;\r\ni1,i1,H7.I1,i1.i2;i2;I1;I2,i2,i3.i3,I2,I3.i3;i4;i4;I3,I4,i4.i6,i6,I4.\r\nI6,i6.i7.i7,I6;I7;i7.j2;j2;I7.J2;j2,j5;j5.J2.J5;j5.j6,j6.J5,J6,j6;j7;\r\nj7;J6,J7.j7;k3,k3;J7.K3.k3.k4.k4,K3.K4;k4,k6;k6,K4.K6;k6,k7.k7;K6,K7.\r\nk7,l3.l3.K7;L3;l3.l6;l6,L3;L6,l6;l7,l7,L6;L7.l7,m1.m1,L7;M1;m1,m6;m6,\r\nM1;M6,m6;n2;n2;M6,N2,n2;n4.n4,N2;N4,n4.N8.N4,Z4,Z4"
  },
  {
    "id": "511",
    "title": "InDec",
    "description": "InDec (Increment Decrement) is an esoteric programming language developed by Ettore Marmo in 2013.",
    "url": "https://esolangs.org/wiki/InDec",
    "language_short": "plaintext",
    "code": "add2   @ N { N ++   ++ }\r\nadd4  @ N { N add2  add2 } \r\nadd8   @ N { N add4  add4 }\r\nadd16 @ N { N add8  add8 }\r\nadd32  @ N { N add16 add16 }\r\nadd64 @ N { N add32 add32 }\r\n \r\nSPACE add32 \r\nH   add64 add8\r\nd,H add add16 add8 add4\r\ne,d add ++\r\nl,e add add4 add2 ++\r\no,l add add2 ++\r\nW,H add add8 add4 add2 ++\r\nr,o add add2 ++\r\n \r\nH&,e&,l&,l&,o&,SPACE&,W&,o&,r&,l&,d& ."
  },
  {
    "id": "512",
    "title": "Inform",
    "description": "Inform is a programming language and design system for interactive fiction originally created in 1993 by Graham Nelson. Inform can generate programs designed for the Z-code or Glulx virtual machines. Versions 1 through 5 were released between 1993 and 1996.",
    "url": "https://en.wikipedia.org/wiki/Inform",
    "language_short": "inform7",
    "code": "\"Hello World\" by \"I.F. Author\"\r\n \r\nThe world is a room.\r\n \r\nWhen play begins, say \"Hello, world.\""
  },
  {
    "id": "513",
    "title": "Ink",
    "description": "Ink is inkle's scripting language for writing interactive narrative, both for text-centric games as well as more graphical games that contain highly branching stories. It's designed to be easy to learn, but with powerful enough features to allow an advanced level of structuring.",
    "url": "https://github.com/inkle/ink",
    "language_short": "plaintext",
    "code": "Hello, world!"
  },
  {
    "id": "514",
    "title": "Inkling",
    "description": "Inkling is the language in which Inklings in the Splatoon series communicate. While individual letters, words, and the occasional phrase are often similar to real-life languages, Inkling as a whole has been confirmed by Splatoon developers to be almost entirely random.",
    "url": "https://splatoonwiki.org/wiki/Inkling_(language)",
    "language_short": "",
    "code": "display \"Hello World\""
  },
  {
    "id": "515",
    "title": "Integ",
    "description": "Integ is a tape-based esoteric programming language designed by User:kerbal in 2017. The current version is 1.3.",
    "url": "https://esolangs.org/wiki/Integ",
    "language_short": "brainfuck",
    "code": "](104)](101)](108)](108)](111)](44)](32)](119)](111)](114)](108)](100)](10)"
  },
  {
    "id": "516",
    "title": "Intercal",
    "description": "The Compiler Language With No Pronounceable Acronym (INTERCAL) is an esoteric programming language that was created as a parody by Don Woods and James M. Lyon, two Princeton University students, in 1972. It satirizes aspects of the various programming languages at the time, as well as the proliferation of proposed language constructs and notations in the 1960s.",
    "url": "https://en.wikipedia.org/wiki/INTERCAL",
    "language_short": "x86asm",
    "code": "DO ,1 <- #13\r\nPLEASE DO ,1 SUB #1 <- #238\r\nDO ,1 SUB #2 <- #108\r\nDO ,1 SUB #3 <- #112\r\nDO ,1 SUB #4 <- #0\r\nDO ,1 SUB #5 <- #64\r\nDO ,1 SUB #6 <- #194\r\nDO ,1 SUB #7 <- #48\r\nPLEASE DO ,1 SUB #8 <- #22\r\nDO ,1 SUB #9 <- #248\r\nDO ,1 SUB #10 <- #168\r\nDO ,1 SUB #11 <- #24\r\nDO ,1 SUB #12 <- #16\r\nDO ,1 SUB #13 <- #162\r\nPLEASE READ OUT ,1\r\nPLEASE GIVE UP"
  },
  {
    "id": "517",
    "title": "Io",
    "description": "Io is a pure object-oriented programming language inspired by Smalltalk, Self, Lua, Lisp, Act1, and NewtonScript. Io has a prototype-based object model similar to the ones in Self and NewtonScript, eliminating the distinction between instance and class. Like Smalltalk, everything is an object and it uses dynamic typing. Like Lisp, programs are just data trees. Io uses actors for concurrency.",
    "url": "https://en.wikipedia.org/wiki/Io_(programming_language)",
    "language_short": "c-like",
    "code": "\"Hello, world!\\n\" print"
  },
  {
    "id": "518",
    "title": "Ioke",
    "description": "Ioke is a dynamic, strongly typed, prototype-based programming language targeting the Java Virtual Machine and the Common Language Runtime. It was designed by Ola Bini, a developer of JRuby. It has a very simple homoiconic syntax, somewhat similar to Io.",
    "url": "https://handwiki.org/wiki/Ioke_(programming_language)",
    "language_short": "c-like",
    "code": "\"Hello, World!\" println"
  },
  {
    "id": "519",
    "title": "IRC",
    "description": "IRC scripts are a way of shortening commands and responding automatically to certain events while connected to an IRC network.",
    "url": "https://en.wikipedia.org/wiki/IRC_script",
    "language_short": "plaintext",
    "code": "/timer 1 9999 1 Hello World"
  },
  {
    "id": "520",
    "title": "IronScheme",
    "description": "IronScheme is an implementation of the Scheme programming language targeting the Microsoft .NET Framework. IronScheme is a complete rewrite of IronLisp, incorporating lessons learnt while developing IronLisp.",
    "url": "https://en.wikipedia.org/wiki/IronScheme",
    "language_short": "",
    "code": "(import (rnrs))\r\n\r\n(display \"Hello World\")\r\n(newline)"
  },
  {
    "id": "521",
    "title": "ISCOM",
    "description": "ISCOM is an esoteric programming language made by User:iconmaster that stands for Iconmaster's Shameless Clone Of Migol. Needless to say, this language is a close derivative of Migol. Its goal is to be like Migol, but make more dense code.",
    "url": "https://esolangs.org/wiki/ISCOM",
    "language_short": "bash",
    "code": "\"Hello, world!\" @=10"
  },
  {
    "id": "522",
    "title": "ISLISP",
    "description": "ISLISP (also capitalized as ISLisp) is a programming language in the Lisp family standardized by the International Organization for Standardization (ISO) and International Electrotechnical Commission (IEC) joint working group ISO/IEC JTC 1/SC 22/WG 16 [permanent dead link] (commonly termed simply SC22/WG16 or WG16). The primary output of this working group was an international standard, published by ISO.",
    "url": "https://en.wikipedia.org/wiki/ISLISP",
    "language_short": "clojure",
    "code": "(format (standard-output) \"Hello, world!\")"
  },
  {
    "id": "523",
    "title": "IXQUS (ΙΧΘΥΣ)",
    "description": "ΙΧΘΥΣ (or \"ixqus\") means 'fish' in Classical Greek. It is an esoteric programming language created by User:Salpynx, as a thematic and computationally more powerful derivative of Deadfish x, and is therefore a superset of the original Deadfish language.",
    "url": "https://esolangs.org/wiki/%CE%99%CE%A7%CE%98%CE%A5%CE%A3",
    "language_short": "",
    "code": "ιιιθχθιιιιιιιιΥΧιιιθιθιΥιιιιιιιΥΥιιιΥΧιιιθχχθχχχχχΥΧιιθιιθχχχχΥΧιιιθθιιιιιιΥΧιιιθιιθχχχχχχχχχχΥιιιΥχχχχχχΥΧιιιθιθΥΧιιθιιθχχχΥ"
  },
  {
    "id": "524",
    "title": "J",
    "description": "The J programming language, developed in the early 1990s by Kenneth E. Iverson and Roger Hui, is an array programming language based primarily on APL (also by Iverson).",
    "url": "https://en.wikipedia.org/wiki/J_(programming_language)",
    "language_short": "bash",
    "code": "#!/opt/local/bin/jc\r\necho 'Hello World'\r\nexit '"
  },
  {
    "id": "525",
    "title": "Jade",
    "description": "JADE is a proprietary object-oriented software development and deployment platform product from the New Zealand-based Jade Software Corporation, first released in 1996.It consists of the JADE programming language, Integrated development environment and debugger, integrated application server and object database management system.",
    "url": "https://en.wikipedia.org/wiki/JADE_(programming_language)",
    "language_short": "c-like",
    "code": "helloWorld();\r\n \r\nbegin\r\n    write \"Hello World\";\r\nend;"
  },
  {
    "id": "526",
    "title": "Jai",
    "description": "In September 2014, Blow began work on a new programming language called \"Jai\" based on ideas he had previously expressed about video game development. It is aimed at \"low-friction\" and fluid development, while directly supporting data-oriented design for high performance. ",
    "url": "https://en.wikipedia.org/wiki/Jonathan_Blow#Jai_language",
    "language_short": "c-like",
    "code": "#import \"Print\"\r\n \r\nmain::(){\r\n \r\n    print(\"hello world!\");\r\n \r\n}"
  },
  {
    "id": "527",
    "title": "Jasmin",
    "description": "Jasmin is a workbench for high-assurance and high-speed cryptography. Jasmin implementations aim at being efficient, safe, correct, and secure.",
    "url": "https://github.com/jasmin-lang/jasmin/wiki/About",
    "language_short": "java",
    "code": ".class public Jasmin\r\n.super java/lang/Object\r\n \r\n.method public static main([Ljava/lang/String;)V\r\n    .limit stack 2\r\n    getstatic java/lang/System/out Ljava/io/PrintStream;\r\n    ldc \"Hello world!\"\r\n    invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V\r\n    return\t\r\n.end method"
  },
  {
    "id": "528",
    "title": "Jason",
    "description": "",
    "url": "",
    "language_short": "llvm",
    "code": "!greeting.\r\n+!greeting : true <- .print(\"Hello World\")."
  },
  {
    "id": "529",
    "title": "Java",
    "description": "Java is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let application developers write once, run anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.",
    "url": "https://en.wikipedia.org/wiki/Java_(programming_language)",
    "language_short": "java",
    "code": "public class Java {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "530",
    "title": "JavaScript (JS)",
    "description": "JavaScript (/ˈdʒɑːvəˌskrɪpt/), often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. JavaScript is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.",
    "url": "https://en.wikipedia.org/wiki/JavaScript",
    "language_short": "javascript",
    "code": "console.log(\"Hello World\");"
  },
  {
    "id": "531",
    "title": "Jelly",
    "description": "Jelly is a golfing language by Dennis Mitchell inspired by the J programming language. It has a free online compiler on Try It Online. It comes with its own character set (of 256 characters) and character encoding, apparently unrelated to any previous encodings.",
    "url": "https://esolangs.org/wiki/Jelly",
    "language_short": "",
    "code": "“½,⁾ẇṭ»"
  },
  {
    "id": "532",
    "title": "Jenkinsfile",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "pipeline {\r\n  agent any\r\n  stages {\r\n      stage('Print Message') {\r\n          steps {\r\n              echo 'Hello World'\r\n          }\r\n      }\r\n   }\r\n}"
  },
  {
    "id": "533",
    "title": "Jess",
    "description": "Jess is a rule engine for the Java platform that was developed by Ernest Friedman-Hill of Sandia National Labs. It is a superset of the CLIPS programming language. It was first written in late 1995.",
    "url": "https://en.wikipedia.org/wiki/Jess_(programming_language)",
    "language_short": "lisp",
    "code": "(printout t \"Hello World\")"
  },
  {
    "id": "534",
    "title": "JScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "WScript.Echo(\"Hello World\");"
  },
  {
    "id": "535",
    "title": "JSFuck",
    "description": "JSFuck is an esoteric subset of JavaScript, where code is written using only six characters: [, ], (, ), !, and +. The name is derived from Brainfuck, an esoteric programming language that also uses a minimalistic alphabet of only punctuation. Unlike Brainfuck, which requires its own compiler or interpreter, JSFuck is valid JavaScript code, meaning that JSFuck programs can be run in any web browser or engine that interprets JavaScript. JSFuck is able to recreate all JavaScript functionality using such a limited set of characters because JavaScript is a weakly typed programming language, and it allows the evaluation of any expression as any type.",
    "url": "https://en.wikipedia.org/wiki/JSFuck",
    "language_short": "",
    "code": "[][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]][([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]](([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (+(+!+[] + [+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + [!+[] + !+[]] + [+[]]) + [])[+!+[]] + (![] + [])[!+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]] + (![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]][([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]]((!![] + [])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + ([][[]] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+!+[]] + (+[![]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+!+[]]] + ([][[]] + [])[+[]] + ([][[]] + [])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[] + !+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (![] + [])[+!+[]] + (+(!+[] + !+[] + [+!+[]] + [+!+[]]))[(!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]]](!+[] + !+[] + !+[] + [+!+[]])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]])()([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]][([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]]((!![] + [])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + ([][[]] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+!+[]] + (+[![]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+!+[]]] + (!![] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[] + !+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (![] + [])[+!+[]] + (+(!+[] + !+[] + [+!+[]] + [+!+[]]))[(!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]]](!+[] + !+[] + !+[] + [+!+[]])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]])()(([] + [])[([![]] + [][[]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (![] + [])[+!+[]] + (![] + [])[!+[] + !+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[] + !+[]]]()[+[]])[+[]] + (!+[] + !+[] + [!+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[]]) + []) + (+(+!+[] + [+[]] + [+!+[]]))[(!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]]](!+[] + !+[] + [+!+[]])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[]] + (![] + [])[!+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+[![]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+!+[]]] + (+(!+[] + !+[] + !+[] + [!+[] + !+[]]))[(!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]]](!+[] + !+[] + !+[] + [!+[] + !+[] + !+[]]) + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]] + (![] + [])[!+[] + !+[]] + ([][[]] + [])[!+[] + !+[]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]][([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]]((!![] + [])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + ([][[]] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+!+[]] + (+[![]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+!+[]]] + ([][[]] + [])[+[]] + ([][[]] + [])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[] + !+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (![] + [])[+!+[]] + (+(!+[] + !+[] + [+!+[]] + [+!+[]]))[(!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]]](!+[] + !+[] + !+[] + [+!+[]])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]])()([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]][([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]]((!![] + [])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + ([][[]] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+!+[]] + (+[![]] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+!+[]]] + (!![] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[] + !+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (![] + [])[+!+[]] + (+(!+[] + !+[] + [+!+[]] + [+!+[]]))[(!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (+![] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (+![] + [![]] + ([] + [])[([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + ([][[]] + [])[+!+[]] + (![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[+!+[]] + ([][[]] + [])[+[]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+[]] + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[+!+[] + [+[]]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]]](!+[] + !+[] + !+[] + [+!+[]])[+!+[]] + (!![] + [])[!+[] + !+[] + !+[]])()(([] + [])[([![]] + [][[]])[+!+[] + [+[]]] + (!![] + [])[+[]] + (![] + [])[+!+[]] + (![] + [])[!+[] + !+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + ([][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]] + [])[!+[] + !+[] + !+[]] + (![] + [])[!+[] + !+[] + !+[]]]()[+[]])[+[]] + (!+[] + !+[] + [!+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[]]) + []) + (!![] + [][(![] + [])[+[]] + ([![]] + [][[]])[+!+[] + [+[]]] + (![] + [])[!+[] + !+[]] + (!![] + [])[+[]] + (!![] + [])[!+[] + !+[] + !+[]] + (!![] + [])[+!+[]]])[!+[] + !+[] + [+[]]])()"
  },
  {
    "id": "536",
    "title": "JSON (JavaScript Object Notation)",
    "description": "JSON (JavaScript Object Notation, pronounced /ˈdʒeɪsən/; also /ˈdʒeɪˌsɒn/) is an open standard file format, and data interchange format, that uses human-readable text to store and transmit data objects consisting of attribute–value pairs and array data types (or any other serializable value). It is a very common data format, with a diverse range of applications, such as serving as a replacement for XML in AJAX systems.",
    "url": "https://en.wikipedia.org/wiki/JSON",
    "language_short": "json",
    "code": "{ \"hello\": \"world\" }"
  },
  {
    "id": "537",
    "title": "JSONiq",
    "description": "JSONiq is a query and functional programming language that is designed to declaratively query and transform collections of hierarchical and heterogeneous data in format of JSON, XML, as well as unstructured, textual data.",
    "url": "https://en.wikipedia.org/wiki/JSONiq",
    "language_short": "plaintext",
    "code": "\"Hello, World!\""
  },
  {
    "id": "538",
    "title": "JSX",
    "description": "JSX is a statically-typed, object-oriented programming language designed to run on modern web browsers. Being developed at DeNA as a research project, the language has following characteristics.",
    "url": "https://jsx.github.io/",
    "language_short": "javascript",
    "code": "var React = require('react');\r\n \r\nvar HelloWorld = function() {\r\n    return <span>Hello World</span>;\r\n};\r\nHelloWorld.displayName = 'HelloWorld';\r\n \r\nconsole.log(React.renderToString(<HelloWorld />));"
  },
  {
    "id": "539",
    "title": "JudoScript",
    "description": "general purpose programming languages designed primarily for scripting on the Java platform",
    "url": "https://www.wikidata.org/wiki/Q6304189",
    "language_short": "",
    "code": ". \"Hello World\";"
  },
  {
    "id": "540",
    "title": "Julia",
    "description": "Julia is a high-level, high-performance, dynamic programming language. While it is a general-purpose language and can be used to write any application, many of its features are well suited for numerical analysis and computational science.",
    "url": "https://en.wikipedia.org/wiki/Julia_(programming_language)",
    "language_short": "julia",
    "code": "println(\"Hello World\")"
  },
  {
    "id": "541",
    "title": "Jython",
    "description": "Jython is an implementation of the Python programming language designed to run on the Java platform. The implementation was formerly known as JPython until 1999.",
    "url": "https://en.wikipedia.org/wiki/Jython",
    "language_short": "",
    "code": "print \"Hello World\""
  },
  {
    "id": "542",
    "title": "K",
    "description": "K is a proprietary array processing programming language developed by Arthur Whitney and commercialized by Kx Systems. The language serves as the foundation for kdb+, an in-memory, column-based database, and other related financial products. The language, originally developed in 1993, is a variant of APL and contains elements of Scheme. Advocates of the language emphasize its speed, facility in handling arrays, and expressive syntax.",
    "url": "https://en.wikipedia.org/wiki/K_(programming_language)",
    "language_short": "plaintext",
    "code": "\"Hello World\\n\""
  },
  {
    "id": "543",
    "title": "karel",
    "description": "Karel is an educational programming language for beginners, created by Richard E. Pattis in his book Karel The Robot: A Gentle Introduction to the Art of Programming. Pattis used the language in his courses at Stanford University, California. The language is named after Karel Čapek, a Czech writer who introduced the word robot in his play R.U.R.",
    "url": "https://en.wikipedia.org/wiki/Karel_(programming_language)",
    "language_short": "c-like",
    "code": "PROGRAM hello_world\r\nBEGIN\r\n    WRITE('Hello, world!', CR)\r\nEND hello_world"
  },
  {
    "id": "544",
    "title": "Keg",
    "description": "Keg is a stack-based esolang with condensability as well as simplicity and readability in mind. It’s main purpose is to be used for golfing, although it can be potentially used for other purposes.",
    "url": "https://esolangs.org/wiki/Keg",
    "language_short": "plaintext",
    "code": "Hello\\, World\\!"
  },
  {
    "id": "545",
    "title": "KimL",
    "description": "KimL is an esoteric programming language consisting of invocations on pre-defined pseudo-objects. KimL was created by User:Alexanderdna, who created other languages such as ILYC and TS#.",
    "url": "https://esolangs.org/wiki/KimL",
    "language_short": "java",
    "code": "io.out \"Hello World!\""
  },
  {
    "id": "546",
    "title": "Kipple",
    "description": "Kipple is a minimalistic esoteric programming language with a set of stacks, four operators, and a single control structure. Kipple was designed by Rune Berge in March, 2003.",
    "url": "https://esolangs.org/wiki/Kipple",
    "language_short": "plaintext",
    "code": "33>o<100 108>o<114 111>o<87 32>o<111 108>o<108 101>o<72"
  },
  {
    "id": "547",
    "title": "Kitanai",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print \"Hello World\""
  },
  {
    "id": "548",
    "title": "kitten",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "\"Hello, World\" say"
  },
  {
    "id": "549",
    "title": "Koberi C",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(int main()\r\n    (print \"Hello World\")\r\n    (return 0))"
  },
  {
    "id": "550",
    "title": "Kotlin",
    "description": "Kotlin (/ˈkɒtlɪn/) is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library, but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React) or native code (via LLVM); e.g., for native iOS apps sharing business logic with Android apps.[9 Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.",
    "url": "https://en.wikipedia.org/wiki/Kotlin_(programming_language)",
    "language_short": "kotlin",
    "code": "package hello\r\n \r\nfun main(args: Array<String>) {\r\n    println(\"Hello, world!\")\r\n}"
  },
  {
    "id": "551",
    "title": "Kotlin Script",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "println(\"Hello World\")"
  },
  {
    "id": "552",
    "title": "KSH (KornShell)",
    "description": "KornShell (ksh) is a Unix shell which was developed by David Korn at Bell Labs in the early 1980s and announced at USENIX on July 14, 1983. The initial development was based on Bourne shell source code. Other early contributors were Bell Labs developers Mike Veach and Pat Sullivan, who wrote the Emacs and vi-style line editing modes' code, respectively.",
    "url": "https://en.wikipedia.org/wiki/KornShell",
    "language_short": "bash",
    "code": "#!/bin/ksh\r\necho \"Hello, World!\""
  },
  {
    "id": "553",
    "title": "Kumir",
    "description": "Kumir is a Russian educational programming language. The purpose of this Activity -- using the Kumir in Russian OLPC summer camps.",
    "url": "http://wiki.laptop.org/go/Kumir",
    "language_short": "",
    "code": "алг \r\nнач\r\n    вывод \"Hello World\"\r\nкон"
  },
  {
    "id": "554",
    "title": "Labyrinth",
    "description": "Labyrinth is a two-dimensional stack-based programming language developed by user:Martin Ender. The source code resembles a maze which is traversed by the instruction pointer. Labyrinth has two main features setting it apart from most other languages: a) there are no control flow operators - control flow is determined solely by the layout of the maze - and b) the source code can be modified at runtime via cyclic shifts of rows and columns. The latter mechanic was inspired by the German board game Das verrückte Labyrinth.",
    "url": "https://esolangs.org/wiki/Labyrinth",
    "language_short": "plaintext",
    "code": "72.101.108:..111.44.32.87.111.114.108.100.33.@"
  },
  {
    "id": "555",
    "title": "Lasso (LassoScript)",
    "description": "Lasso is an application server and server management interface used to develop internet applications and is a general-purpose, high-level programming language. Originally a web datasource connection tool, for Filemaker and later included in Apple Computer's FileMaker 4.0 and Claris Homepage as CDML, it has since evolved into a complex language used to develop and serve large-scale internet applications and web pages.",
    "url": "https://en.wikipedia.org/wiki/Lasso_(programming_language)",
    "language_short": "",
    "code": "<?LassoScript\r\n    Variable: 'ScreenText' = 'Hello World';\r\n    $$ScreenText;\r\n  ?>"
  },
  {
    "id": "556",
    "title": "LaTeX",
    "description": "LaTeX (/ˈlɑːtɛx/ LAH-tekh or /ˈleɪtɛx/ LAY-tekh,  often stylized as LATEX) is a software system for document preparation.  When writing, the writer uses plain text as opposed to the formatted text found in \"What You See Is What You Get\" word processors like Microsoft Word, LibreOffice Writer and Apple Pages. The writer uses markup tagging conventions to define the general structure of a document (such as article, book, and letter), to stylise text throughout a document (such as bold and italics), and to add citations and cross-references. A TeX distribution such as TeX Live or MiKTeX is used to produce an output file (such as PDF or DVI) suitable for printing or digital distribution.",
    "url": "https://en.wikipedia.org/wiki/LaTeX",
    "language_short": "",
    "code": "\\documentclass{article}\r\n\\begin{document}\r\nHello World\r\n\\end{document}"
  },
  {
    "id": "557",
    "title": "Lazy K (LazyK)",
    "description": "Lazy K, designed by Ben Rudiak-Gould, is a Turing tarpit based on combinatory logic. It is lazily evaluated and purely functional.",
    "url": "https://esolangs.org/wiki/Lazy_K",
    "language_short": "brainfuck",
    "code": "k``s``si`k``s`k```sii``s``s`kski``s``s`ksk``s``s`ksk```s``siii``s``s`kski`k``s``si`k``s``s`ksk```s``s`ksk\r\ni``s`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k\r\n``s``si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski``s``s`ksk`\r\n`s`k``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k````s``s`ksk```s``siii``s``s`kski`s``s`ksk```sii``s``\r\ns`ksk``s``s`kski`k``s``si`k``s`k``s``s`kski```s``siii``s``s`kski`k``s``si`k``s`k``s``s`ksk``s`k``s``s`kski\r\n``s``s`ksk``s``s`kski``s``s`ksk```s``siii``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski``s``s`ksk``s`k``\r\ns``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s`k``s``s`kski``s``s`ksk``s`k``s``s`kski``s``s`ksk```sii`\r\n`s``s`ksk``s``s`kski`k``s``si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k```s``s`kski``s\r\n`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski```s``siii``s``s`kski`k``s``s\r\ni`k``s`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k```sii```sii``s``s`kski`k```sii```sii``s``s`kski"
  },
  {
    "id": "558",
    "title": "LBL",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "INCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nDICA\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nDICB\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nDICC\r\nDICC\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nINCE\r\nDICE\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nINCF\r\nDICF\r\nCLSA\r\nCLSB\r\nCLSD\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nINCA\r\nDICA\r\nDICE\r\nCLSE\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nINCB\r\nDICB\r\nDICC\r\nCLSC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nINCC\r\nDICC"
  },
  {
    "id": "559",
    "title": "LCCBED",
    "description": "LCCBED stands for \"Letter Command Brainf*** Enhanced Derivative\". It was created by iamn00b in 2021. Its goal was simple: to make a slightly more confusing yet wonderful variation of Brainf***. As of the time of writing (September 20, 2021), there are no implementations of LCCBED available yet.",
    "url": "https://esolangs.org/wiki/LCCBED",
    "language_short": "",
    "code": "p(72)ofp(101)ofp(108)ofp(108)ofp(111)ofp(44)ofp(32)ofp(87)ofp(111)ofp(114)ofp(108)ofp(100)ofp(33)o"
  },
  {
    "id": "560",
    "title": "LCoffee",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print \"Hello World\""
  },
  {
    "id": "561",
    "title": "Less",
    "description": "Less (Leaner Style Sheets; sometimes stylized as LESS) is a dynamic preprocessor style sheet language that can be compiled into Cascading Style Sheets (CSS) and run on the client side or server side.",
    "url": "https://en.wikipedia.org/wiki/Less_(stylesheet_language)",
    "language_short": "",
    "code": "body::before {\r\n    content: \"Hello World!\"\r\n}"
  },
  {
    "id": "562",
    "title": "Leszek",
    "description": "Leszek (pronounced lesheck) is a non-imperative esoteric programming language, based on the string-rewriting paradigm. It has no jumps, no loops, no variables nor stack. It was created in 2006 by User:Janek37.",
    "url": "https://esolangs.org/wiki/Leszek",
    "language_short": "bash",
    "code": "\\O\\C\\.1.Hello World!"
  },
  {
    "id": "563",
    "title": "Licorne",
    "description": "Licorne, also known as LicornePL, litteraly \"Unicorn\", is an interpreted weird programming language. It is based on unicorns and french grammar. It exists an IDE (Licorne Writer), programmed in Batch.",
    "url": "https://esolangs.org/wiki/Licorne",
    "language_short": "javascript",
    "code": "hurler.$$.aux licornes; $$Hello, world!\r\ns'arrêter discrétos"
  },
  {
    "id": "564",
    "title": "Like, Python",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "#!usr/bin/python\r\n\r\nyo just print like \"Hello World\" bro"
  },
  {
    "id": "565",
    "title": "LilyPond",
    "description": "LilyPond is a computer program and file format for music engraving. One of LilyPond's major goals is to produce scores that are engraved with traditional layout rules, reflecting the era when scores were engraved by hand.",
    "url": "https://en.wikipedia.org/wiki/LilyPond",
    "language_short": "",
    "code": "\\markup { Hello World }"
  },
  {
    "id": "566",
    "title": "Limbo",
    "description": "Limbo is a programming language for writing distributed systems and is the language used to write applications for the Inferno operating system. It was designed at Bell Labs by Sean Dorward, Phil Winterbottom, and Rob Pike.",
    "url": "https://en.wikipedia.org/wiki/Limbo_(programming_language)",
    "language_short": "",
    "code": "implement Hello;\r\n\r\ninclude \"sys.m\";\r\n sys: Sys;\r\ninclude \"draw.m\";\r\n\r\nHello: module\r\n{\r\n init: fn(ctxt: ref Draw->Context, argv: list of string);\r\n};\r\n\r\ninit(ctxt: ref Draw->Context, argv: list of string)\r\n{\r\n sys = load Sys Sys->PATH;\r\n sys->print(\"Hello World\\n\");\r\n}"
  },
  {
    "id": "567",
    "title": "Lingo",
    "description": "Lingo is a verbose object-oriented (OO) scripting language developed by John H. Thompson for use in Adobe Director (formerly Macromedia Director). Lingo is used to develop desktop application software, interactive kiosks, CD-ROMs and Adobe Shockwave content.",
    "url": "https://en.wikipedia.org/wiki/Lingo_(programming_language)",
    "language_short": "",
    "code": "on startmovie\r\n  alert \"Hello World\"\r\nend"
  },
  {
    "id": "568",
    "title": "Linguine",
    "description": "Linguine, created by Jeffry Johnston in November 2005, is designed as a \"flattened Spaghetti\", and adds unbounded memory and cell values, negative cell indices, unlimited pointers, and multiple commands per line.",
    "url": "https://esolangs.org/wiki/Linguine",
    "language_short": "plaintext",
    "code": " 1[0=72,0$$,0+29,0$$,0+7,0$$,0$$,0+3,0$$,1=32,1$$,0-24,0$$,0+24,0$$,0+3,0$$,0-6,0$$,0-8,0$$,1+1,1$$,1-23,1$$]0"
  },
  {
    "id": "569",
    "title": "Lisaac",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "// Hello World in Lisaac\r\n\r\nSection Header\r\n + name := HELLO_WORLD;\r\n\r\nSection Inherit\r\n\r\n - parent_object:OBJECT := OBJECT;\r\n\r\nSection Public\r\n\r\n - main <-\r\n (\r\n \"Hello World !\\n\".print;\r\n );"
  },
  {
    "id": "570",
    "title": "Lisp",
    "description": "Lisp (historically LISP) is a family of programming languages with a long history and a distinctive, fully parenthesized prefix notation. Originally specified in 1958, Lisp is the second-oldest high-level.",
    "url": "https://en.wikipedia.org/wiki/Lisp_(programming_language)",
    "language_short": "",
    "code": "; LISP\r\n(DEFUN hello ()\r\n  (PRINT (LIST 'HELLO 'WORLD))\r\n)\r\n\r\n(hello)"
  },
  {
    "id": "571",
    "title": "ListLang",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "0dlroW391+*2+491+*4+olleH[\"],"
  },
  {
    "id": "572",
    "title": "LiveScript",
    "description": "LiveScript is a functional programming language that compiles to JavaScript. It was created by Jeremy Ashkenas—the creator of CoffeeScript—along with Satoshi Muramaki, George Zahariev, and many others. Not to be confused with JavaScript (for a brief period in the 1990s, LiveScript was the name of JavaScript).",
    "url": "https://en.wikipedia.org/wiki/LiveScript",
    "language_short": "",
    "code": "console.log \"Hello World\""
  },
  {
    "id": "573",
    "title": "LLVM",
    "description": "The LLVM compiler infrastructure project is a set of compiler and toolchain technologies, which can be used to develop a front end for any programming language and a back end for any instruction set architecture. LLVM is designed around a language-independent intermediate representation (IR) that serves as a portable, high-level assembly language that can be optimized with a variety of transformations over multiple passes.",
    "url": "https://en.wikipedia.org/wiki/LLVM",
    "language_short": "",
    "code": "; llvm-as llvm.ll\r\n; x86 assembly: llc llvm.bc -o llvm.s -march x86\r\n; interpreter: lli llvm.bc\r\n\r\ntarget datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128\"\r\n@.str = internal constant [12 x i8] c\"Hello World\\00\"\r\n\r\n; puts from libc\r\ndeclare i32 @puts(i8*)\r\n\r\ndefine i32 @main(...) {\r\n call i32 @puts(i8* getelementptr([12 x i8]* @.str, i32 0, i32 0))\r\n ret i32 0\r\n}"
  },
  {
    "id": "574",
    "title": "LNUSP",
    "description": "LNUSP is a language with a two-dimensional data space and code space and 5 commands.",
    "url": "https://esolangs.org/wiki/LNUSP",
    "language_short": "yaml",
    "code": "--- Hello World!\r\n---\r\n000        .INPUT          .OUTPUT          .STOP\r\n001 .                      .                .\r\n001  .                     .                .\r\n001   .                    .                .\r\n001    . !.!               .                .\r\n001     .   !              .                .\r\n001    ! .  !              .                .\r\n001    .  !!               .                .\r\n001    *                   .                .\r\n072    + H                 .                .\r\n001    *                   .                .\r\n101    + e                 .                .\r\n001    *                   .                .\r\n108    + l                 .                .\r\n001    *                   .                .\r\n108    + l                 .                .\r\n001    *                   .                .\r\n111    + o                 .                .\r\n001    *                   .                .\r\n032    + (sp)              .                .\r\n001    *                   .                .\r\n087    + W                 .                .\r\n001    *                   .                .\r\n111    + o                 .                .\r\n001    *                   .                .\r\n114    + r                 .                .\r\n001    *                   .                .\r\n108    + l                 .                .\r\n001    *                   .                .\r\n100    + d                 .                .\r\n001    *                   .                .\r\n033    + !                 .                .\r\n001    *                   .                .\r\n013    + (cr)              . -------------- .\r\n001    *                   .                .\r\n001    !                   .                .\r\n001     .                  .                .\r\n001      .        !!       .                .\r\n001       . !.!  !  !      .    !......!    .\r\n001        .   ! .  !   ?......!.....?  !   .\r\n001       ! .  ! . @   ?   .   .??    ? .   .\r\n001       .  !!  ./.   .   .   ?  ?   . .   .\r\n016       .      . * --.-- . --.  .---.-.-- .\r\n001       .      ! .   ?   .   *  ?   . !   .\r\n001       .       !.....?..@.....?.....!....@\r\n001       .        .           ?      ?    .\r\n001       !        !           ..    .    .\r\n001        !......!            ! ?..?    .\r\n001                             !.......!"
  },
  {
    "id": "575",
    "title": "Locomotive Basic",
    "description": "Locomotive Basic is a proprietary dialect of the BASIC programming language written by Locomotive Software on the Amstrad CPC (where it was built-in on ROM) and the later Locomotive BASIC-2 as a GEM application on the Amstrad PC1512 and 1640. It was the main descendant of Mallard BASIC, the interpreter for CP/M supplied with the Amstrad PCW.",
    "url": "https://en.wikipedia.org/wiki/Locomotive_BASIC",
    "language_short": "",
    "code": "10 print \"Hello World\"\r\nrun"
  },
  {
    "id": "576",
    "title": "Log",
    "description": "log is an esolang invented by User:A based on NOR logic.",
    "url": "https://esolangs.org/wiki/Log",
    "language_short": "accesslog",
    "code": "(A)\r\n((A))\r\n(A)\r\n(A)\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n((A))\r\n(A)\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n((A))\r\n((A))\r\n(A)\r\n((A))\r\n((A))\r\n((A))\r\n((A))\r\n(A)\r\n(A)\r\n((A))\r\n(A)\r\n(A)\r\n(A)\r\n(A)\r\n(A)"
  },
  {
    "id": "577",
    "title": "Logical",
    "description": "Logical is an esoteric programming language created by David Catt (user:David.werecat) which doesn't do what you think it should.",
    "url": "https://esolangs.org/wiki/Logical",
    "language_short": "plaintext",
    "code": "COMET DEFN !DLROW_,OLLEH"
  },
  {
    "id": "578",
    "title": "Logicode",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "out @1001000+@1100101+@1101100+@1101100+@1101111+@100000+@1010111+@1101111+@1110010+@1101100+@1100100"
  },
  {
    "id": "579",
    "title": "Logo",
    "description": "Logo is an educational programming language, designed in 1967 by Wally Feurzeig, Seymour Papert, and Cynthia Solomon. Logo is not an acronym: the name was coined by Feurzeig while he was at Bolt, Beranek and Newman,",
    "url": "https://en.wikipedia.org/wiki/Logo_(programming_language)",
    "language_short": "",
    "code": "print [Hello World]"
  },
  {
    "id": "580",
    "title": "logOS",
    "description": "logOS is an imperative and partially object-oriented language based around the 'Desktop metaphor' that modern operating systems use. It was brainstormed with the unaffiliated Esolangs Discord server and implemented in Python by User:IFcoltransG in late 2019.",
    "url": "https://esolangs.org/wiki/LogOS",
    "language_short": "accesslog",
    "code": "print [Hello World]"
  },
  {
    "id": "581",
    "title": "Logtalk",
    "description": "Logtalk is an object-oriented logic programming language that extends and leverages the Prolog language with a feature set suitable for programming in the large. It provides support for encapsulation and data hiding, separation of concerns and enhanced code reuse. Logtalk uses standard Prolog syntax with the addition of a few operators and directives.",
    "url": "https://en.wikipedia.org/wiki/Logtalk",
    "language_short": "",
    "code": "write('Hello World')"
  },
  {
    "id": "582",
    "title": "LOLA",
    "description": "LOLA (Lots Of Lambda Abstractions) is a minimalistic functional programming language devised by User:Smjg. It is based on lambda-calculus.",
    "url": "https://esolangs.org/wiki/LOLA",
    "language_short": "brainfuck",
    "code": ":H,:e,2:l,,:o,:',:_,:w,:o,:r,:l,:d,:!,:%,:\\\\b,\\\\a,,,,,,,,,,,,,,\r\n \r\n+\\\\\\cb,ba,,\r\n*\\\\ba+,,\\\\a,\r\n:\\\\\\a\\c,c,\r\n \r\nH*+8,,8,\r\ne+d,\r\nl8+,d,\r\no3+,l,\r\n'_+,^,\r\nw8+,o,\r\nr+^,+,e,\r\nd2%,\r\n_52,\r\n!+_,\r\n \r\n2\\\\bba,,\r\n3+2,\r\n5+22,,\r\n832,\r\n%*2,5,\r\n^2*2,,3,"
  },
  {
    "id": "583",
    "title": "LOLCODE",
    "description": "LOLCODE is a general-purpose programming language being developed to resemble the kitty pidgin natlang of the lolcat phenomenon. It was initially created in 2007, one year after LOLCATS became an Internet meme and development continued for some time before the creator lost interest (or something like that).",
    "url": "https://esolangs.org/wiki/LOLCODE",
    "language_short": "nginx",
    "code": "HAI\r\nCAN HAS STDIO?\r\nVISIBLE \"Hello World\"\r\nKTHXBYE"
  },
  {
    "id": "584",
    "title": "LOLPython",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "VISIBLE \"Hello World\""
  },
  {
    "id": "585",
    "title": "Losescript",
    "description": "Losescript is a programming language that certainly makes you win in some golf contests (while if the questions change even a bit, you will certainly lose).",
    "url": "https://esolangs.org/wiki/Losescript",
    "language_short": "plaintext",
    "code": "H"
  },
  {
    "id": "586",
    "title": "LotusScript",
    "description": "LotusScript is an object oriented programming language used by Lotus Notes (since version 4.0) and other IBM Lotus Software products.",
    "url": "https://en.wikipedia.org/wiki/LotusScript",
    "language_short": "",
    "code": "Sub Initialize\r\n    Print \"Hello World\"\r\nEnd Sub"
  },
  {
    "id": "587",
    "title": "Löve",
    "description": "LÖVE (or Love2D) is an open-source cross-platform engine for developing 2D video games. The engine is written in C++ and uses Lua as its scripting language. It is published under the zlib license..",
    "url": "https://en.wikipedia.org/wiki/L%C3%B6ve_(game_engine)",
    "language_short": "",
    "code": "function love.draw()\r\n    love.graphics.print(\"Hello World\", 400, 300)\r\nend"
  },
  {
    "id": "588",
    "title": "LSL (Linden Scripting Language)",
    "description": "LSL (Linden Scripting Language) is the programming language used by residents in Second Life. LSL scripts can control the behavior of in-world objects. LSL has syntax similar to C.",
    "url": "http://wiki.secondlife.com/wiki/Linden_Scripting_Language",
    "language_short": "lsl",
    "code": "default\r\n{\r\n    state_entry()\r\n    {\r\n        llSay(0, \"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "589",
    "title": "LUA",
    "description": "Lua (/ˈluːə/ LOO-ə; from Portuguese: lua [ˈlu.(w)ɐ] meaning moon)[a] is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications. Lua is cross-platform, since the interpreter of compiled bytecode is written in ANSI C, and Lua has a relatively simple C API to embed it into applications.",
    "url": "https://en.wikipedia.org/wiki/Lua_(programming_language)",
    "language_short": "lua",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "590",
    "title": "Lua Grimex",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "//! externalblock extension=lua ObjectMerger $$FILENAME$$\r\n\r\n//! i   log(\"Hello World\")\r\n\r\n//! endexternalblock"
  },
  {
    "id": "591",
    "title": "LWC",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "<template>\r\n  <lightning-card>\r\n    <div>\r\n      <p>Hello World</p>\r\n    </div>\r\n  </lightning-card>\r\n</template>"
  },
  {
    "id": "592",
    "title": "M code (M-code)",
    "description": "M-Code is a Turing-complete esoteric programming language designed by User:Madk.\r\n<br>M-Code takes a lot of inspiration from 6502 assembly, brainfuck, and then it tosses a handful of features of its own. Every character in a source file represents a single value, and numerical values can be specified inside [] brackets. There are three variations: 8 bit M-Code, 16 bit M-Code, and 32 bit M-Code. The higher bit variations were introduced to allow a larger tape size than a mere 256 bytes. All values in each bit mode are that number of bits. 32 bit values are signed.",
    "url": "https://esolangs.org/wiki/M-Code",
    "language_short": "brainfuck",
    "code": "4[28]j[4]}[15].i[5]}[5]?[4];_Hello,[32]world!"
  },
  {
    "id": "593",
    "title": "M4",
    "description": "m4 is a general-purpose macro processor included in most Unix-like operating systems, and is a component of the POSIX standard.",
    "url": "https://en.wikipedia.org/wiki/M4_(computer_language)",
    "language_short": "plaintext",
    "code": "Hello"
  },
  {
    "id": "594",
    "title": "MacLisp",
    "description": "MacLisp or MacLISP) is a programming language, a dialect of the language Lisp. It originated at the Massachusetts Institute of Technology's (MIT) Project MAC (from which it derived its prefix) in the late 1960s and was based on Lisp 1.5. Richard Greenblatt was the main developer of the original codebase for the PDP-6; Jon L. White was responsible for its later maintenance and development. The name Maclisp began being used in the early 1970s to distinguish it from other forks of PDP-6 Lisp, notably BBN Lisp.",
    "url": "https://en.wikipedia.org/wiki/Maclisp",
    "language_short": "lisp",
    "code": "(comment) ;-*- Lisp -*-\r\n(progn\r\n  (defun hello-world ()\r\n    (princ \"Hello World\")\r\n    (quit))\r\n  (close (prog1 infile (inpush -1)))\r\n  (sstatus feature noldmsg)\r\n  (gctwa)\r\n  (gc)\r\n  (sstatus flush t)\r\n  (suspend \":KILL \" '(ts hello))\r\n  (hello-world))"
  },
  {
    "id": "595",
    "title": "Macmac",
    "description": "Macmac is an esoteric programming language created by David Catt (user:David.werecat) in which every command is a function and loops are emulated using macros.",
    "url": "https://esolangs.org/wiki/Macmac",
    "language_short": "accesslog",
    "code": "put(72)\r\nput(101)\r\nput(108)\r\nput(108)\r\nput(111)\r\nput(44)\r\nput(32)\r\nput(119)\r\nput(111)\r\nput(114)\r\nput(108)\r\nput(100)\r\nput(33)"
  },
  {
    "id": "596",
    "title": "Macsyma",
    "description": "Macsyma (/ˈmæksɪmə/; \"Project MAC's SYmbolic MAnipulator\") is one of the oldest general-purpose computer algebra systems still in wide use. It was originally developed from 1968 to 1982 at MIT's Project MAC.",
    "url": "https://en.wikipedia.org/wiki/Macsyma",
    "language_short": "java",
    "code": "/* Macsyma */\r\nprint(\"Hello World\");"
  },
  {
    "id": "597",
    "title": "Madbrain",
    "description": "Madbrain is a stack-based \"2D\" esoteric programming language invented by User:Feuermonster in 2010.",
    "url": "https://esolangs.org/wiki/Madbrain",
    "language_short": "",
    "code": "9 5 9 9 5 7 8 7 5 5 9 5 8\r\n8 5 4 4 3 6 4 4 3 3 4 5 4\r\n* * * * * * * * * * * * *\r\nc 4 3 3 2 2 c 4 2 4 3 4 1\r\n2 * * * * + 2 * * + * * +\r\n0 1 c c 7 c 0 7 7 6 c c c\r\ng + 2 2 + 2 g + + * 2 2 x\r\n  c 0 0 3 0   c 3 c 0 0\r\n  2 g g * g   2 * 2 g g\r\n  0     c     0 c 0\r\n  g     2     g 2 g\r\n        0       0\r\n        g       g"
  },
  {
    "id": "598",
    "title": "Magic",
    "description": "n the context of computer programming, magic is an informal term for abstraction; it is used to describe code that handles complex tasks while hiding that complexity to present a simple interface. The term is somewhat tongue-in-cheek, and often carries bad connotations, implying that the true behavior of the code is not immediately apparent.",
    "url": "https://en.wikipedia.org/wiki/Magic_(programming)",
    "language_short": "bash",
    "code": "HELLO.WORLD\r\n \r\n\"Hello, world!\"^#;"
  },
  {
    "id": "599",
    "title": "MailBox",
    "description": "MailBox is a language based around e-mail filters. A program consists of a series of numbered mailboxes. Each box contains rules. Each rule is associated with a list of actions. When a message is received in a mailbox, the rules are evaluated and if they evaluate to true, the actions are applied.",
    "url": "https://esolangs.org/wiki/MailBox",
    "language_short": "lisp",
    "code": "box 0\r\n(once)\r\nsend \"outputHello, world!\" to 0\r\n(contains \"output\")\r\noutput without \"output\""
  },
  {
    "id": "600",
    "title": "Make",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "$$(info \"Hello World\")\r\nall:"
  },
  {
    "id": "601",
    "title": "Malbolge",
    "description": "Malbolge, invented by Ben Olmstead in 1998, is an esoteric programming language designed to be as difficult to program in as possible. The first \"Hello, world!\" program written in it was produced by a Lisp program using a local beam search of the space of all possible programs. More practical programming methods have been found later. It is modelled as a virtual machine based on ternary digits.",
    "url": "https://esolangs.org/wiki/Malbolge",
    "language_short": "brainfuck",
    "code": "(=<`#9]~6ZY32Vw/.R,+Op(L,+k#Gh&}Cdz@aw=;zyKw%ut4Uqp0/mlejihtfrHcbaC2^W\\>Z,XW)UTSL53\\HGFjW"
  },
  {
    "id": "602",
    "title": "Malbolge Unshackled",
    "description": "Malbolge Unshackled is a dialect of Malbolge from 2007 by Ørjan Johansen. It attempts to remove the arbitrary memory limits of Malbolge in order to create a language that is hopefully Turing complete, while keeping closely to the spirit of Malbolge in most ways.",
    "url": "https://esolangs.org/wiki/Malbolge_Unshackled",
    "language_short": "brainfuck",
    "code": "bCBA@?>=<;:9876543210/.-,I*)(E~%$$#\"RQ}|{zyxwvutsrD0|nQl,+*)(f%dF\"a3_^]\\[ZYXWVUTSRQJmNMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$$#dc~}|_^yrwZutsrqpinPlOjihgf_dcEaD_^]\\UZYX:V9TSRQPONGLK.IHGF?DCB$$@#>=<;4987w/v3210/.-,+$$k('&%|#\"!~w`{zyxwputslUponmlkjiKgf_Hcba`_^]\\[ZYXWP9TSRQPONMFKJCHA*EDCBA@?>=<|:98y6543210).-,%*#j'&%$$#\"!~}|^ty\\wvutslkTonmlkjcLafedc\\aD_X]\\[TY<WVOTSLQ4ONMFKDC,GFEDC<A$$9>=<;49z765.3,+r/.-,l*)(!h%$$#\"!~}|{zyxwvunWrqponmlkjihgfed]Fa`_^]\\[ZYXW9UTSRK4ONMLKJIHGFEDCBA@?8!<;:9876543210/.-,%l)('&%$$#\"!~}|^t]xqvYnsrqpinQlejihafIdc\\a`Y^A\\[ZSXQ:8NSRQJ3NMLKJIHGFEDC%;$$?8=<}49876543210qp',+*)('&%$$#\"!b}`{zyrwpuXmrqpohmlOdihgfedcba`_^]\\?=S<WPU8SRQJOHM0EJIHG@ED'<A@?>=<;:987654us+r/(-,m*#('&%$$#\"!~a`{tyxwvutsrqpoRmPkjibg`eHcb[`_X]@UZYXWPUT7RKPONMLKJIHGFED'%;$$?8=~;:387054u2+0/.-,+*)('&%$$ecyb}v{z]xwputsrqponQPkjchgfedcba`_B]@[ZSXWPU8SLQPOHML/JIBGFEDCBA@?>=<}{3z705v321*/(om%*)j'&}$$#\"!~}|{zyxwZXnWrkpoRmlkdihgfedcFE`_^W\\[ZYXWVUT7R5PONGLEJ-HG@ED=B%@9>=<5:9z765.3210/.-,+*)jh~g$${\"c~}v{zsxwZutslqponmlkjihgJH^Gb[`_B]\\[ZSXWVUTS65PONMFKJIHGFED'B%@?>7<5:9z7654-210/.-,+*)jh~g$${dbx}|_zyxwputsrqponmlOMcLg`edGba`_^W\\[ZYX;:UTSRQJONMLKJI,G*EDC<A:?\"=<5:927x5.321*/p',+*)\"'&g$$#\"!~w|{zyxwvutWUkTohmlOjihgf_dcba`_^]\\?=S<WPUT7RQPONMLEJIH+*EDCBA@?8=<;:9z7x543,1*/.o,+*)('&}$$#\"!~}|_]s\\wputWrqponmlejihgfedGE[D_X]\\?ZYXWVUTSLQP32MLKJIHGF?DCBA$$?\"=<;4927x54-21*/p-&+*)\"'h}$$#\"!x}|_zyxwvutslqponmlOMcLg`edGba`_^]\\[TYXWVUT75K4OHML/JIHGFEDCBA@9\"=~;:987654321*/p-n+*)\"'~%f#\"y~}v{^sxwvunsrUponmlkjihgf_dcbECYB]V[>YXQVUNSR5PONMLKJIHGF?DCB%#9\"=6;:{876543210/.-&m*)j'&%$$#\"!~}|{zs\\wZutslqjoRmfkjibgfIdcba`_^]\\[ZYRWV97M6QJ31GLK.IHGFEDCBA@?>7<;|z2y6/43t10/.-,+*)('&%|e\"!~a|{zyxwvutsrqpiRmlOjibgf_dGb[`_^W\\[>YXWVUTSRQPONMFK.,B+F?DC&A@?>=<;:98765.3tr*q.',+l)('&%$$#\"!~}|{zs\\wvutWrqponmlkjihgfe^Gba`C^]\\UZSX;VUNSRKP3HMLKJCHG*EDCBA@?>=<;:981xv.u2+0/p-,+*)('&%$$#\"!~w`^t]xqvuXsrqponmlkjihgfe^Gba`_^A\\[ZYXWVUTSRQPONG0KJIH+FED=B;@?\"=<;:9876543210/(o,l$$k(!hf|#\"c~}|{zyxwvutsrqpiRmOeNibgfIdcba`_^]\\[ZYXWVUN7RQPONM0KJIHGFEDCBA@?>=<5|98765v3,10/(-n%*)('~%$$e\"!~}|{zyxwvutsrqjSnmOeNibgJe^cbaZ_^A\\[ZYXWVUTSRQPONMF/JI+A*E>CB%@?>=<;:9876543210)p-,+*)('h%$$#\"!~}|{zyxwvutslUponmlkNihg`e^cbE`_^]\\[ZYXWVUTSRQPI2MLK-C,G@E(CB;@?8=~;498705v-210/(om%*)j'&%$$#\"!~}|{zyxwvunWrqpRhQlejiLgfedcba`_^]\\[ZYXWVO87RQ4ONMLKJIHGFEDCBA@?>7~}:{876/4-2s0/(-,%*k\"'&%$${\"!b}|{zyxwvutsrqponmleNihgfH^Gb[`C^]V[ZSXW:UTSRQPONMLKJIHGFED=&A@?>~6}:387x543210/.-,+*)('&%$$#zc~a|{^yxwvutsrqponmlkjihg`IdGbE`_X]\\UZ=XQVUTMRQ4ONMLKJIHGFEDCBA@?>=6}:9876v.u2+0q.-,%*#jh~%$$e\"!~}|{zyxwvutsrqpongPkjihgI_Hc\\a`C^]\\?TY<WVUTSR5PO2MLK.CH+FEDCBA$$?\"=<;4927x54-21*/p-&+*)\"'h}$$#\"!x}|_zyx[puXsrqponmlkjLbKf_dGba`Y^W\\?ZSXWVOTS6QPO2GL/JIHGFEDCBA#9\"=6;:{876w4321*/.o,+*)('&%$$#\"c~}`{zy\\wvutmrqTonmlkjihgfeHcFa`_X]V[>YRWVUNS6KPONMFKJ-HGF)DCBA:?>!<;:9876543210/.n&m*#('h%$$#d!~}|uzy\\wvutsrqponmlkjiKaJe^cbED_XA\\[ZYXWVUTSR5PO21LE.IHGFEDCBA@?\"=~;:92705v32+0/(-n%*)('~%$$ed!xa|{zyxwvutsrqponPfOjchgJId]Fa`_^]\\[ZYXWVUTS5K4OHML/.IHA*EDCBA@?>=<;:{87xw43,s0/.-,+*)('&%f#\"cb}|u^yxwvutsrqponmlkjLbKf_dcFE`_XA\\[ZYXWVUTSRQPONM/E.IBGF)(CBA:#>=<;:98765432s0/po,+*#j'&%$$#\"!~}|{zy\\wZunsrqjoRglkjibgfIHcbaZC^]\\[ZYXWVUTSRQPON0F/JCH+F?DCB;@?\"!<;:3z76543210/.-,+*)('g}f#z!~a`{zyxqvutsrqponmlkjihKfeHGba`_X]\\[ZYXWVUTSRQPO2M0KJCHG@E(=BA@?8=<}|9876/43210/.-,+*)('&%$$#\"bxa|uzy\\[vutslqponmlkjihgfedcba`_AW@[TYX;:UTSRQJONMLKJIHGFEDCB%@?\"!<;:9816543210/.-,+*)j'h%$$#z!x}`uzyxwputWVqponmfkjihgfedcba`_^]\\[Z<R;VOT7RQPINGL/DIHGF?DC&%@?>=<5:9876543210/.-,+*)i!h%|#\"cb}|{zyxqvutsrqponmlkjMhgJIdcba`_X]\\[ZYXWVUTSRQ4O2MLKDIBG*ED=BA:?\"7<;:9276wv3210/.',+*)('&%$$#\"!~}|{z\\r[votWrqjonglkNMhgfedc\\a`_^]\\[ZYXWVUTSRQ3I2MFKJ-,GFEDCBA:?>=<;:987654u21rq.-,+*)(!&%$$#\"!~}|{zy\\wZutmrqjoRmfkjibgfIHcba`_^]V[ZYXWVUTSRQPONML.D-HAF)DCB;@9\"~6;:{z7654321*/.-,+*)('&%$$#\"!~`v_zsxwvutmVqponmlkjihgJedcbaZC^]\\[ZYXWVUT7R5PONGLEJ-HG@ED=B%@9>=<5:{27654-210/.'n+*)('&%$$#\"!~}|{]s\\wpuXsrqjohmPkdihg`edcbaZC^]\\[ZYXWVUTSRQP2H1LEJIHGFEDCBA:#>=<;:98765432+r/.-,+*)('&%$$#zc~`v_zs\\ZputsrqponmleNiKaJe^cba`_^]\\[ZYRWVUTSRQPONMLKJIHGFEDCBA@?>=<;:98y65432s0/.-,+*)('&}$$#\"!~}|{zyxwvutsrqponmlkjihgfedcFa`_^]@[>YXWPUNSRQPONMLKJIBGFEDCBA@?>=<;:9876543210/.-,+*)(i&%$$#\"!~}|^t]xqvutsrqponmlejihgfedcba`_^]\\[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9876543210/(-,+*)('&%$$#\"!~}|{zyxwvutsrqponQlkjihKfedcba`_^]\\[ZSXWVUTSRQPONMLKJIHGFEDCBA@?>=<;|98765v3t10).-&+l)\"'&%|#dy~}|{tyxwvutsrqponmfkjihgfedcba`_^]\\[ZYXWVUTSRQPON1LKJIHGFED&<%@9>!<;49816w4-210).-,+*)('&%$$#\"y~}|{zyxwvutsrqponmlkjihgfedcbaD_^]\\[ZYXW9O8SLQPONMLKJIHGFED=BA@?>=<;:9876543210/.-,+*)('&g$$#\"!~a|{zyxwvutsrqpohmlkjihgfedcba`_^]\\[ZYXWVUTSRQ4ONMLK.I,GFE>C<A$$?8=<;49z16543,10/.-,+*)('&%$${\"!~}|{zyxwvutsrqponmlkjihgfedGba`_^]\\[Z<R;VOT7RQPINGL/JCHGF?DCBA@?>=<;:9870543210/.-,+*)('&%$$#\"!~}|{zyxwZutsrqponmOeNibgfedcba`_^]\\[ZYRWVUTSRQPONMLKJIHGFEDCBA@?>=<}:9876w43210/.-,+*)('&}$$#\"!~}|{zyxwvutsrqponmlkjihgJedcbaD_^]\\[ZYXWVUTSRQJONMLKJIHGFEDCBA@?>=<;:987654u210/.-,+*j\"i&}$$e\"y~}|uz]rwvutmVTjonmlkjihgfedcbaZ_^]\\[ZYXWVUTSRQPONMLKJIHGFED'BA@?>=<;:z2y6/43210q(-,+*)('&%$$#\"!~}|{zyxwvutsrqTonmlkNihgfeH]ba`_^]\\[ZYXWVUTSRQPONMLKJIH+FEDCB%@#>=6;:387654u,10/.-,+*)('&%$$#\"!~}|{zyxwvuXsrqponmlkMcLg`eHc\\a`_X]@UZYXWP97MRQPON1FKJIHGFEDCBA@?>=<;:987654321r/.-,+*)('g}f#z!~}|{^yrwvutsrqponmlkjihgfedcba`_^A\\[ZYX;VUTSR5PINMLKJIHGFEDCBA@?>=<;:98765v3210/p-,+*)j'~%$$#\"!~}|{zyxwvutsrqponmlkjMhgfedcba`BXA\\UZ=XWPUTMR5JONMLE.,BGFEDC&A:?>=<;:9876543210/.-,+*)('&g$$#\"!~}|{z\\r[votsrqpSnmfkjihgfedcba`_^]\\[ZYXWVUTS6QPONM0KJIHG*ED=BA@?>=<;:9876543210/.-,+*k('&%$$e\"c~}v{zsx[votsrkponmlOjibgfedcba`_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\"=6;:9276543t10).-,+*)('&%$$#\"!~}|{zyxwvutWrqponmlkjLbKf_dcba`C^]\\UZYXWVUTSRQPONMLKJIHGFEDC&A@?>=~;:987x543,10/.-,+*)('&%$$#\"!~}|{zyx[vutsrUponmlOjihafedcba`_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\"=<;4927x5.321*/p',+*)\"ig}$$#\"!~a|{zsxwvutsrqponmlkjihgfedcbaD_^]\\[ZYXW9O8SLQPONM0KJIHGFEDCB;@?>=<;:9876543210q.-,+*k('&%$$e\"!~}|{zyxwputsrqponmlkjihgfeHcba`_B]@[ZYRWPU8SRKPOHM0KDIHG@E(=BA@?8=<;:9z76543210/.',+*)('&%$$#\"!~}|{z]xwvutsrqpRhQlejMhg`ed]bE`Y^]\\UZ=RWVUTMRQPON1LKJIHGFEDC<A@?>=<;:987654321r/.-,+*)('g}f#z!~}|{^yxwvutsrUjonmlkjihgfedcbE`_^]\\?ZYXWV9TSRQPONM0EJIHGFEDCBA@?>=~;:987x5v321*/(-n+$$)('~%f{\"!~}v{zyxwZutsrqponQfkjihgfedcba`_^A\\[ZYXWVUT6L5PIN1LKJCHAF)D=BA@9>=<;:{87654321r).-,+*)('&%$$#\"!b}|{zyxwvuWmVqjonmPeNihgfedcba`_^]\\[ZY<WVUTS6QPO2G0KJIHGFEDCBA@?>=<;|98765v3t10/(-&+l)\"'&%|#dy~}|{tyxwZoXsrqponmlkjihgfedcFa`_^]\\[ZY;Q:UNSRQ4I2MLKJIHGFEDCBA@?>=~;:9876543s+r/(-,+l)\"'h%$$#\"!~}|{zyxwvutsVqponmPkjiLg`eHcba`_^]\\[ZYXWVUTS6QPONM0K.IHG@E>C&A:?>=6;|38765.321r/(-n+*)('&%$$#\"!~}|{zy\\wvutsrqpoQgPkdihgJe^cFa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C<A@?\"=<5|9876543210/.-,+*)j'&%$$#d!~}`{zs\\wvutsrqponmlkjihgJedcbaD_B]\\UZYRW:OTSRQJONM0KJC,GFEDCBA@?>=<;:987x543210/.-m%l)\"'h}$$#\"!x}|{^yxqZutsrqponmlkjihgfeHcba`_^]\\[=S<WPUTS6QPOHM0KJIHGFEDCBA@?>=<;|98765v321r/.-&+l)('&%$$#\"!~}|{zyxwZutsrqToRmlkdibgJed]baZ_BW\\[ZYRWVU8SRQJO2MLKJIHGFEDCBA@?>=~;:9876543s+r/(-,+l)('~%f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\a`_B]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=<;|98765.3t10/.-,+*)('&%$$#\"!b}|{zy\\wZunsrqjoRglkjibgfeHcba`_X]@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;|92765.321r/.-,+$$)j'&%$$#\"!~}|{zyxwvuXsrqponmlkMcLg`edcFa`_^]\\U>YXWVUTSRQPONMLKJI,GFEDC&A@?\"=<;:981x543210/.-,+*)('&%f#\"!~}`{^yxwpunsVqpinmfkNchgfe^cbaD_^]\\[ZS<WVUTSRQPONMLKJIHG*EDCBA@?>=}5|92765v3210/.'n+*)('&%$$#\"!~}|{zy\\wvutsrqpoQgPkdihgJedcba`_^W@[ZYXWVUTSRQPONMLK.IHGFE(CBA$$?>=<;:981x543210/.-,+*)('&%f#\"!~}`{^yrwvunsVkponmfkjiLgfedcba`YB]\\[ZYXWVUTSRQPONM0KJIHGFEDC%;$$?8=~;49870543t10/.-,+*#j'&%$$#\"!~}|{zyxwvuXsrqponmlkMcLg`edcFa`_^]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=<;|987654321*/p-,+*)('&%$$#\"!~}|{^yxwvuXsVqpohmfkNihafe^cF[`_^]V[ZY<WVUTSRQPOHM0KJIHGFEDCBA@?>=<;|987654321q)p-&+*)j'&%$$#\"!~}v{^yxwvutsrqponmlkjiLgfedcba`_AW@[TYXW:UTSRQPONMLKDI,GFEDCBA@?>=<;:987x54321r/.-n+*)('&%$$#\"!x}`{zyxwvutsrqponmlkNihgfeHcFaZ_^]V[>SXWVUNSRQ4ONMLKJIHGFE>C&A@?>=<;:987654321r/.-,+*)('g}f#z!b}v{zyrwvuXsrqponmlkjibgJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?>=<;:9876/v3210/.-,+*)('&%$$#d!~}|{^yxwZutsrqponmlkjcLgfedcba`_^]\\[ZYXW:UTSRQ4O2MLKDIBG*ED=BA:?\"7<;:92765v3210/.-,+*)(!h%$$#\"!~}|{zyxwvutsVqponmlkjiKaJe^cbaD_^]\\[ZYXWVUTM6QPONMLKJIHGFEDCBA$$?>=<;:987w/v3,10/p-,+*)('&%$$#\"!x}`{zyxwvutsrqponmlkNihgfeHcbaD_^]\\[ZYXWVUTSLQ4ONMLKJIHGFEDCBA@?\"=<;:9z765v3210/.-,+*)('~%f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\ECY^]\\?ZYXWVUTSRQPONGL/JIHGFEDCBA@?>=<;:{876543210p(o,%*)(i&%$$#\"!~}|{zyxwpYtsrqponmlkjihgfedGba`_^A\\[Z=XWVUTSRQPONMLKD-HGFEDCBA@?>=<;:98y65432s0q.',+*#(i~%$$#\"y~}|_zyxwvutsrqponmfOjihgfedcba`_^]\\[Z=XWVUTSRQP2H1LEJ-HAFED=BA@#>=<;:987654321*q.-,+*)('&%$$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\[ZSX;VUTSRQPONMLKJIHGF)DCBA@#>=<}:9876543210/.-,%*k('&%$$#\"!~}|{zyxwvYtsrqpSnQlkdihafI^cba`Y^]\\?ZYXWVUTSRQPONMLEJ-HGFEDCBA@?>=<;:98y6543210/.n&m*#('&g$$#\"!~}|{zyxwvutmrUponmlkjihgfedcba`C^]\\[ZYXWV8N7RKPON1LKJIHGFEDCBA@?>=6}:9876543210/.-,+*k('&%$$e\"!~a|{zyxwvutsrqponmfOjihgfedcba`_^]\\[Z=XWVUT7R5PONGLEJ-HG@ED=B%:?>=<5:98y6543210/.-,+*)('~g$$#\"!~}|{zyxwvutsrUponmlkjihJ`Id]bE`_X]\\UZYX;VUTSRQPONMLKJIHG@)DCBA@?>=<;:987654u210/.-,+*j\"i&}$$#\"c~}|{zyxwvutsrqponglOjihgfedcba`_^]\\[Z=XWVUT7RQP3NMLKJIHGFEDCBA@?>7<}:9876543210/.-,+*k('&%$$e\"c~}|uzsx[votsrkponQlkjihgfedcba`_^]\\UZ=XWVUTSRQPONMLKJIH+FEDCBA@?>~6}:3zx0543t10/.-,+*)('&%$$#\"!x}`{zyxwvutsrqponmlkNihgfedcbaCYB]V[ZY<WVUTSRQPONMLKJIHGFEDCBA@?>=<;:98765432+r/.-,+*)('&%$$#\"!~}`{zyxwZutsVqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLE.IHGFEDCBA@?>=<;:9z76543t1r/.-&+$$)j'~%$$#z!bw|{zyrwvuXsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONG0KJIHGFEDCBA@?>=<;|987654321q)p-&+l)('~%|#d!x}|{ty\\qvutslqpoRmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHA*EDCBA@?>=<;:98765v3210/.-,+k#j'~%$$#d!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=<;|9876543210/.-,+*)('&%$$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXW:U8SRQJOHM0KDIHG@E(=BA@?8=<;|9876543210/.-,+*)('&%$$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXWVUTS5K4OHMLK.IHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$$#z!b}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[>YXWVUTSRQPONM0E.IHGFEDCBA@?>=<;:9z76543t10/p-,+*)('&%$$#\"!bw`{zyxwvutsrqponmlkNihgfeHcFa`_X]V[>YRWVUNS6KPONMFKJI,GFEDCBA@?>=<;|3z76543210/.-,+*)('h%$$#\"!~}|{]s\\wputsVqponmlkjihgfeH]Fa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C<A@?\"=<;:987654321r/(-n+*)('&%$$#\"!~}|{zy\\wvutsVqpoRmlkjihgfedcbaD_X]@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|92765.3t+0/.-&+*)j'&%$$#\"!~}|{zy\\wpuXsrqponmlkjihgfedcFa`_^]\\[ZY;Q:UNSRQ4ONMLKJIHGFEDC&A:?\"=<;:9876543210/.-n+*)('&%$$#cyb}v{zy\\wvutsrqponmlkNihaJedcba`_^]\\[ZYXWVU8SRQPO2MLK.IHGFEDCBA@?>=~;:3z76543210/.-,+*)('h%$$#\"!b}`{zyrwpuXslqpohmPejihg`edcFa`_^]\\[ZYXWVU8SRK4ONMLKJIHGFEDCBA@?\"=<;:98765u-t1*/p-,+$$)\"'h%|#\"!x}`uzyxwputsVqponmlkjihgfeHcb[D_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?>=~;:9876543210/p-,+$$)j'&%$$#\"!~}|{zyxwvuXsrqpoRmlkNihgfedcba`_^]@[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=~;:92705v3,10/(-n%*)('~%$$#d!~}|{zyxwvutsVqpohmPkjihgfedcba`_^]\\[>YXWVUTSRQ3I2MFKJI,GFEDCBA@?>=<;|98705v3210/.-,+*)('&%$$#d!~}|{zyxwYoXslqpoRmlkjihgfedcbaD_^]\\U>YXWVUTSRQPONMLKJI,GFEDC&A@?\"=<;:987654321r/.-,%l)('&%$$#\"!~}|{zyxwZutsrqToRmlkdibgJe^cbaZ_BW\\[ZYRWVU8SRQPONMLKJIHG*EDCB;$$?>=<;:9876543210/p-,+*)('&%e{d!x}|{^yxwvutsrqponmPkjihaJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?>=<;:98765v3210/(-n+*)('&%$$#\"!~}|{zy\\wvutsVqpoRmlkjihgfedcbaD_^]\\[TY<WVUTSRQPONMLKJIHG*EDCBA$$?\"=<;4927x5.321*/p',+*)\"'&%f#\"!~}|{zyxwvuXsrqpohmPkjihgfedcba`_^]\\[>YXWVUTSRQ3I2MFKJI,GFEDCBA@?>=<;|98765.3t10/.-,+*)('&%$$#\"!b}|{zyxwvuWmVqjonmPkjihgfedcba`_B]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?\"=<;|9876543210/.-n+*)('&}f#\"!~}|{zyxwvutsrqTonmlkNiLgfe^c\\aD_X]\\[TY<QVUTSLQPO2MLKJIHGFEDCBA$$?>=<;:3z76543210/.-,+*)('h%$$#\"!~}|{]s\\wputsVqponmlkjihgfeHcba`_^W@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9z76543210/.-,+l)('&%$$#z!b}|{zyxwvutsrqponmPkjihgJedcFa`_^]\\[ZYXWVU8SRQPONMFK.IHGFEDCBA@?>=<;:9z76543t1r/.-&+$$)j'~%$$#z!bw|{zyrwvuXsrqponmlkjihgJedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9z76543210/.-,+l)('&%$$#z!b}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[>YXWVUTSRQPONM0KJIHGFED=&A@?>=<;:987654321r/.-,+l)('h%$$#\"!~}|{zyxwZutsrqpongPkjihgfedcba`_^]\\[>YXWVU8S6QPOHMFK.IBGFE>C&;@?>=6;:9z76543210/.-,+l)('&%$$#\"yb}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[>YXWVUTSRQPONM0KJIHGFED=&A@?>=<;:987654321r/.-,+*)('g}f#z!~}`{zyxwvutsrqpoRmlkjihgfe^cFa`_^]\\[ZYXWVUTSRQ4ONMLK.IHG*EDCBA@?>=<;:9z76543210/(-n+*)('&%$$#\"!~}|{zy\\wvutsVqTonmfkdiLgf_dc\\aD_X]\\[TY<QVUTSLQPO2MLKJIHGFEDCBA$$?>=<;:98705v3210/.-,+*)('&%$$#d!~}|{zyxwYoXslqpoRmlkjihgfedcbaD_^]\\[ZYXWPU8SRQPONMLKJIHGFEDC&A@?>=<;:9y1x5.321r/.-,+*)('&%$$#d!~}|{zyxwvoXsrqponmlkjihgfedcFa`_^]@[ZY<WVUTSRQPONMLK.IHGFEDCBA@9\"=<;:9876543210/.-n+*)('h%f#\"y~}v{^sxwvunsrqTonmlkjihgfedcFa`_^]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?>=<;{3z70543t10/.-,+*)('&%f#\"!~}|{zyxqZutsrqponmlkjihgfeHcba`_^]\\[=S<WPUTS6QPONMLKJIHGFE(CBA@?>=<;:927x543210/.-,+*)('&%f#\"!~}`{zy\\wvutsrqponmlkNihgfedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|98165.3t1*/.-&+l#('&%|#\"!b}|{zyxwvutsrqTonmlkjihgfe^cFa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C<A@?\"=<;:987654321r/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjihgfeG]FaZ_^]@[ZYXWVUTSRQPO2MLKJIHGFEDCBA@9\"=<;:9876543210/.-n+*)('h%$$#d!~}|{zyxwvutsVqponmlkjihgfed]Fa`_^]\\[ZYXWVUTSRQ4ONMLK.I,GFE>C<A$$?>7<;49z70543,1r).-,+$$)('h%$$#\"!~}|{zyxwZutsrqponmlkjihaJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?>=<;:98765v3210/.-,+*)('&}f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\a`_B]\\[ZYXWVUTSRQ4ONMLKJIHGFEDCBA@?8=~;:9876543210/.-,+l)('&%f#\"!b}|{zyxwvutsrqTonmlkjihgfedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFE(CBA$$?>=<;:9876543t10/.-,+*)('&%$$#\"!x}`{zyxwvutsrqponmlkNihgfedcbaCYB]V[>YXQVUNS6QJONMFK.CHGFE>'%;@?>!<;:9876543210q.-,+*)('&%$$#\"!~}|uz]xwvutsrqponmlkjihKfedcba`_^@V?ZSXWV9TSRQPONMLKJIH+FEDCBA@?>=<;:98765.u210/.-,+*)('&%$$#\"c~}|{z]xwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUN7RQPONMLKJIHGFEDCB%@?>=<}:{876/4-2s*/.-,%*)(i&%$$#\"!~}|{zyx[vutsrqponmlkjihgfe^Gba`_^]\\[ZYXWVUTSR5PONMLKJIH*@)D=B%:?>=<5:98y6543210/.-,+*k('&%$$#\"!~}|{zyxwvunWrqponmlkjihgfedcbE`_^]\\[ZYX:P9TMRQP3NMLKJIHGFEDCB%@?>=<;:9876543210/.',m*)('&%$$#\"!~}|{zyx[vutsrUponQlkjihgfedcba`C^]\\[ZYXWVUTSRQPONMLEJ-HGFEDCBA@?>=<;:98y65432s0q(-,+*#('&g$$#\"!~}|{zyxwvYtsrqponmlkjihgfedcb[`C^]\\[ZYXWVUTSRQPON1LKJIHGFED&<%@9>!6;:981654u210/.-,+*)('&g$$#\"!~}|{zyxwvutsrqpinQlkjihgfedcba`_^]\\?ZYXWVUTSR4J3NGLKJ-HGFEDCBA@?>=<}:9876543210/.-,+*)('~g$$#\"!~}|{zyxwvutsrUponmlOjihKfedcba`_^]\\[Z=XWVUTSRQPONMLKJIHGFE>'BA@?>=<;:98765432s0/.-,m*k('&}$${\"c~}v{zsxwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUTSL5PONMLKJIHGFEDCBA@#>=<;:9876v.u2+rp(-,+l)('&%$$#\"!~}|{^yxwvutsrqponmlkjihgf_Hcba`_^]\\[ZYXWVUTS6QPONMLKJI+A*E>CBA$$?>=<;:9876543t10/.-,+*)('&%$$#\"!~}|{ty\\wvutsrqponmlkjihgJedcbaD_^]@[ZYXWVUTSRQPO2MLKJIHGFEDCBA@?>=<;:927x543210/.-,+*)('&%f#\"!~}`{^yxwpunsVqjonmfkjiLgfedcba`_^]\\[>YXWVUTSRQPONMLKJIHGFE>C&A@?>=<;:987654321r/.-,+*)('g}f#z!b}|uzyr[YotsrUponmlkjihgfedGba`_^]\\[ZYXWVUTSRQPONGL/JIHGFEDCBA@?>=<;:{876543210p(o,%*)(i&%$$#\"!~}|{zyx[vutsrqponmlkjihgfedcbaZC^]\\[ZYXWVUTSRQPON1LKJIH+FED'BA@?>=<;:9876w43210/.-,+*)('&%$$#\"!~}v_zyxwvutsrqponmlkjMhgfedGbE`_^W\\UZYX;VUTSRQPONMLKJ-HGFEDCBA@?>=<;:9876543,s0/.-,+*)('&%$$#\"!~a|{zyxwvutVlUpiRPfkjiLgfedcba`_^]\\[>YXWVUTSRQPONMLKJIHGFED=&A@?>=<;:987654321r/.-,+*)('g}f#z!~}`{zyxwvutsrqpoRmlkjihgfedcba`_^]\\[ZYXWPU8SRQPONMLKJIHGFEDC&A@?>=~;:9z76543210/.-,+l)('&%$$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXW:UTS6QPONMLKJIHGFE(CBA@?>=<;:9876543210/.-&+l)('&%$$#\"!~}|{zyxwZutsrqponmOeNibgJedc\\aZCAW\\[Z=XWVUTSRQPONML/JIHGFEDCBA@?>=<;:987654-2s0/.-,+*)('&%$$#\"!~a|{zyxwvutVlUpinmlOjihgfedcba`_^A\\[ZYXWVUTSRQPONMLKJIHGFE>'BA@?>=<;:98765432s0/.-,m*)(i&%$$#\"!~}|{zyx[vutsrqponmlkjihgfedcba`_XA\\[ZYXWVUTSRQPONML/JIHGF)DCB%@?>=<;:987654u210/.-,+*)('&%$$#\"!~}|{zyr[vutsrqponmlkjihgfIdcba`_^]\\>T=XQV9TSLQPIN1LEJIHAF)>CBA@9\"~6;:9z76543210/.-,+l)('&%$$#\"!~}|{zyxwvutsrqpiRmlkjihgfedcba`_^]@[ZYXWVUTS5K4OHMLK.IHGFEDCBA@?>=~;:9876543210/.-,+*)('&%$$#z!b}|{zyxwvutsrqponmPkjihgJedcFa`_^]\\[ZYXWVU8SRQPONMLKJIHGFEDCBA@?>=<;49z76543210/.-,+*)('h%$$#\"!b}|{^yxwvutsrqponmPkjihgfedcba`_^]\\[ZYXWVUTSLQ4ONMLKJIHGFEDCBA@?\"=<;:98765u-t1*/.-n+*)('&%$$#\"!~}`{zyxwvutsrqponmlkjihgfedc\\aD_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?>=~;:9876543210/p-,+*)('&%$$#\"!~}|{zyxwvutsrkTonmlkjihgfedcba`_B]\\[ZY<WVU8SRQPONMLKJIHG*EDCBA@?>=<;:9876543210/.-,%l)('&%$$#\"!~}|{zyxwZutsrqToRmlkdibgfeHcba`_^]\\[ZYXW:UTSRQPONMLKJIHGFEDCBA@?>=<5|9876543210/.-,+*)j'&%$$#\"!~}_u^yrwZutmrqjoRmfkjibgJ_dcbaZCAW\\[Z=XWVUTSRQPONML/JIHGFEDCBA@?>=<;:987654321*q.-,+*)('&%$$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\?ZYXWVUTSRQPONMLKJIHGFEDCBA@9>!<;:9876543210/.-,m*)('&g$$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVOT7RQPONMLKJIHGFEDCB%@?>=<}:{876/4-2s*/.-,%*)(i&%$$#\"!~}|{zyx[vutsrqponmlkjihgfedcba`_^]\\UZ=XWVUTSRQPONMLKJIH+FEDCBA@?>~6}:38y654-2+0q(-,+*#('&g$$#\"!~}|{zyxwvYtsrqponmlkjihgfedcba`_^]\\[ZSX;VUTSRQPONMLKJIHGF)DCBA@?>=<|4{81654u210/.-,+*)('&g$$#\"!~}|{zyxwvutsrqponmlkjihg`Idcba`_^]\\[ZYXWVUT7RQPON1LKJ-HGFEDCBA@?>=<}:9876543210/.-,+*)('&%$$#\"!~}v_zyxwvutsrqponmlkjMhgfedGbE`_X]\\UZ=RWVUTMRQP3NMLKJIHGFEDCB%@?>=<;:9876543210/.-,+*)('&%|e\"!~}|{zyxwvutsrqpSnmlkjihgfH^Gb[`_^A\\[ZYXWVUTSRQP3NMLKJIHGFEDCBA@?>=<;:9876543,s0/.-,+*)('&%$$#\"!~a|{zyxwvutVlUpinmlOjihgfedcba`_^A\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@9>!<;:9876543210/.-,m*)('&g$$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTMR5PONMLKJIHGFEDCBA@#>=<;:{8y654-2+0q.-&+*#(i~%$$#\"y~}|_zyxwvutsrqponQlkjihgfedcba`_^]\\[ZYXWVUTSRQPIN1LKJIHGFEDCBA@?>=<}:98765432r*q.',m*)\"'&}$$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTMR5PONMLKJIHGFEDCBA@#>=<;:9876v.u2+0/.o,+*)('&%$$#\"!~a|{zyxwvutsrqponmlkjihgfedcba`_XA\\[ZYXWVUTSRQPONML/JIHGF)DCB%@?>=<;:987654u210/.-,+*)('&%$$#\"!~}|{zyxwvutslUponmlkjihgfedcba`C^]\\[Z=X;VUTMRKP3NMFKJCH+F?DCB;@?>!<;:9876543210q.-,+*)('&%$$#\"!~}|{zyxwvutsrqpohQlkjihgfedcba`_^]\\?ZYXWVUTSR4J3NG0.DIHG*EDCBA@?>=<;:9z76543210/.-,+*)('&%$$#\"!~}|{zyxqZutsrqponmlkjihgfeHcba`_^]\\[=S<WPUTS6QPONMLKJIHGFE(CBA@?>=<;:9876543210/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjiLgfeHcba`_^]\\[ZYXW:UTSRQPONMLKJIHGFEDCBA@?>=<;:98705v3210/.-,+*)('&%$$#d!~}|{^y\\wvotslqTinmlkdihgJedcba`_^]\\[ZY<WVUTSRQPONMLKJIHGFEDCBA@?>=<;:927x543210/.-,+*)('&%f#\"!~}|{zy[qZunsrqTonmlkjihgfedcFa`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDC<A$$?>=<;:9876543210/p-,+*)('&%e{d!x}|{^yxwvutsrqponmPkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLE.IHGFEDCBA@?>=<;:9z76543t10/p-,+*)('&%$$#\"!b}|{zyxwvutsrqponmlkjihgfedcba`_^W@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|98165.3t+0/.-&+*)j'&%$$#\"!~}|{zy\\wvutsrqponmlkjihgfedcba`_^]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?>=<;{3z705v32+0/(-,+l)('&%$$#\"!~}|{^yxwvutsrqponmlkjihgfedcba`_^]\\[ZS<WVUTSRQPONMLKJIHG*EDCBA@?>=}5|92765v3210/.-,+*)('h%$$#\"!~}|{zyxwvutsrqponmlkjihgfedc\\aD_^]\\[ZYXWVUTSRQPO2MLKJI,GFE(CBA@?>=<;:987x543210/.-,+*)('&%$$#\"!~}|{zyxwvutslqTonmlkjihgfedcba`_B]\\[ZY<WVU8SRQPONMLKJIHG*EDCBA@?>=<;:9876543210/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjihgfeG]FaZ_B]\\UZYRW:OTSRQJ31GLKJ-HGFEDCBA@?>=<}:9876543210/.-,+*)('&%$$#\"!~}|{zyxqvYtsrqponmlkjihgfedGba`_^]\\[Z<R;VOTSR5PONMLKJIHGFED'BA@?>=<;:9876543210/.-,+*)('&%$$#\"!xa|{zyxwvutsrqponmlOjihgfIdcbE`_^]\\[ZYXWVUT7RQPONMLKJIHGFEDCBA@?>=<;:987654321*q.-,+*)('&%$$#\"!~}|_zyxwvYtWrqjonglOdihgf_dcbE`_^]\\[ZYXWVUT7RQPONMLKJIHGFEDCBA@?>=<;:987654321*q.-,+*)('&%$$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\?ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:92y6543210/.-,+*)('&g$$#\"!~}|{z\\r[votsrUponmlkjihgfedGba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@9>!<;:9876543210/.-,m*)('&g$$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONGL/JIHGFEDCBA@?>=<;:{87654u2s0/.',%*k('~%$${\"cx}|{zsxwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFED=B%@?>=<;:9876543210q.-,+*)('&f|e\"y~a|{tyxqvutWrqponmlkjihgfIdcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCB;@#>=<;:9876543210/.o,+*)('&%$$dzc~w|{z]xwvutsrqponmlOjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHG@)DCBA@?>=<;:987654u210/.o,+*k('&%$$#\"!~}|{z]xwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUN7RQPONMLKJIHGFEDCB%@?>=<}:98y6543210/.-,+*k('&%$$#\"!~}|{zyxwvutsrqponmlkjihgfedc\\E`_^]\\[ZYXWVUTSRQP3NMLKJIHGF(>'B;@#>=<5:38y6/432+0q(-,+*#jh~%$$#d!~}|{zyxwvutsVqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONG0KJIHGFEDCBA@?>=<;|98765v3210/.-,+*)('&%$$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311LKJIHGFED'%%@?>=<;:98yww43210/.-,mkk('&%$$#\"!~a__zyxwvutsrUSSnPlkjiLaJedcba`CXA\\>ZS<QV97ML53O20FE.,,**((&&$$$$\">=~5|9y70w.32s*q.n,+*)('h}f#\"!~}|{z]r[vXtmVkpSQgfOMiLJ`_HFbECYXA??==;;99775Q42HG0.JIHG*?(C%A:#8=~|43zx6wu-,sqqoommkkiig%fdzyb`|{zy\\qZutsrqponmlO*ihgfedcba`_^]\\[ZYXWVUTS6QPONML/--gGFEDCBA@#!!<;:987654uss0/.-,+*)(igg$$#\"!~}|{z][[vutsrqponQOOjihgfedcbECC^]\\[ZYXWV977RQPONMLKJ-++FEDCBA@?>!}}:98765432sqq.n,+*)j!h%$$#\"!~av_z\\xqZotWUkjSQQOkNLbaJHHFbECYXA??==;;997SR5J3N0LE.CH+)?>'%%##!!}}{98y0w4t210/.-n%l)('&%$$#\"cxa|^zs\\qvYWmlUSoRPfeNLLJJHdGE[ZCA]@>TS<::88664P31GF/-IHGF)>'B$$@9\"7<}{32ywwuussqqo-nl$$#jhhffddb~a_ut][wvutWlUponmlkjihgJ%dcba`_^]\\[ZY<WVUTSR533mMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311LKJIHGFED'%%@?>=<;:98yww4t210/p'n+*)('&g|e\"b~w`uz][qpYWsVTjiRPPNNLLJJHdcF[D_A]V?TY<:PO86R53IH1//--++))'CB%:#>~<;:987x/v3210/.-,m$$k(h&}f{\"cawv_]y\\ZpoXVrUSihQOkNLbaJHHFFD`CAWV?==;;9U86LK42NMLK.C,G)E>'<A$$\"87~||zzx6wu-,sqqoom+lj\"!hf$$#\"!bw`{zyxwvutsrU0onmlkjihgfedcba`_B]\\[ZYX;99srRQP3NMLKJIHG*((CBA@?>=<;|zz76543210/pnn+*)('&%$$#dbb}|{zyxwvuXVVqponmlkjiLJJedcba`_^]@>>YXWVUTSRQ422MLKJIHGFE(&&A@?>=<;:9zxx5u3210q(o,+*)('h}f#c!xav{^\\rqZXXVrUSihQOkNLbaJHHFFDDBB@\\[>S<W9UN7LQ42HG0..,H+)?>'%A$$\"87~||zzxxvvt21r)p-m+*)('&g|e\"!~}|{zy\\qZuWslUjoRPfeNLhKI_^GEaDBXW@>Z=;QP97S64JI20L/-CB+))''%A$$\"87~|:987x/v3s1*q(-nl$$#jhhf$$ecyxa_{^\\rqZXXVVTpSQgfOMihgfI^Gba`_^]\\[ZY<uVUTSRQPONMLKJIHGFED'BA@?>=~||X87654321rpp-,+*)('&%fdd!~}|{zyxwZXXsrqponmlkNLLgfedcba`_B@@[ZYXWVUTS644ONMLKJIHG*((CBA@?>=<;|zz76543210/pnn+*)('&%$$#dbb}_{zyx[pYtsrqpoRgPkMibK`eHF\\[DB^A?UT=;W:8NM64P31GF/--++))''%%#?>!6}:z81x/4us+*qo-nl$$#jhhffddbb``^zy\\qZuWsrqponQfOjihgfedcF[D_A]V?TY<:PO8664P31GF/-I,*@?(&&$$@#!76}{{yyw5vt,+rp.-,+l#j'g%|ez!b`vu^\\\\ZvYWmlUSoRPfeNLLJJHHFFD`CAWV?=YXWV9N7RQPONMLKJI,eFEDCBA@?>=<}:98765vttP0/.-,+*)jhh%$$#\"!~}|{^\\\\wvutsrqpoRPPkjihgfedcFDD_^]\\[ZYXW:88SRQPONMLK.,,GFEDCBA@?\"~~;:9876543trr/.-,+*)('hff#\"!~}|{zy\\ZZuWsrqpShQlkjihgJ_HcEaZCX]@>TS<:V97ML5331M0.DC,**((&&$$$$\"\"~<;|3z7w5.u,1rp('nllj(ig}|eccaa__]][[YutWlUpRnmlkjiLaJedcba`_^AV?Z<XQ:OT75KJ311//--+G*(>=&$$@#!76}{{yyw5vt,+rp.-,+l#j'g%|ez!b`vu^\\xwvuXmVqponmlkjihK&edcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:987x543210qooK+*)('&%$$ecc~}|{zyxwvYWWrqponmlkjMKKfedcba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$$#\"caa|{zyxwvutWUUpRnmlkNcLgfedcbEZC^@\\U>SX;9ON7553O20FE.,H+)?>'%A$$\"87~||zzxxvvt21r)p-m+$$k\"'hf|{db~a_ut][wZXnmVTTRRPPNNLhgJ_HcEa`_^]\\?T=XWVUTSRQ4I2M/KD-BG*(>=&$$@#!76}{9zx0/vt2sq)(om+lj\"!hffddb~a_ut][[YuXVlkTRnmlkNcLgIe^G\\aDBXW@>><X;9ON755331M0.DC,**(D'%;:#!=<;:{2y6543210/.-nI*k('&%$$#dbb>|{zyxwvuXVVqponmlkjiLJJedcba`_^]@>>YXWVUTSRQ422MLKJIHGFE(&&A@?>=<;:9zxx543210/.-nll)('&%$$#\"!b``{zyxwvutsVTTonmlkjihgJHHcEa`_^AV?ZYXWVU8M6Q3OH1FK.,BA*((&B%#98!};|z21xvvttrrppn,+l#j'g%|ez!b`vu^\\\\ZvYWmlUSoRPfeNLLJJHHFFD`_BW@[=YXWVUT7L5PONMLKJI,A*E'C<%:?\"~65|zzx6wu-,sqqo-nl$$#jhhf$$ecyxa_{zyx[pYtVrkTinQOedMKKIeHF\\[DB^]\\[>S<WVUTSRQPON1jKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$$#\"!~}|_zyxwvuXVV2ponmlkjiLJJedcba`_^]@>>YXWVUTSRQ422MLKJIHGFE(&&A@?>=<;:9zxx543210/.-nll)('&%$$#\"!b``{zyxwvutsVTTonmlkjihgJHHcba`_^]\\[><<W9UTSR5J3NMLKJI,A*E'C<%:?\"~65|zzx6wu-,sq/pn&%ljjhhffddb~}`u^y[wpYnsVTjiRPlOMcbKIIGGEECCA]\\?T=X:VUTSRQ4I2MLKJIHGF)>'B$$@9\"7<}{32yw5vt,+rppn,mk#\"igge#dbxw`^z][qpYWWUqTRhgPNjihgJ_HcEaZCX]@>TS<:V97ML5331M0.DC,*FEDC&;$$?>=<;:9876wR3210/.-,+*)('&%$$#\"!~}`{zyxwvYWW3qponmlkjMKKfedcba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==X:VUTS6K4ONMLKJ-B+F(D=&;@#!76}{9zx0/vttrrppnnl*)j!h%e#zcx}`^ts\\ZvYWmlUSSQQOOMMKgfI^GbD`_^]\\[>S<WVUTSRQP3H1L.JC,AF)'=<%#?\"~65|z8yw/.us1rp('nllj(ig}|ec!b`vu^\\x[YonWUUSoRPfeNLhgfeH]FaC_XAV[><RQ:8866442N1/ED-+G*(>=&$$$$\">!}54{y7654u,s0/.-,+*)('hC$$e\"!~}|{^\\\\8vutsrqpoRPPkjihgfedcFDD_^]\\[ZYXW:88SRQPONMLK.,,GFEDCBA@?\"~~;:9876543trr/.-,+*)('hff#\"!~}|{zy\\ZZutsrqponmPNNihgfedcbaDBB]?[ZYX;P9TSRQPO2G0K-IB+@E(&<;$$\"\"~<}{32ywwu3tr*)pnnlljjhhf$$#dyb}_{t]rwZXnmVTTRRPPNjMKa`IGGEECCAA?[Z=R;V8TSRQPO2G0KJIHGFED'<%@\">7~5:{y10wu3tr*)pn,mk#\"igge#dbxw`^z][qpYWWUqTRhgPNjihgJ_HcEaZCX]@>TS<::8866442N1/ED-++)E(&<;$$\">=<;|3z76543210/.oJ+*)('&%$$#\"!~}|{zyxwvutsrqponmPkjihgfIGG#a`_^]\\[Z=;;VUTSRQPON1//JIHGFEDCB%##>=<;:9876wuu210/.-,+*kii&%$$#\"!~}|_]]xwvutsrqpSQQlkjihgfedGEE`_^]\\[ZYX;99TSRQPONML/--H*FEDC&;$$?>=<;:{2y6v4-t+0qo'&mkki'hf|{dbb``^^\\\\ZZXtsVkToQmfOdiLJ`_HFFDDBB@@>><XW:O8S5QPONML/D-HGFEDCBA$$9\"=};4{27xv.-trrp.om%$$ki'hf|{db~a_ut][wZXnmVTpSQgfOMMKgJH^]FD`_^]@U>Y;WP9NS64JI200.J-+A@)'C&$$:9\"~~||z8yw/.ussq/pn&%lj('&%f{d!~}|{zyxwvY4srqTonmlkjMKK'edcba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311L.JIHG*?(CBA@?>!6}:z81x/4us+*qoom+lj\"!hffddbb``^^\\\\ZvuXmVqSohQfkNLbaJHHFbECYXA??==;;9977553ON1F/J,HGFEDC&;$$?>=<;:98y0w4t2+r).om%$$kiiggeec!b`vu^\\\\ZvYWmlUSSQmPNdcLJfedcF[D_A]V?TY<:PO86644220L/-CB+))''%%#?\"~65|z8765v-t10/.-,+*)(iD%$$#\"!~}|{zyxwvutsrqpoRmlkjihKII%pba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:987654RQ"
  },
  {
    "id": "603",
    "title": "Mariolang",
    "description": "MarioLANG is a two-dimensional esoteric programming language made by User:Wh1teWolf, based on Super Mario. The source code's layout is similar to a Super Mario world, however the programs written in MarioLANG look like a completely normal application when compiled. It is even Turing-complete! This language was inspired by RubE On Conveyor Belts.",
    "url": "https://esolangs.org/wiki/MarioLANG",
    "language_short": "",
    "code": "+>+>)+)+)+++)++++((((-[!)>->.\r\n+\"+\"===================#+\".\")\r\n+++!((+++++++++)++++++)<.---+\r\n++=#===================\")---.\r\n++((.-(.)).+++..+++++++.<---\r\n  !+======================---\r\n=#>++++++++++++++.).+++.-!>!\r\n  =======================#=#"
  },
  {
    "id": "604",
    "title": "Markdown",
    "description": "Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.",
    "url": "https://en.wikipedia.org/wiki/Markdown",
    "language_short": "markdown",
    "code": "Hello, World!"
  },
  {
    "id": "605",
    "title": "Mathematica",
    "description": "Mathematica is a powerful technical programming language developed by Wolfram Research. It encompases computer algebra, numerical computation, visualization and statistics capabilities.",
    "url": "https://en.wikibooks.org/wiki/Mathematica",
    "language_short": "mathematica",
    "code": "Print[\"Hello world\"]"
  },
  {
    "id": "606",
    "title": "Mathematica Online",
    "description": "",
    "url": "",
    "language_short": "mathematica",
    "code": "Notebook[{Cell[\r\nBoxData[RowBox[{\"Print\",\"[\",\"\\\"Hello World\\\"\",\"]\"}]],\"Input\",CellID->1]},\r\nStyleDefinitions->\"Default.nb\",FrontEndVersion->\"10.0 for Wolfram Cloud Platform (June 2 2014)\"]"
  },
  {
    "id": "607",
    "title": "MATL",
    "description": "MATL /'mæt.ˌl/ is a programming language based on MATLAB/Octave and suitable for code golf.",
    "url": "https://esolangs.org/wiki/MATL",
    "language_short": "plaintext",
    "code": "'Hello, World!'"
  },
  {
    "id": "608",
    "title": "Matlab",
    "description": "MATLAB (an abbreviation of \"matrix laboratory\") is a proprietary multi-paradigm programming language and numeric computing environment developed by MathWorks. MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages.",
    "url": "https://en.wikipedia.org/wiki/MATLAB",
    "language_short": "matlab",
    "code": "disp('hello world')"
  },
  {
    "id": "609",
    "title": "MATLAB 1.0",
    "description": "MATLAB (an abbreviation of \"matrix laboratory\") is a proprietary multi-paradigm programming language and numeric computing environment developed by MathWorks. MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages.",
    "url": "https://en.wikipedia.org/wiki/MATLAB",
    "language_short": "matlab",
    "code": "fprintf('Hello World\\n')"
  },
  {
    "id": "610",
    "title": "MaxScript",
    "description": "MAXScript is a built-in scripting language, and is used for a myriad of functions in 3D Studio Max. Plugin modules can be created entirely in MAXScript.",
    "url": "https://rosettacode.org/wiki/Category:MAXScript",
    "language_short": "plaintext",
    "code": "print \"Hello, world!\"\r\n-- \"Hello, world!\"\r\n \r\n \r\n-- Note that MAXScript is expression-based, so simply writing \"Hello, world!\" is\r\n-- sufficient to echo it for the reader. Like Haskell, all MAXScript expressions\r\n-- *must* return values, even if they're unused."
  },
  {
    "id": "611",
    "title": "Maze",
    "description": "Maze is a programming language based on variables that move over instructions. Each Variable is called a Car. Their passage is guided by walls and other controls.",
    "url": "https://esolangs.org/wiki/Maze",
    "language_short": "brainfuck",
    "code": "##,##,##\r\n##,^^,## //Car Starts\r\n##,AA,## //Do AA to Car\r\n##,>>,## //Print Car\r\n##,(),## //Destroy Car\r\n##,##,##\r\n \r\nAA-> =\"Hello World!\""
  },
  {
    "id": "612",
    "title": "MEL (Maya Embedded Language)",
    "description": "The Maya Embedded Language (MEL) is a scripting language used to simplify tasks in Autodesk's 3D Graphics Software Maya. Most tasks that can be achieved through Maya's GUI can be achieved with MEL, as well as certain tasks that are not available from the GUI. MEL offers a method of speeding up complicated or repetitive tasks, as well as allowing users to redistribute a specific set of commands to others that may find it useful.",
    "url": "https://en.wikipedia.org/wiki/Maya_Embedded_Language",
    "language_short": "mel",
    "code": "proc helloWorld () {\r\n    print \"Hello World\\n\";\r\n}\r\nhelloWorld;"
  },
  {
    "id": "613",
    "title": "MemeAssembly",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "I like to have fun, fun, fun, fun, fun, fun, fun, fun, fun, fun main\r\n    what can I say except H\r\n    what can I say except e\r\n    what can I say except l\r\n    what can I say except l\r\n    what can I say except o\r\n    what can I say except \\s\r\n    what can I say except W\r\n    what can I say except o\r\n    what can I say except r\r\n    what can I say except l\r\n    what can I say except d\r\n    what can I say except \\n\r\n\r\n    I see this as an absolute win"
  },
  {
    "id": "614",
    "title": "Meq",
    "description": "Meq was created by Richard Sparrow (User:TheMeq) in April 2015.",
    "url": "https://esolangs.org/wiki/Meq",
    "language_short": "brainfuck",
    "code": ".==++>:+>+[>:++++++++]>:=+>===++>.===+++++++>:=+>:=++++>:++++++++>:rp>p>>p>p>p>p>p>p>p>p>p!"
  },
  {
    "id": "615",
    "title": "Mercury",
    "description": "Mercury is a functional logic programming language made for real-world uses. The first version was developed at the University of Melbourne, Computer Science department, by Fergus Henderson, Thomas Conway, and Zoltan Somogyi, under Somogyi's supervision, and released on April 8, 1995.",
    "url": "https://en.wikipedia.org/wiki/Mercury_(programming_language)",
    "language_short": "mercury",
    "code": ":- interface.\r\n:- import_module io.\r\n:- pred main(io::di, io::uo) is det.\r\n \r\n:- implementation.\r\nmain(!IO) :-\r\n    io.write_string(\"Hello, World!\\n\", !IO)."
  },
  {
    "id": "616",
    "title": "Migol 11",
    "description": "Migol 11 is an imperative assembly-like programming designed by User:MigoMipo. It is almost backwards-compatible with Migol 09, but adds an advanced asynchronous I/O system with interrupts.",
    "url": "https://esolangs.org/wiki/Migol_11",
    "language_short": "brainfuck",
    "code": "'H>,'e>,'l>,'l>,'o>,',>,' >,'w>,'o>,'r>,'l>,'d>,'!>,10>"
  },
  {
    "id": "617",
    "title": "MilkScript",
    "description": "Milk is a programming language \"that lets application developers manage memory more efficiently in programs that deal with scattered data points in large data sets.\"",
    "url": "https://en.wikipedia.org/wiki/Milk_(programming_language)",
    "language_short": "",
    "code": "#import \"basic\"\r\nprint(\"Hello World\")"
  },
  {
    "id": "618",
    "title": "Minecraft",
    "description": "",
    "url": "",
    "language_short": "bash",
    "code": "/tellraw @p [\"\",{\"text\":\"Hello World\"}]"
  },
  {
    "id": "619",
    "title": "Mineso",
    "description": "Mineso is a turing-complete[citation needed] I can convert some BF to Mineso, but I don't know enough BF to convert anything programming language made by User:DeadlyFugu. It uses tape memory, which starts at position 0 and, if on a Turing machine, could go on for infinity. However, it'd be impracticle since Mineso uses unary, with the only number it has being '1'. Every operation in Mineso requires a number after it, having no 1's after it would be treated as a zero.",
    "url": "https://esolangs.org/wiki/Mineso",
    "language_short": "brainfuck",
    "code": "-1 <111111111111111111111111111111111111111111111111111111111111111111111111 >111111\r\n<11111111111111111111111111111 >111111 <1111111 >111111 >111111 <111 >111111\r\n=11111111111111111111111111111111 >111111\r\n<1111111111111111111111111111111111111111111111111111111 >111111 <111111111111111111111111\r\n>111111 <111 >111111 >11 -11 <111111 >111111 <11111111 >111111\r\n=111111111111111111111111111111111 >111111"
  },
  {
    "id": "620",
    "title": "Mips",
    "description": "The mIRC scripting language (often unofficially abbreviated to \"mSL\") is the scripting language embedded in mIRC, an IRC client for Windows.",
    "url": "https://en.wikipedia.org/wiki/MIRC_scripting_language",
    "language_short": "mipsasm",
    "code": ".data\r\nhello_world: .asciiz \"Hello World!\"\r\n \r\n.text\r\nmain:\r\n    li $$v0, 4            # Load syscommand print_string\r\n    la $$a0, hello_world  # Load hello_world string into register $$a0\r\n    syscall              # Print the string\r\n    jr $$ra               # Return"
  },
  {
    "id": "621",
    "title": "Miranda",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "main :: [sys_message]\r\nmain = [Stdout \"Hello World\"]"
  },
  {
    "id": "622",
    "title": "Mirc",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "echo -a Hello World!"
  },
  {
    "id": "623",
    "title": "Mmmm()",
    "description": "Mmmm() is an esoteric \"microlanguage\" by SuperJedi224, inspired in part by Brainf***.\r\n<br>The only characters the interpreter actually pays any attention to are M, m, <, >, (, ), ,, =, [, ., and ].",
    "url": "https://esolangs.org/wiki/Mmmm()",
    "language_short": "brainfuck",
    "code": "Mmm=m[m.m()].m(m.m());\r\nMmmm=m[mm].m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();Mmmmm=mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();m[mmmm].m(mmm.m());\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();Mmmmmm=mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nMmmmmmmmm=mmm.m();\r\nm[mmmm].m(mmm.m());\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();Mmmmmmm=mmm.m();\r\nm[mmmm].m(mmmmmm);m[mmmm].m(mmmmmm);\r\nmmm.m();mmm.m();\r\nMmmmmmmm=mmm.m();\r\nm[mmmm].m(mmmmmmm);\r\nmmm.m();mmm.m();\r\nMmmmmmmmmm=mmm.m();\r\nMmmm=m[mm].m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();\r\nMmmmmmmmmmm=mmm.m();\r\nMmmmmmmmmmmm=mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();mmm.m();mmm.m();\r\nmmm.m();mmm.m();\r\nm[mmmm].m(mmm.m());\r\nm[mmmm].m(mmmmmmmmmm);\r\nm[mmmm].m(mmmmm);\r\nm[mmmm].m(mmmmmmm);\r\nm[mmmm].m(mmmmmmmmm);\r\nm[mmmm].m(mmmmmm);\r\nm[mmmm].m(mmmmmmmm);\r\nm[mmmm].m(mmmmmmmmmmm);"
  },
  {
    "id": "624",
    "title": "ModiScript (Modi script)",
    "description": "Modi (Marathi: मोडी, 𑘦𑘻𑘚𑘲‎ Mōḍī, Marathi pronunciation: [moːɖiː]; also Mudiya) is a script used to write the Marathi language, which is the primary language spoken in the state of Maharashtra, India. There are multiple theories concerning its origin. The Modi script was used alongside the Devanagari script to write Marathi until the 20th century when the Balbodh style of the Devanagari script was promoted as the standard writing system for Marathi.",
    "url": "https://en.wikipedia.org/wiki/Modi_script",
    "language_short": "plaintext",
    "code": "mitroon\r\nbhaiyo aur behno \"ek nambar do"
  },
  {
    "id": "625",
    "title": "Modula 2",
    "description": "Modula-2 is a structured, procedural programming language developed between 1977 and 1985 by Niklaus Wirth at ETH Zurich. It was created as the language for the operating system and application software of the Lilith personal workstation. It was later used for programming outside the context of the Lilith.",
    "url": "https://en.wikipedia.org/wiki/Modula-2",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\n \r\nFROM Terminal2 IMPORT WriteString, WriteLn;\r\n \r\nBEGIN\r\n \r\n    WriteString(\"Hello World\");\r\n    WriteLn;\r\n    \r\nEND HelloWorld."
  },
  {
    "id": "626",
    "title": "Modula 3",
    "description": "Modula-3 is a programming language conceived as a successor to an upgraded version of Modula-2 known as Modula-2+. While it has been influential in research circles (influencing the designs of languages such as Java, C#, and Python) it has not been adopted widely in industry. It was designed by Luca Cardelli, James Donahue, Lucille Glassman, Mick Jordan (before at the Olivetti Software Technology Laboratory), Bill Kalsow and Greg Nelson at the Digital Equipment Corporation (DEC) Systems Research Center (SRC) and the Olivetti Research Center (ORC) in the late 1980s.",
    "url": "https://en.wikipedia.org/wiki/Modula-3",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\nIMPORT Io;\r\nBEGIN\r\n    IO.Put (\"Hello World\\n\")\r\nEND HelloWorld."
  },
  {
    "id": "627",
    "title": "Modulous",
    "description": "Modulous is a 1D stack based esoteric programming language that is somewhat inspired by the assembly language. Made by Abyxlrz",
    "url": "https://esolangs.org/wiki/Modulous",
    "language_short": "",
    "code": "[PSH STR “Hello, World!”][PRT STR][JMP B 1 IF NOT 0]"
  },
  {
    "id": "628",
    "title": "Mongo",
    "description": "",
    "url": "",
    "language_short": "php",
    "code": "print(\"Hello World!\")"
  },
  {
    "id": "629",
    "title": "Monkeys (Monkey)",
    "description": "Monkeys is an Esoteric programming language by David Catt (user:david.werecat) which is based entirely on the interaction of monkeys.",
    "url": "https://esolangs.org/wiki/Monkeys",
    "language_short": "monkey",
    "code": "1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 LEFT\r\n1 LEFT\r\n2 LEFT\r\n2 UP\r\n2 RIGHT\r\n2 LEFT\r\n2 DOWN\r\n2 UP\r\n2 RIGHT\r\n2 LEFT\r\n2 DOWN\r\n2 RIGHT\r\n2 BOND\r\n1 YELL\r\n1 LEFT\r\n1 LEFT\r\n1 UP\r\n1 UP\r\n1 LEFT\r\n1 LEFT\r\n1 UP\r\n1 UP\r\n1 LEFT\r\n1 DOWN\r\n1 DOWN\r\n1 LEFT\r\n1 UP\r\n1 UP\r\n1 LEFT\r\n1 DOWN\r\n1 DOWN\r\n1 RIGHT\r\n1 DOWN\r\n1 LEFT\r\n1 TEACH\r\n1 DOWN\r\n1 RIGHT\r\n1 UP\r\n1 UP\r\n1 UP\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 DOWN\r\n1 DOWN\r\n1 UP\r\n1 RIGHT\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 TEACH\r\n4 YELL\r\n1 RIGHT\r\n1 RIGHT\r\n1 DOWN\r\n1 DOWN\r\n1 DOWN\r\n1 LEFT\r\n1 YELL\r\n1 YELL\r\n1 LEFT\r\n1 LEFT\r\n1 LEFT\r\n2 LEFT\r\n2 DOWN\r\n2 RIGHT\r\n2 UP\r\n2 UP\r\n2 LEFT\r\n2 LEFT\r\n2 LEFT\r\n2 DOWN\r\n2 DOWN\r\n2 DOWN\r\n2 RIGHT\r\n2 RIGHT\r\n2 RIGHT\r\n2 RIGHT\r\n2 UP \r\n2 UP\r\n2 UP\r\n2 LEFT\r\n2 LEFT\r\n2 DOWN\r\n2 RIGHT\r\n2 YELL\r\n3 YELL\r\n1 YELL\r\n1 RIGHT\r\n1 RIGHT\r\n1 RIGHT\r\n1 YELL\r\n4 DOWN\r\n4 TEACH\r\n4 DOWN\r\n4 DOWN\r\n4 DOWN\r\n4 DOWN\r\n4 DOWN\r\n2 RIGHT\r\n6 LEFT\r\n6 DOWN\r\n6 RIGHT\r\n6 UP\r\n6 UP\r\n6 LEFT\r\n6 DOWN\r\n6 RIGHT\r\n6 YELL\r\n4 YELL\r\n2 YELL"
  },
  {
    "id": "630",
    "title": "Monte",
    "description": "Monte is a programming language inspired by the E and Python programming languages.",
    "url": "https://monte.readthedocs.io/en/latest/",
    "language_short": "",
    "code": "traceln(\"Hello World\")"
  },
  {
    "id": "631",
    "title": "Moo",
    "description": "A MOO (MUD, object-oriented) is a text-based online virtual reality system to which multiple users (players) are connected at the same time.",
    "url": "https://en.wikipedia.org/wiki/MOO",
    "language_short": "",
    "code": "@program hello:run\r\nplayer:tell(\"Hello World\");\r\n."
  },
  {
    "id": "632",
    "title": "MoonScript",
    "description": "",
    "url": "",
    "language_short": "moonscript",
    "code": "print 'hello world'"
  },
  {
    "id": "633",
    "title": "MorseCode (Morse Code)",
    "description": "Morse code is a method used in telecommunication to encode text characters as standardized sequences of two different signal durations, called dots and dashes (or dits and dahs). Morse code is named after Samuel Morse, an inventor of the telegraph.",
    "url": "https://en.wikipedia.org/wiki/Morse_code",
    "language_short": "brainfuck",
    "code": ".... . .-.. .-.. ---   .-- --- .-. .-.. -.."
  },
  {
    "id": "634",
    "title": "Mouse",
    "description": "The Mouse programming language is a small computer programming language developed by Dr. Peter Grogono in the late 1970s and early 1980s. It was developed as an extension of an earlier language called MUSYS, which was used to control digital and analog devices in an electronic music studio.",
    "url": "https://en.wikipedia.org/wiki/Mouse_(programming_language)",
    "language_short": "bash",
    "code": "\"Hello, World\"\r\n'! !'\r\n$$"
  },
  {
    "id": "635",
    "title": "Move",
    "description": "Move is a programming language based on Rust that was created by Facebook for developing customizable transaction logic and smart contracts for the Libra digital currency. Every transaction submitted to the Libra blockchain uses a transaction script written in Move to encode its logic.",
    "url": "https://golden.com/wiki/Move_(programming_language)-MNA4DZ6",
    "language_short": "javascript",
    "code": "alert 'Hello World'"
  },
  {
    "id": "636",
    "title": "Mozart",
    "description": "The Mozart Programming System combines ongoing research in programming language design and implementation, constraint logic programming, distributed computing, and human-computer interfaces. Mozart implements the Oz language and provides both expressive power and advanced functionality.",
    "url": "http://mozart2.org/",
    "language_short": "c-like",
    "code": "functor\r\nimport\r\n    Application\r\n    System\r\ndefine\r\n    {System.showInfo 'Hello World!'}\r\n    {Application.exit 0} \r\nend"
  },
  {
    "id": "637",
    "title": "MSG",
    "description": "MSG is an esoteric programming language/virtual machine by User:Twistle. It depends entirely on three things: messages, objects, and wires.",
    "url": "https://esolangs.org/wiki/MSG",
    "language_short": "c-like",
    "code": "main 'passon stdout 'Hello, world!' '"
  },
  {
    "id": "638",
    "title": "MSM (Multi-Set Manipulator)",
    "description": "Multi-Set Manipulator is a set-based programming language invented by User:A inspired by Mathematical Notation. It is not concise at all if it is compared to APL.",
    "url": "https://esolangs.org/wiki/Multi-Set_Manipulator",
    "language_short": "",
    "code": "  _0_1_2_3_4_5_6_7_8_9_A_B_C_D_E_F\r\n0_ ∩ ∪ « Δ \\ \" ← = ¶ ∈ ∉ ⊂ ⊆ ∅ Z P\r\n1_ A I U E ∴"
  },
  {
    "id": "639",
    "title": "MSM (Mutating Stack Machine)",
    "description": "MSM (Mutating Stack Machine) is a minimalist self-modifying, stack-based esoteric programming language. It was designed with the goal to create the smallest usable stack machine implementation ever possible in JavaScript. The working MSM implementation was created by User:Plugnburn on August 4, 2013.",
    "url": "https://esolangs.org/wiki/Mutating_Stack_Machine",
    "language_short": "plaintext",
    "code": "!dlrow ',olleH............"
  },
  {
    "id": "640",
    "title": "Muf",
    "description": "MUF (short for Multi-User Forth) is a Forth-based programming language used on TinyMUCK MUCK servers and their descendants, including Fuzzball MUCK, ProtoMUCK and GlowMUCK.",
    "url": "https://mud.fandom.com/wiki/MUF_(programming_language)",
    "language_short": "c-like",
    "code": ": main\r\n    me @ \"Hello World\" notify\r\n;"
  },
  {
    "id": "641",
    "title": "Mumps",
    "description": "MUMPS (\"Massachusetts General Hospital Utility Multi-Programming System\"), or M, is a high performance transaction processing key–value database with integrated programming language. It was originally developed at Massachusetts General Hospital for managing hospital laboratory information systems.",
    "url": "https://en.wikipedia.org/wiki/MUMPS",
    "language_short": "plaintext",
    "code": " w \"Hello World!\",!"
  },
  {
    "id": "642",
    "title": "Muriel",
    "description": "Muriel is an esoteric programming language designed by Matthew Westcott in 2001.",
    "url": "https://esolangs.org/wiki/Muriel",
    "language_short": "abnf",
    "code": ".\"Hello, World!\";"
  },
  {
    "id": "643",
    "title": "Mushcode",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "say Hello World."
  },
  {
    "id": "644",
    "title": "MXML",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<mx:Application xmlns:mx=\"http://www.adobe.com/2006/mxml\">\r\n<mx:Label text=\"Hello World\"/>\r\n</mx:Application>"
  },
  {
    "id": "645",
    "title": "Myrddin",
    "description": "Myrddin is a programming language. It aims for control and simplicity. It features strong type checking, generics, type inference, closures, and traits. It aims to fit into a similar niche as C, but with fewer bullets in your feet.",
    "url": "https://myrlang.org/",
    "language_short": "c-like",
    "code": "use std\r\n \r\nconst main = {\r\n    std.put(\"Hello world!\\n\")\r\n}"
  },
  {
    "id": "646",
    "title": "MySQL",
    "description": "MySQL (/ˌmaɪˌɛsˌkjuːˈɛl/) is an open-source relational database management system (RDBMS). Its name is a combination of \"My\", the name of co-founder Michael Widenius's daughter, and \"SQL\", the abbreviation for Structured Query Language. A relational database organizes data into one or more data tables in which data types may be related to each other; these relations help structure the data.",
    "url": "https://en.wikipedia.org/wiki/MySQL",
    "language_short": "sql",
    "code": "SELECT 'Hello World!';"
  },
  {
    "id": "647",
    "title": "Myth",
    "description": "Myth is a minimalist Turing-complete non-deterministic esoteric programming language based on the string-rewriting paradigm. Its reference implementation was created by User:Plugnburn for 140byt.es contest in JavaScript (ECMAScript 5 standard) on July 30, 2013 and is only 137 bytes long.",
    "url": "https://esolangs.org/wiki/Myth",
    "language_short": "josn",
    "code": "{\"_\":\"Hello, world!\"}"
  },
  {
    "id": "648",
    "title": "Nadeshiko",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "「Hello World」と表示。"
  },
  {
    "id": "649",
    "title": "Naz",
    "description": "naz is an esoteric programming language designed by sporeball in 2019. Each instruction in a naz program is given by one number, from 0 to 9 (referred to as n), and one letter, from A to Z.",
    "url": "https://esolangs.org/wiki/Naz",
    "language_short": "plaintext",
    "code": "9a8m1o\r\n9a9a9a2a1o\r\n7a2o\r\n3a1o\r\n3d7a1o\r\n9s3s1o\r\n8a2m7a1o\r\n9a9a6a1o\r\n3a1o\r\n6s1o\r\n8s1o\r\n3d1o"
  },
  {
    "id": "650",
    "title": "NDBall",
    "description": "NDBall, \"N-Dimentinal Ball\" or NDB is an esolang made by User:Aspwil (talk)",
    "url": "https://esolangs.org/wiki/NDBall",
    "language_short": "",
    "code": "(0) >0\r\n{0,1} >0\r\n{0,2} +\r\n{0,3} Y[72,>1,>0]\r\n{0,3|1,1} <0\r\n{0,1|1,1} <1\r\n{0,4} >2\r\n{0,4|2,1} <0\r\n{0,3|2,1} p\r\n{2,1} >2\r\n{2,2} +\r\n{2,3} Y[101,>3,>2]\r\n{2,3|3,1} <2\r\n{2,1|3,1} <3\r\n{2,4} >4\r\n{2,4|4,1} <2\r\n{2,3|4,1} p\r\n{4,1} >4\r\n{4,2} +\r\n{4,3} Y[108,>5,>4]\r\n{4,3|5,1} <4\r\n{4,1|5,1} <5\r\n{4,4} >6\r\n{4,4|6,1} <4\r\n{4,3|6,1} p\r\n{4,2|6,1} p\r\n{6,1} >6\r\n{6,2} +\r\n{6,3} Y[111,>7,>6]\r\n{6,3|7,1} <6\r\n{6,1|7,1} <7\r\n{6,4} >8\r\n{6,4|8,1} <6\r\n{6,3|8,1} p\r\n{8,1} >8\r\n{8,2} -\r\n{8,3} Y[33,>8,>9]\r\n{8,3|9,1} <8\r\n{8,1|9,1} <9\r\n{8,4} >10\r\n{8,4|10,1} <8\r\n{8,3|10,1} p\r\n{10,1} >10\r\n{10,2} +\r\n{10,3} Y[119,>11,>10]\r\n{10,3|11,1} <10\r\n{10,1|11,1} <11\r\n{10,4} >12\r\n{10,4|12,1} <10\r\n{10,3|12,1} p\r\n{12,1} >12\r\n{12,2} -\r\n{12,3} Y[112,>12,>13]\r\n{12,3|13,1} <12\r\n{12,1|13,1} <13\r\n{12,4} >14\r\n{12,4|14,1} <12\r\n{12,3|14,1} p\r\n{14,1} >14\r\n{14,2} +\r\n{14,3} Y[114,>15,>14]\r\n{14,3|15,1} <14\r\n{14,1|15,1} <15\r\n{14,4} >16\r\n{14,4|16,1} <14\r\n{14,3|16,1} p\r\n{16,1} >16\r\n{16,2} -\r\n{16,3} Y[109,>16,>17]\r\n{16,3|17,1} <16\r\n{16,1|17,1} <17\r\n{16,4} >18\r\n{16,4|18,1} <16\r\n{16,3|18,1} p\r\n{18,1} >18\r\n{18,2} -\r\n{18,3} Y[101,>18,>19]\r\n{18,3|19,1} <18\r\n{18,1|19,1} <19\r\n{18,4} >20\r\n{18,4|20,1} <18\r\n{18,3|20,1} p\r\n{18,2|20,1} E"
  },
  {
    "id": "651",
    "title": "Neko",
    "description": "Neko programming language is a programming language created in 2005. Neko is a high-level dynamically typed programming language developed by Nicolas Cannasse as part of research and development (R&D) efforts at two indie video game firms in Bordeaux, France: first at Motion Twin and then at Shiro Games.",
    "url": "https://codelani.com/languages/neko.html",
    "language_short": "php",
    "code": "$$print(\"hello world\\n\");"
  },
  {
    "id": "652",
    "title": "Nemerle",
    "description": "Nemerle is a general-purpose, high-level, statically typed programming language designed for platforms using the Common Language Infrastructure (.NET/Mono). It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful metaprogramming system. In June 2012, the core developers of Nemerle were hired by the Czech software development company JetBrains. The team is focusing on developing Nitra, a framework to implement extant and new programming languages. This framework will likely be used to create future versions of Nemerle.",
    "url": "https://en.wikipedia.org/wiki/Nemerle",
    "language_short": "c-like",
    "code": "class Hello\r\n{\r\n    static Main () : void\r\n    {\r\n        System.Console.WriteLine (\"Hello world!\");\r\n    }\r\n}"
  },
  {
    "id": "653",
    "title": "NewtonScript",
    "description": "NewtonScript is a prototype-based programming language created to write programs for the Newton platform. It is heavily influenced by the Self programming language, but modified to be more suited to needs of mobile and embedded devices.",
    "url": "https://en.wikipedia.org/wiki/NewtonScript",
    "language_short": "c-like",
    "code": "baseview :=\r\n{viewBounds: {left: -3, top: 71, right: 138, bottom: 137},\r\n    viewFlags: 581,\r\n    declareSelf: 'base,\r\n    _proto: protoFloatNGo,\r\n    debug: \"baseview\"\r\n};\r\n \r\ntextview := * child of baseview *\r\n{text: \"Hello World!\",\r\n    viewBounds: {left: 33, top: 24, right: 113, bottom: 46},\r\n    viewFlags: 579,\r\n    _proto: protoStaticText,\r\n    debug: \"textview\"\r\n};"
  },
  {
    "id": "654",
    "title": "Nice",
    "description": "",
    "url": "",
    "language_short": "clike",
    "code": "void main(String[] args){ \r\n    println(\"hello world\"); \r\n}"
  },
  {
    "id": "655",
    "title": "Night",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print(\"Hello World\\n\");"
  },
  {
    "id": "656",
    "title": "Nim",
    "description": "Nim is an imperative, general-purpose, multi-paradigm, statically typed, systems, compiled programming language designed and developed by Andreas Rumpf. It is designed to be \"efficient, expressive, and elegant\", supporting metaprogramming, functional, message passing, procedural, and object-oriented programming styles by providing several features such as compile time code generation, algebraic data types, a foreign function interface (FFI) with C, C++, Objective-C, and JavaScript, and supporting compiling to those same languages.",
    "url": "https://en.wikipedia.org/wiki/Nim_(programming_language)",
    "language_short": "nim",
    "code": "echo(\"hello world\")"
  },
  {
    "id": "657",
    "title": "Nit",
    "description": "",
    "url": "",
    "language_short": "java",
    "code": "print \"Hello World\"\r\n"
  },
  {
    "id": "658",
    "title": "No Literals, Gotos Only, Final Destination!",
    "description": "No Literals, Gotos Only, Final Destination! is an esoteric language created by Something Fawful. It is the first one he created, starting in 2017, but only recently has he created a working interpreter. As the name of the language implies, No Literals, Gotos Only, Final Destination! does not have any predefined numeric on string literals, and every single line contains an implicit goto statement.",
    "url": "https://esolangs.org/wiki/No_Literals,_Gotos_Only,_Final_Destination!",
    "language_short": "plaintext",
    "code": "\\,1\r\n1+1,2\r\n2+1,3\r\n3+1,4\r\n4+1,5\r\n5+1,6\r\n6+2,8\r\n \r\n8+1,9\r\n9+1,A\r\nA+1,B\r\nB+2,D\r\n \r\nD+1,E\r\nE+1,F\r\nF+1,G\r\nG+10\r\n0,0\r\n \r\n0,0\r\n5D\r\n5D\r\n15,b\r\n55\r\n5G\r\n26\r\n60\r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+4B\r\n0:D9*0+18\r\n \r\n3F\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+1D\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+56\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+5G\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+1E\r\n0:D9*0+11,a\r\n \r\n \r\n \r\n \r\n \r\n \r\n0:D9*0+a+1,a\r\n \r\n \r\n0:D9*0+b+1,b\r\n \r\n \r\n0:D9*0+5D"
  },
  {
    "id": "659",
    "title": "Node.js",
    "description": "Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a \"JavaScript everywhere\" paradigm, unifying web-application development around a single programming language, rather than different languages for server-side and client-side scripts.",
    "url": "https://en.wikipedia.org/wiki/Node.js",
    "language_short": "javascript",
    "code": "#!/usr/bin/env node\r\n \r\nconsole.log('Hello world!');"
  },
  {
    "id": "660",
    "title": "NoFlo",
    "description": "NoFlo is a JavaScript implementation of Flow-Based Programming (FBP). Separating the control flow of software from the actual software logic. Helping you organize large applications easier than traditional OOP paradigms, especially when importing and modifying large data sets.",
    "url": "https://noflojs.org/",
    "language_short": "",
    "code": "'Hello, World' -> IN Display(Output)"
  },
  {
    "id": "661",
    "title": "NOR",
    "description": "NOR is an esoteric language created by Dylan Turner to replicate how a processor interprets data on a physical transistor level.\r\n<br>However, instead of using all the logic gates (AND, OR, NOT, NAND, XOR, etc.) it just uses NOR.\r\n<br>NOR is a universal logic gate and thus can be used to make the other gates, just in a much less convenient way.",
    "url": "https://esolangs.org/wiki/NOR",
    "language_short": "arduino",
    "code": "1\r\n0 REM store the H in line values\r\n    10 NOR 0, 1\r\n    20 NOR 0, 0\r\n    30 NOR 0, 1\r\n    40 NOR 0, 1\r\n    50 NOR 0, 0\r\n    60 NOR 0, 1\r\n    70 NOR 0, 1\r\n    80 NOR 0, 1\r\n90 REM print it all out\r\n    100 OUT #10:0\r\n    110 OUT #20:0\r\n    120 OUT #30:0\r\n    130 OUT #40:0\r\n    140 OUT #50:0\r\n    150 OUT #60:0\r\n    160 OUT #70:0\r\n    170 OUT #80:0\r\n    175 OLN\r\n180 REM Change to little e\r\n    190 NOR #30:0, 0\r\n    200 NOR #50:0, 0\r\n    210 NOR #60:0, 0\r\n    230 NOR #80:0, 0\r\n240 REM Output with replaced values\r\n    250 OUT #10:0\r\n    260 OUT #20:0\r\n    270 OUT #190:0\r\n    280 OUT #40:0\r\n    290 OUT #200:0\r\n    300 OUT #210:0\r\n    310 OUT #70:0\r\n    320 OUT #230:0\r\n    325 OLN\r\n330 REM Change to little l\r\n    340 NOR #200:0, 0\r\n    350 NOR #230:0, 0\r\n    360 REM Output little l twice\r\n    370 OUT #10:0\r\n    380 OUT #20:0\r\n    390 OUT #190:0\r\n    400 OUT #40:0\r\n    410 OUT #340:0\r\n    420 OUT #210:0\r\n    430 OUT #70:0\r\n    440 OUT #350:0\r\n    445 OLN\r\n    450 OUT #10:0\r\n    460 OUT #20:0\r\n    470 OUT #190:0\r\n    480 OUT #40:0\r\n    490 OUT #340:0\r\n    500 OUT #210:0\r\n    510 OUT #70:0\r\n    520 OUT #350:0\r\n    525 OLN\r\n530 REM Change to little o\r\n    540 NOR #70:0, 0\r\n    550 NOR #350:0, 0\r\n560 REM Output little o\r\n    570 OUT #10:0\r\n    580 OUT #20:0\r\n    590 OUT #190:0\r\n    600 OUT #40:0\r\n    610 OUT #340:0\r\n    620 OUT #210:0\r\n    630 OUT #540:0\r\n    640 OUT #550:0\r\n    645 OLN\r\n650 REM Pause at end\r\n    660 INP in0"
  },
  {
    "id": "662",
    "title": "Not Python",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "{<Hello World> printer:}"
  },
  {
    "id": "663",
    "title": "NOTE",
    "description": "NOTE is an esolang created by ResU in 2021. It uses one-based indexing.",
    "url": "https://esolangs.org/wiki/NOTE",
    "language_short": "",
    "code": ".print/\"Hello, world!\"\\"
  },
  {
    "id": "664",
    "title": "Novice",
    "description": "Novice is an esoteric programming language designed by Keymaker in 2007. It's a Turing-complete language based on string-rewriting and jumping to labels. For any string-rewriting to happen, there must exist a label that's identical to the part that rewrites something. There's an unbound memory string, and it, as every other line, must have at least one character. Replacing empty string with something or something with empty string isn't allowed.",
    "url": "https://esolangs.org/wiki/Novice",
    "language_short": "plaintext",
    "code": "a\r\na-Hello, world!_*\r\nHello, world!_*"
  },
  {
    "id": "665",
    "title": "Nqubl",
    "description": "Nqubl is an esoteric programming language created by David Catt (user:David.werecat) where instructions are queued and must be explicitly executed.",
    "url": "https://esolangs.org/wiki/Nqubl",
    "language_short": "plaintext",
    "code": "\"!dlrow ,olleH\"ex"
  },
  {
    "id": "666",
    "title": "Nu",
    "description": "Nu is an interpreted object-oriented programming language, with a Lisp-like syntax, created by Tim Burks as an alternative scripting language to program OS X through its Cocoa application programming interface (API). Implementations also exist for iPhone and Linux.",
    "url": "https://en.wikipedia.org/wiki/Nu_(programming_language)",
    "language_short": "vim",
    "code": "(puts \"Hello World\")\r\n"
  },
  {
    "id": "667",
    "title": "Numberix",
    "description": "Numberix is an esoteric programming language by Jeffry Johnston that was designed to make the source appear as lines of hex digits. It could be described as a mix of Befunge, Assembly, Brainfuck, Wierd, BASIC and INTERCAL.",
    "url": "https://esolangs.org/wiki/Numberix",
    "language_short": "brainfuck",
    "code": "A0000159006CA9006C590057A9006F590064A90021000000000000000000000000000000000000\r\n59004809006559006F09002059007209006CFF0000"
  },
  {
    "id": "668",
    "title": "NWScript",
    "description": "NWScript is the scripting language developed by BioWare for the role-playing video game Neverwinter Nights. It is based on the C programming language and is implemented in the Aurora toolset. Neverscript, an open source 3rd party editor, has been created for the Mac OS X and Linux versions of Neverwinter Nights because the Aurora toolset has not been ported to those platforms.",
    "url": "https://en.wikipedia.org/wiki/NWScript",
    "language_short": "",
    "code": "// Place in the OnClientEnter event of the module's properties\r\n{\r\n    SendMessageToPC(GetEnteringObject(), \"Hello World\");\r\n}"
  },
  {
    "id": "669",
    "title": "NXC (Not eXactly C)",
    "description": "Not eXactly C, or NXC, is a high-level programming language for the Lego Mindstorms NXT designed by John Hansen in 2006. NXC, which is short for Not eXactly C, is based on Next Byte Codes, an assembly language. NXC has a syntax like C. The IDE for NXC is the Bricx Command Center.",
    "url": "https://en.wikipedia.org/wiki/Not_eXactly_C",
    "language_short": "c-like",
    "code": "task main()\r\n{\r\n    TextOut(0, LCD_LINE1, \"Hello world!\");\r\n}"
  },
  {
    "id": "670",
    "title": "NyaScript",
    "description": "NyaScript is a derivative of brainfuck with some special features, like a temp variable for example.",
    "url": "https://esolangs.org/wiki/NyaScript",
    "language_short": "brainfuck",
    "code": "NyA NyA NyA NyA NyA NyA NyA NyA NyA NyA NYa \r\nNya NyA NyA NyA NyA NyA NyA NyA Nya NyA NyA \r\nNyA NyA NyA NyA NyA NyA NyA NyA Nya NyA NyA \r\nNyA NyA Nya NyA NyA NyA Nya NyA NyA NyA NyA \r\nNyA NyA NyA NyA NyA Nya NyA NyA NyA NyA NyA\r\nNyA nyA nyA nyA nyA nyA nyA nYa nYA Nya NyA \r\nNyA NYA Nya NyA NYA NyA NyA NyA NyA NyA NyA \r\nNyA NYA NYA nyan NyA NyA NyA NYA Nya NyA NyA \r\nNyA NyA NYA Nya NyA NyA NYA Nya nYa nYa nYa \r\nNYA NYAN NyA NyA NyA NYA NyA NyA NyA NYA NYAN\r\nNYA nYa nYa nYa nYa nYa nYa nYa nYa NYA nyA\r\nNyA NYA"
  },
  {
    "id": "671",
    "title": "O:XML",
    "description": "o:XML is an open source, dynamically typed, general-purpose object-oriented programming language based on XML-syntax. It has threads, exception handling, regular expressions and namespaces. Additionally o:XML has an expression language very similar to XPath that allows functions to be invoked on nodes and node sets.",
    "url": "https://en.wikipedia.org/wiki/O:XML",
    "language_short": "xml",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\b<text><![CDATA[Hello World]]></text>"
  },
  {
    "id": "672",
    "title": "Oberon",
    "description": "Oberon is a general-purpose programming language first published in 1987 by Niklaus Wirth and the latest member of the Wirthian family of ALGOL-like languages (Euler, ALGOL W, Pascal, Modula, and Modula-2).",
    "url": "https://en.wikipedia.org/wiki/Oberon_(programming_language)",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\n \r\nIMPORT Out;\r\n \r\nBEGIN\r\n    Out.Open;\r\n    Out.String('Hello World');\r\nEND HelloWorld."
  },
  {
    "id": "673",
    "title": "Oberon 2",
    "description": "Oberon-2 is an extension of the original Oberon programming language that adds limited reflection and object-oriented programming facilities, open arrays as pointer base types, read-only field export, and reintroduces the FOR loop from Modula-2.",
    "url": "https://en.wikipedia.org/wiki/Oberon-2",
    "language_short": "c-like",
    "code": "MODULE HelloWorld;\r\nIMPORT Out;\r\nBEGIN\r\n    Out.String( \"Hello World\" );\r\n    Out.Ln;\r\nEND HelloWorld."
  },
  {
    "id": "674",
    "title": "Obix",
    "description": "oBIX (for Open Building Information Exchange) is a standard for RESTful Web Services-based interfaces to building control systems. oBIX is about reading and writing data over a network of devices using XML and URIs, within a framework specifically designed for building automation.",
    "url": "https://en.wikipedia.org/wiki/OBIX",
    "language_short": "javascript",
    "code": "system.console.write_line ( \"Hello, world!\" )"
  },
  {
    "id": "675",
    "title": "Obj",
    "description": "OBJ is a programming language family introduced by Joseph Goguen in 1976, and further worked on by Jose Meseguer.",
    "url": "https://en.wikipedia.org/wiki/OBJ_(programming_language)",
    "language_short": "c-like",
    "code": "stdout println:'Hello World!'."
  },
  {
    "id": "676",
    "title": "Object Pascal",
    "description": "Object Pascal is an extension to the programming language Pascal that provides object-oriented programming (OOP) features such as classes and methods.",
    "url": "https://en.wikipedia.org/wiki/Object_Pascal",
    "language_short": "",
    "code": "program ObjectPascalExample;\r\n\r\ntype\r\n    THelloWorld = class\r\n      procedure Put;\r\n    end;\r\n\r\nprocedure THelloWorld.Put;\r\nbegin\r\n    Writeln('Hello World');\r\nend;\r\n\r\nvar\r\n    HelloWorld: THelloWorld;\r\n\r\nbegin\r\n    HelloWorld := THelloWorld.Create;\r\n    HelloWorld.Put;\r\n    HelloWorld.Free;\r\nend."
  },
  {
    "id": "677",
    "title": "Objective C",
    "description": "Objective-C is a general-purpose, object-oriented programming language that adds Smalltalk-style messaging to the C programming language. It was the main programming language supported by Apple for macOS, iOS, and their respective application programming interfaces (APIs), Cocoa and Cocoa Touch, until the introduction of Swift in 2014.",
    "url": "https://en.wikipedia.org/wiki/Objective-C",
    "language_short": "objectivec",
    "code": "/*\r\n    Build on OS X: \r\n    clang -framework Foundation -fobjc-arc objc.m -o objc\r\n \r\n    Build on Linux with GNUstep:\r\n    clang `gnustep-config --objc-flags` `gnustep-config --base-libs` -fobjc-nonfragile-abi -fobjc-arc objc.m -o objc\r\n*/\r\n \r\n#import <Foundation/Foundation.h>\r\n \r\nint main(void)\r\n{\r\n    NSLog(@\"Hello World\");\r\n}"
  },
  {
    "id": "678",
    "title": "Objective J",
    "description": "Objective-J is a programming language developed as part of the Cappuccino web development framework. Its syntax is nearly identical to the Objective-C syntax and it shares with JavaScript the same relationship that Objective-C has with the C programming language: that of being a strict, but small, superset; adding traditional inheritance and Smalltalk/Objective-C style dynamic dispatch. Pure JavaScript, being a prototype-based language, already has a notion of object orientation and inheritance, but Objective-J adds the use of class-based programming to JavaScript.",
    "url": "https://en.wikipedia.org/wiki/Objective-J",
    "language_short": "objectivec",
    "code": "document.write(\"Hello, World!\");"
  },
  {
    "id": "679",
    "title": "ObjectStar",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "CALL ENDMSG('HELLO WORLD');"
  },
  {
    "id": "680",
    "title": "OCaml",
    "description": "OCaml (/oʊˈkæməl/ oh-KAM-əl, formerly Objective Caml) is a general-purpose, multi-paradigm programming language which extends the Caml dialect of ML with object-oriented features. OCaml was created in 1996 by Xavier Leroy, Jérôme Vouillon, Damien Doligez, Didier Rémy, Ascánder Suárez, and others.",
    "url": "https://en.wikipedia.org/wiki/OCaml",
    "language_short": "ocaml",
    "code": "print_string \"Hello World\\n\""
  },
  {
    "id": "681",
    "title": "Octave",
    "description": "GNU Octave is software featuring a high-level programming language, primarily intended for numerical computations. Octave helps in solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB. It may also be used as a batch-oriented language. Since it is part of the GNU Project, it is free software under the terms of the GNU General Public License.",
    "url": "https://en.wikipedia.org/wiki/GNU_Octave",
    "language_short": "php",
    "code": "#Hello World in Octave (http://www.octave.org/)\r\nprintf(\"Hello World\\n\");"
  },
  {
    "id": "682",
    "title": "Odin",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "package main\r\n\r\nimport \"core:fmt\"\r\n\r\nmain :: proc() {\r\n  fmt.println(\"Hello World\");\r\n}"
  },
  {
    "id": "683",
    "title": "Omgrofl",
    "description": "Omgrofl is an esoteric programming language created in 2006 by Juraj Borza. It is equipped with a stack/queue, has support for byte-sized variables and keywords resembling Internet slang. The name comes from combining the slang \"words\" omg and rofl. Rofl is actually one of Omgrofl's commands.",
    "url": "https://esolangs.org/wiki/Omgrofl",
    "language_short": "plaintext",
    "code": "lol iz 72\r\nrofl lol\r\nlol iz 101\r\nrofl lol\r\nlol iz 108\r\nrofl lol\r\nrofl lol\r\nlool iz 111\r\nrofl lool\r\nloool iz 44\r\nrofl loool\r\nloool iz 32\r\nrofl loool\r\nloool iz 87\r\nrofl loool\r\nrofl lool\r\nlool iz 114\r\nrofl lool\r\nrofl lol\r\nlol iz 100\r\nrofl lol\r\nlol iz 33\r\nrofl lol"
  },
  {
    "id": "684",
    "title": "ON THE WAY TO WHO KNOWS WHERE",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "11"
  },
  {
    "id": "685",
    "title": "Ooc",
    "description": "ooc is a small programming language with a clear and concise syntax that compiles to C99.",
    "url": "https://ooc-lang.org/",
    "language_short": "c-like",
    "code": "main: func {\r\n    \"Hello World\" println()\r\n}"
  },
  {
    "id": "686",
    "title": "Ook (Ook!)",
    "description": "Ook! is a joke esoteric programming language created by David Morgan-Mar. It is identical to Brainfuck, except that the instructions are changed into Orangutan words. It represents the first in a long line of Brainfuck command substitutions. As such, it is a member of the TrivialBrainfuckSubstitution family of programming languages.",
    "url": "https://esolangs.org/wiki/Ook!",
    "language_short": "plaintext",
    "code": "Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.\r\nOok! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?\r\nOok! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook.\r\nOok. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.\r\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.\r\nOok? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.\r\nOok! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.\r\nOok! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!\r\nOok! Ook. Ook. Ook? Ook. Ook? Ook. Ook. Ook! Ook."
  },
  {
    "id": "687",
    "title": "OOLANG",
    "description": "OOLANG(Object Oriented LANGuage), simple stack based esoteric programming language, but with object oriented syntax.",
    "url": "https://esolangs.org/wiki/OOLANG",
    "language_short": "plaintext",
    "code": "Hello, World!.println;"
  },
  {
    "id": "688",
    "title": "Opa",
    "description": "Opa is an open-source programming language for developing scalable web applications.",
    "url": "https://en.wikipedia.org/wiki/Opa_(programming_language)",
    "language_short": "javascript",
    "code": "jlog(\"Hello world\")"
  },
  {
    "id": "689",
    "title": "OpenLaszlo",
    "description": "OpenLaszlo is a discontinued open-source platform for the development and delivery of rich web applications. It is released under the Open Source Initiative certified Common Public License (CPL).",
    "url": "https://en.wikipedia.org/wiki/OpenLaszlo",
    "language_short": "xml",
    "code": "<canvas>\r\n    <text>Hello World!</text>\r\n</canvas>"
  },
  {
    "id": "690",
    "title": "Oracle SQL",
    "description": "Oracle Database (commonly referred to as Oracle DBMS or simply as Oracle) is a multi-model database management system produced and marketed by Oracle Corporation.",
    "url": "https://en.wikipedia.org/wiki/Oracle_Database",
    "language_short": "sql",
    "code": "SELECT 'Hello World!' FROM DUAL;"
  },
  {
    "id": "691",
    "title": "Orc",
    "description": "Orc is a concurrent, nondeterministic computer programming language created by Jayadev Misra at the University of Texas at Austin.",
    "url": "https://en.wikipedia.org/wiki/Orc_(programming_language)",
    "language_short": "c-like",
    "code": "{- HelloWorld.orc -- Orc program HelloWorld\r\n    -\r\n    - $$Id$$\r\n    -\r\n    - Created by xbony2 on Nov 8, 2014 8:30:25 PM\r\n    - Licensed under public domain.\r\n-}\r\nPrintln(\"Hello World!\") >>\r\nstop"
  },
  {
    "id": "692",
    "title": "Orion",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(def 'impure main\r\n    (λ () (putStrLn \"Hello World\")))"
  },
  {
    "id": "693",
    "title": "ORK",
    "description": "ORK (Objekts R Kool), designed by Gregor Richards in 2005, is an object-oriented language that has a very verbose syntax, unlike most other esoteric programming languages. It's object oriented to such a degree, that even simple operations (addition, subtraction, comparisons) require the instantiation of an object. According to the spec, its divine purpose in existance is to be the polar opposite of Brainfuck.",
    "url": "https://esolangs.org/wiki/ORK",
    "language_short": "plaintext",
    "code": "When this program starts:\r\nThere is a scribe called Writer.\r\nWriter is to write \"Hello, world!\""
  },
  {
    "id": "694",
    "title": "Ouroboros",
    "description": "Ouroboros is an esoteric programming language wherein the code is a bunch of snakes eating their own tails.",
    "url": "https://esolangs.org/wiki/Ouroboros",
    "language_short": "plaintext",
    "code": "\"Hello, World!\"ooooooooooooo1("
  },
  {
    "id": "695",
    "title": "OX",
    "description": "Ox is an object-oriented matrix programming language with a mathematical and statistical function library, developed by Jurgen Doornik. It has been designed for econometric programming. It is available for Windows, Mac OS X and Linux platforms.",
    "url": "https://en.wikipedia.org/wiki/Ox_(programming_language)",
    "language_short": "json",
    "code": "{Show 'Hello World'}"
  },
  {
    "id": "696",
    "title": "P0pCrn",
    "description": "P0pCrn is an esolang made by Areallycoolusername. It's based off of x86 Assembly and it has cells.",
    "url": "https://esolangs.org/wiki/P0pCrn",
    "language_short": "brainfuck",
    "code": "_P    _0    _p    _!\r\n@o    #o    $$o    st\r\np_    p_    p_    r_\r\nTh    ms    P0    op\r\nis    g_    pC \r\nis    op    rn\r\nwh    P0    =_\r\nat    pC    He\r\nco    rn    ll\r\nmm          o_\r\nen          wo\r\nts          rl\r\nlo          d!\r\nok\r\nli \r\nke \r\nin\r\nP0\r\npC\r\nrn\r\n!\r\n \r\nOutputs \"Hello, world!\""
  },
  {
    "id": "697",
    "title": "Packlang",
    "description": "Packlang is an esolang by User:PythonshellDebugwindow.",
    "url": "https://esolangs.org/wiki/Packlang",
    "language_short": "json",
    "code": "Package : IO {\r\n    Integer main {\r\n        charPut(72);\r\n        charPut(101);\r\n        charPut(108);\r\n        charPut(108);\r\n        charPut(111);\r\n        charPut(44);\r\n        charPut(32);\r\n        charPut(87);\r\n        charPut(111);\r\n        charPut(114);\r\n        charPut(108);\r\n        charPut(100);\r\n        charPut(33);\r\n        charPut(13);\r\n        charPut(10);\r\n        0;\r\n    }\r\n} helloWorld;"
  },
  {
    "id": "698",
    "title": "Paintfuck",
    "description": "Paintfuck is a borderline-esoteric graphical programming language by User:Whtspc. A derivative from Smallfuck that uses a 2D datagrid instead of 1D.",
    "url": "https://esolangs.org/wiki/Paintfuck",
    "language_short": "brainfuck",
    "code": "*s*s*s*s*enn*enn*s*s*s*s*ee*n*n*n*n*e*e*ssw\r\n*ss*e*ee*e*e*wwn*n*n*n*eeee*s*s*s*s*e*e*een\r\n*n*n*en*es*s*s*sw*eee*sw*wwwwwn[ww]seess*s*\r\ns*s*se*e*n*n*n*n*ee*s*s*s*sw*eeee*wn*n*n*ne\r\n*es*s*s*ees*n*n*n*n*e*es*ws*es*s*ee*n*n*n*n\r\n*[s]ne*e*ee*n*n*n*n*e*es*s*s*sw*eee*nn*n*n*"
  },
  {
    "id": "699",
    "title": "Parenthetic",
    "description": "",
    "url": "",
    "language_short": "brainfuck",
    "code": "Parenthetic - https://github.com/cammckinnon/Parenthetic\r\n \r\n((()()())(()(()()))((()(()))((())()()()()()()())((()()(()))((())()()()()()()()()())\r\n((())()()()()()()()()()()))))((()()())(()(()()()))((()(())(())())((())()()()()()()(\r\n)()()()()()()()()()()()()()()()()()()()()()()()()())))((()(()))((()(())(())())((()(\r\n()))(()(()()))((())()()()()()()())))((()(())(())())((()(()))(()(()()))((())()()()()\r\n)))((()(())(())())((()(()))(()(()()))((())()()()()()()()()()()())))((()(())(())())(\r\n(()(()))(()(()()))((())()()()()()()()()()()())))((()(())(())())((()(()))(()(()()))(\r\n(())()()()()()()()()()()()()()())))(()(()()()))((()(())(())())((()(()))(()(()()))((\r\n())()()()()()()()()()()()()()()()()()()()()()())))((()(())(())())((()(()))(()(()())\r\n)((())()()()()()()()()()()()()()())))((()(())(())())((()(()))(()(()()))((())()()()(\r\n)()()()()()()()()()()()()())))((()(())(())())((()(()))(()(()()))((())()()()()()()()\r\n()()()())))((()(())(())())((()(()))(()(()()))((())()()()))))"
  },
  {
    "id": "700",
    "title": "Parser",
    "description": "Parser is a scripting language developed by Art. Lebedev Studio used for web development and server-side scripting.",
    "url": "https://en.wikipedia.org/wiki/Parser_(programming_language)",
    "language_short": "parser3",
    "code": "@main[]\r\n    ^rem{Will print \"Hello, World!\" when run as CGI script}\r\n    $$hello[Hello, World!]\r\n    $$result[$$hello]"
  },
  {
    "id": "701",
    "title": "Pascal",
    "description": "Pascal is an imperative and procedural programming language, designed by Niklaus Wirth as a small, efficient language intended to encourage good programming practices using structured programming and data structuring. It is named in honour of the French mathematician, philosopher and physicist Blaise Pascal.",
    "url": "https://en.wikipedia.org/wiki/Pascal_(programming_language)",
    "language_short": "c-like",
    "code": "program HelloWorld(output);\r\nbegin\r\n        writeln('Hello World');\r\n        readln;\r\nend."
  },
  {
    "id": "702",
    "title": "PATH",
    "description": "PATH, invented by Francis Rogers in August 2003, is a two-dimensional language inspired by Brainfuck and Befunge. PATH's environment, like Brainfuck's, consists of an array of memory cells all initialized to zero and character-based standard input and output.",
    "url": "https://esolangs.org/wiki/PATH",
    "language_short": "brainfuck",
    "code": "\\/\\   /\\          /\\  /\\ \r\n+++   ++          ++  ++\r\n+++   ++  /++++\\  ++  ++  /++++\\ \r\n++\\++\\++  +    +  ++  ++  +    +\r\n++   +++  +/+++/  ++  ++  +    +\r\n++   +++  ++      ++  ++  +    +\r\n\\/   \\/\\  /\\+++   /\\  /\\  /++.+/  \r\n                            \\        \\ \r\n/++++.+++++++++++++++++++++++++++  /  \\ \r\n                            /\\       -  -#\r\n                            ++       .  -.\r\n+      /  \\++++\\  /++++\\  ++  /---\\-  -+\r\n+  /\\  +  +    +  +    +  +.  -   .-  -}\r\n+  +.  +  +    +  +       +-  -   +-  \r\n.  +}  +  +    +  +       +-  -   +-  -.\r\n\\.+/\\++/  \\++++/  +       +\\  /-.+/-  --\r\n            \\      /    \\.{/   \\    /  \\/"
  },
  {
    "id": "703",
    "title": "Pauscal",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Importar \"Pauscal.prp\"\r\nMensaje(\"Hello World\")\r\nFin"
  },
  {
    "id": "704",
    "title": "Pawn",
    "description": "Pawn was originally named \"Small\" to emphasize the size of the language specification. The language sacrifices many features found in modern languages to achieve simplicity and speed, which are required for embedded uses.",
    "url": "https://wiki.alliedmods.net/Pawn_Tutorial",
    "language_short": "c-like",
    "code": "#include <core>\r\n \r\nmain(){\r\n    print(\"Hello World!\");   \r\n}"
  },
  {
    "id": "705",
    "title": "PB",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "; Hello World in \"PowerBatch Plus+\" from Computing Systems Design, Inc.\r\n \r\nVariable        Msg,13,\"Hello, World!\"\r\n \r\nWrite           Msg"
  },
  {
    "id": "706",
    "title": "PBWin (PowerBASIC Win)",
    "description": "PowerBASIC, formerly Turbo Basic, is the brand of several commercial compilers by PowerBASIC Inc. that compile a dialect of the BASIC programming language. There are both MS-DOS and Windows versions, and two kinds of the latter: Console and Windows. The MS-DOS version has a syntax similar to that of QBasic and QuickBASIC. The Windows versions use a BASIC syntax expanded to include many Windows functions, and the statements can be combined with calls to the Windows API.",
    "url": "https://en.wikipedia.org/wiki/PowerBASIC",
    "language_short": "c-like",
    "code": "#COMPILE EXE\r\n#DIM ALL\r\n \r\nFUNCTION PBMAIN () AS LONG\r\n \r\n    MSGBOX \"Hello World\"\r\n \r\nEND FUNCTION"
  },
  {
    "id": "707",
    "title": "PDA-er",
    "description": "PDA-er is an esoteric programming language created by User:Largejamie in March 2021 whose programs create and then run input on a Push-down automaton.",
    "url": "https://esolangs.org/wiki/PDA-er",
    "language_short": "",
    "code": ".1001000.\r\n----1100101-\r\n.1100101.\r\n----1101100-\r\n.1101100.\r\n----1101100-\r\n----1101111-\r\n----1100100-\r\n.1101111.\r\n----101100-\r\n----1110010-\r\n.101100.\r\n----100000-\r\n.100000.\r\n----1110111-\r\n.1110111.\r\n----1101111-\r\n.1110010.\r\n----1101100-\r\n.1100100.\r\n----100001-\r\n..100001.\r\n!\r\n.100011."
  },
  {
    "id": "708",
    "title": "Pebble",
    "description": "Pebble is a discontinued smartwatch developed by Pebble Technology Corporation. Funding was conducted through a Kickstarter campaign running from April 11, 2012 to May 18, 2012, which raised $$10.3 million; it was the most funded project in Kickstarter history, at the time. Pebble began shipping watches to Kickstarter backers in January 2013.",
    "url": "https://en.wikipedia.org/wiki/Pebble_(watch)",
    "language_short": "c-like",
    "code": "#include <pebble.h>\r\n \r\nstatic Window* main_window;\r\nstatic TextLayer* text_layer, *world_layer;\r\n \r\nstatic void main_window_load(Window* window) {\r\n    Layer *window_layer = window_get_root_layer(window);\r\n    window_set_background_color(main_window, GColorBlack);\r\n    GRect bounds = layer_get_bounds(window_layer);\r\n    text_layer = text_layer_create(\r\n        GRect(0, bounds.size.h / 2 - 42, bounds.size.w, 120));\r\n    text_layer_set_text(text_layer, \"Hello\");\r\n    text_layer_set_background_color(text_layer, GColorClear);\r\n    text_layer_set_text_color(text_layer, GColorWhite);\r\n    text_layer_set_font(text_layer, fonts_get_system_font(FONT_KEY_BITHAM_42_BOLD));\r\n    text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\r\n \r\n    world_layer = text_layer_create(\r\n        GRect(0, bounds.size.h / 2, bounds.size.w, 120));\r\n    text_layer_set_background_color(world_layer, GColorClear);\r\n    text_layer_set_text(world_layer, \"World\");\r\n    text_layer_set_text_color(world_layer, GColorLightGray);\r\n    text_layer_set_font(world_layer, fonts_get_system_font(FONT_KEY_BITHAM_42_BOLD));\r\n    text_layer_set_text_alignment(world_layer, GTextAlignmentCenter);\r\n    \r\n    layer_add_child(window_layer, text_layer_get_layer(text_layer));\r\n    layer_add_child(window_layer, text_layer_get_layer(world_layer));\r\n}\r\nstatic void main_window_unload(Window* window) {\r\n    text_layer_destroy(text_layer);\r\n    text_layer_destroy(world_layer);\r\n}\r\n \r\nstatic void init() {\r\n    main_window = window_create();\r\n    window_set_window_handlers(main_window, (WindowHandlers) {\r\n        .load = main_window_load,\r\n        .unload = main_window_unload\r\n    });\r\n    window_stack_push(main_window, true);\r\n}\r\n \r\nstatic void deinit() {\r\n    window_destroy(main_window);\r\n}\r\n \r\nint main(void) {\r\n    init();\r\n    app_event_loop();\r\n    deinit();\r\n}"
  },
  {
    "id": "709",
    "title": "PeopleCode",
    "description": "PeopleCode is a proprietary object-oriented programming language used to express business logic for PeopleSoft applications. Syntactically, PeopleCode is similar to other programming languages, and can be found in both loosely-typed and strongly-typed forms. PeopleCode and its run-time environment is part of the larger PeopleTools framework.",
    "url": "https://en.wikipedia.org/wiki/PeopleCode",
    "language_short": "",
    "code": "MessageBox(0, \"\", 0, 0, \"Hello World\");"
  },
  {
    "id": "710",
    "title": "Perfume",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "println \"Hello World\";"
  },
  {
    "id": "711",
    "title": "Perl",
    "description": "Perl is a family of two high-level, general-purpose, interpreted, dynamic programming languages. \"Perl\" refers to Perl 5, but from 2000 to 2019 it also referred to its redesigned \"sister language\", Perl 6, before the latter's name was officially changed to Raku in October 2019. Perl 7, continuing from Perl 5, not Perl 6, is also due in 2021.",
    "url": "https://en.wikipedia.org/wiki/Perl",
    "language_short": "perl",
    "code": "   #!/usr/local/bin/perl -w\r\n    use CGI;                                # load CGI routines\r\n    $$q = CGI->new;                          # create new CGI object\r\n    print $$q->header,                       # create the HTTP header\r\n        $$q->start_html('hello world'),      # start the HTML\r\n        $$q->h1('hello world'),              # level 1 header\r\n        $$q->end_html;                       # end the HTML\r\n \r\n# http://perldoc.perl.org/CGI.html"
  },
  {
    "id": "712",
    "title": "Perl6",
    "description": "Perl is a family of two high-level, general-purpose, interpreted, dynamic programming languages. \"Perl\" refers to Perl 5, but from 2000 to 2019 it also referred to its redesigned \"sister language\", Perl 6, before the latter's name was officially changed to Raku in October 2019. Perl 7, continuing from Perl 5, not Perl 6, is also due in 2021.",
    "url": "https://en.wikipedia.org/wiki/Perl",
    "language_short": "perl",
    "code": "#!/usr/bin/env perl6\r\n \r\nv6;\r\n \r\nsay \"Hello, World!\";"
  },
  {
    "id": "713",
    "title": "Perseus",
    "description": "The Perseus Project is a digital library project of Tufts University, which assembles digital collections of humanities resources. Version 4.0 is also known as the \"Perseus Hopper\", and it is hosted by the Department of Classical Studies. The project is mirrored by the Max Planck Society in Berlin, Germany, as well as by the University of Chicago.",
    "url": "https://en.wikipedia.org/wiki/Perseus_Project",
    "language_short": "c-like",
    "code": "link CUI entry main\r\n \r\ninclude \"Windows.inc\"\r\ninclude \"Console.inc\"\r\n \r\nfunc main()\r\n{\r\n    Console.Init(\"Console\")\r\n    Console.Write(\"Hello World!\")\r\n}"
  },
  {
    "id": "714",
    "title": "Pharo",
    "description": "Pharo is an open source dynamic and reflective language which is inspired by the programming language Smalltalk. Pharo offers several live programming features such as immediate object manipulation, live update and hot recompiling.",
    "url": "https://en.wikipedia.org/wiki/Pharo",
    "language_short": "plaintext",
    "code": "'Hello World' crLog"
  },
  {
    "id": "715",
    "title": "Phix",
    "description": "Phix is the open source, self-hosted, interpreted and compiled programming language that emphasizes simplicity and programmer friendly error messages.",
    "url": "https://en.everybodywiki.com/Phix_(programming_language)",
    "language_short": "",
    "code": "puts(1,\"Hello World\")"
  },
  {
    "id": "716",
    "title": "PHL 1.0",
    "description": "Proceed High Language 1.0 (also known as PROCEED) is a mildly esoteric programming language created by User:Fergusq in 2012.",
    "url": "https://esolangs.org/wiki/PHL_1.0",
    "language_short": "c-like",
    "code": "main[\r\n    println(Hello world!);\r\n]"
  },
  {
    "id": "717",
    "title": "PHP",
    "description": "PHP is a general-purpose scripting language especially suited to web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group. PHP originally stood for Personal Home Page, but it now stands for the recursive initialism PHP: Hypertext Preprocessor.",
    "url": "https://en.wikipedia.org/wiki/PHP",
    "language_short": "php",
    "code": "<?php\r\n \r\n    echo 'Hello World';"
  },
  {
    "id": "718",
    "title": "Pi",
    "description": "The Pi language is a public domain esoteric programming language and trivial brainfuck substitution idealized by Daniel Lopes Parra and invented by Marcelo Aires Caetano and Paulo Matias in 2006.",
    "url": "https://esolangs.org/wiki/Pi",
    "language_short": "plaintext",
    "code": "14159265358979323842264332327250288412716939927513582397492459230721640628220899867803480534311206298214838653322233664709084463955358323172235940832848311725028410370193853110525964460294895293032196422880097562591344612147514823378178346528120090214562856642346134861345532264821332360736034914137372428700663631558417448152392396222925459170536432789259026051133013014882046252138214295194153160243205227036275959395309212613732192261379310211855807440237946274952735182575273489122743848301134912983467436444065634308652133494633522473749030217386093370277033921317659317670238267581846066440"
  },
  {
    "id": "719",
    "title": "PiCat",
    "description": "The Picat language is really cool; it's a very usable mix of logic, functional, constraint, and imperative programming. Scripts can be made quite short but also easily readable. And the built-in tabling is really cool for speeding up recursive programs. I think Picat is like a perfect Swiss army knife that you can do anything with.",
    "url": "http://picat-lang.org/",
    "language_short": "c-like",
    "code": "main =>\r\n    println('Hello World')."
  },
  {
    "id": "720",
    "title": "Pieces",
    "description": "Pieces is an esoteric language with the same set of commands as brainfuck created by poiuy_qwert. The difference is each command is a puzzle piece. Adding up all the indents and outdents in the puzzle pieces determines which brainfuck command is used.",
    "url": "https://esolangs.org/wiki/Pieces",
    "language_short": "brainfuck",
    "code": "                                                                    #      #                                                             #                        #   +                                                +                     #      #                                                                            +                              #\r\n###+++# #+++# #+++# #+++# #+++####+++###+ +###+ +###+ +###+ +###+ +## #+ +## #++###+ +###+ +###+ +###++++###+++# #+++# #+++# #++ +# #+++## #+++###+ +###+ +###+ +## #++ +###+ +###++ +###++###+++# #+++# #+++# #+++# #++ +# #+++# #+++# #+ +## #+ +## #+++##+++###+ +###+ +###+ +###+ +###+++####+++###+ +###+ +###+ +###+ +## #++ +# #+ +## #++ +####+++# #+ +## #+ +## #++ +## #++ +## #++++## #++ +## #++ +## #++ +## #++ +## #+++##+++####\r\n####+++###+++###+++###+++###+++####+++###+++###+++###+++###+++##++++###+++####+++###+++###+++###+++###++++###+++###+++###++####+++###++++###++++###+++###+++###+++####++++###+++###++++##+++###+++###+++###+++###+++###++++##++####++####++####++++#####++###+++###+++###+++###+++###+++###+++####+++###+++###+++###+++###+++####+++###++++####++++####++###+++####++++####++++####++++####++++####++++####++++####++++####++++####++###+++####\r\n###++####++####++####++####++####++++##++++##++++##++++##++++##+++####+++####+++##++++##++++##++++##++++####++####++####++###++++###++++###++++##++++##++++##++++####++++##++++##+++++##+++###++####++####++####++####++++####+++###+++###+++###++++###++###+++##++++##++++##++++##++++##+++####++++##++++##++++##++++##++++###++++###+++####++++####+++###+++####+++####++++####++++####++++####++++####++++####++++####++++#####++###++####\r\n###+++###+++###+++###+++###+++# ##+++###+++###+++###+++###+++###+++# ##+++# ##++###+++###+++###+++###+ ++###+++###+++###+++###+ ++###+ +# ##+ +###+++###+++###+++# ##+ ++###+++###+ ++###++###+++###+++###+++###+++###+ ++###+++###+++###+++# ##+++# ##+++##+++###+++###+++###+++###+++###+++# ##+++###+++###+++###+++###+++####+ ++###+++####++++## #+++###+++# ##+++####++++####++++####+ ++####++++####++++####++++####++++# ##+++##+++# ##\r\n                                #                                     #                                +                         +                                                                                      +                      #                                               #                                  +"
  },
  {
    "id": "721",
    "title": "Pig",
    "description": "Pig is a programming language that has only one keyword: the word PIG.",
    "url": "https://esolangs.org/wiki/Pig",
    "language_short": "plaintext",
    "code": "Hello, World!PIGHello, World!"
  },
  {
    "id": "722",
    "title": "PikaLang",
    "description": "Pikalang is a joke esoteric programming language created by Blake Grotewold. It is identical to Brainfuck, except that the instructions are changed into the sounds made by Pikachu from Pokémon. It is one of the many trivial Brainfuck command substitutions. As such, it is a member of the TrivialBrainfuckSubstitution family of programming languages.",
    "url": "https://esolangs.org/wiki/Pikalang",
    "language_short": "",
    "code": "pi pi pi pi pi pi pi pi pi pi pika pipi pi pi pi pi pi pi pi pipi pi pi\r\npi pi pi pi pi pi pi pi pipi pi pi pi pipi pi pichu pichu pichu pichu ka\r\nchu pipi pi pi pikachu pipi pi pikachu pi pi pi pi pi pi pi pikachu\r\npikachu pi pi pi pikachu pipi pi pi pikachu pichu pichu pi pi pi pi pi\r\npi pi pi pi pi pi pi pi pi pi pikachu pipi pikachu pi pi pi pikachu ka\r\nka ka ka ka ka pikachu ka ka ka ka ka ka ka ka pikachu pipi pi pikachu\r\npipi pikachu"
  },
  {
    "id": "723",
    "title": "Pike",
    "description": "Pike is a dynamic interpreted language with a C-like syntax. It was created in 1994 as a GPL version of LPC (which was not licensed for commercial use). Initially it was called µLPC (for micro LPC), but later was renamed for branding purposes. Pike is an object-oriented language, with built-in garbage collection and a flexible system of data types. It is considered to be one of the fastest scripting languages existing.",
    "url": "https://en.wikipedia.org/wiki/Pike_(programming_language)",
    "language_short": "c-like",
    "code": "int main() {\r\n    write(\"Hello World!\\n\");\r\n    return 0;\r\n}"
  },
  {
    "id": "724",
    "title": "Pinecone",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print: Hello World"
  },
  {
    "id": "725",
    "title": "Pit",
    "description": "Pit is an Esoteric programming language by David Catt (user:david.werecat) which is designed to be extremely low level.",
    "url": "https://esolangs.org/wiki/Pit",
    "language_short": "plaintext",
    "code": "NOT 1\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 0\r\nSND 1\r\nSND 0\r\nSND 0\r\nSND 0\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nSND 2\r\nSND 1\r\nNOT 2\r\nSND 2\r\nSND 0\r\nOFF 0"
  },
  {
    "id": "726",
    "title": "Pixiedust",
    "description": "Pixiedust is a Turing-complete assembly-like language created by Stephen Leppik with the intention of looking like pixie dust. First revealed in a 2018 Stack Overflow post, the language consists entirely of the symbols *+. plus whitespace. Whitespace has no effect on the program, but should be used liberally to achieve the desired aesthetic.",
    "url": "https://esolangs.org/wiki/Pixiedust",
    "language_short": "brainfuck",
    "code": "++.*+..+...\r\n++.*++..+.+\r\n++.*++.++..\r\n++.*++.++..\r\n++.*++.++++\r\n++.*+.++..\r\n++.*+.....\r\n++.*+.+.+++\r\n++.*++.++++\r\n++.*+++..+.\r\n++.*++.++..\r\n++.*++..+..\r\n++.*+....+"
  },
  {
    "id": "727",
    "title": "Pizza",
    "description": "Pizza is an open-source superset of Java 1.4, prior to the introduction of generics for the Java programming language. In addition to its own solution for adding generics to the language, Pizza also added function pointers and algebraic types with case classes and pattern matching.",
    "url": "https://en.wikipedia.org/wiki/Pizza_(programming_language)",
    "language_short": "C-like",
    "code": "class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World\");\r\n    }\r\n}"
  },
  {
    "id": "728",
    "title": "Pizza Delivery",
    "description": "Pizza Delivery is yet another esolang by Cortex designed to be similar to the logic of other Cortex languages, but more concise. It is named after the Spider-Man 2 Pizza Theme (despite having no real relation), and it is ideal that you play the song on loop while coding in Pizza Delivery. Its data model is technically a 2-dimensional array of cells, but Cortex prefers to call it a square. It might be a finite-state automaton.",
    "url": "https://esolangs.org/wiki/Pizza_Delivery",
    "language_short": "brainfuck",
    "code": "21d64d72d57d20d2Cd6Fd6Cd65d48`a`a``a`a`a`a`ddd`aaaa`ddddd`aaaaaa`a`."
  },
  {
    "id": "729",
    "title": "Plain text",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Hello World"
  },
  {
    "id": "730",
    "title": "Please Porige Hot",
    "description": "Please Porige Hot [sic] is an esoteric programming language by User:Zzo38 with a superficial resemblance to SON-OF-UNBABTIZED.",
    "url": "https://esolangs.org/wiki/Please_Porige_Hot",
    "language_short": "plaintext",
    "code": "1 Please porige hot or cold Hello, World!"
  },
  {
    "id": "731",
    "title": "PLI (PL/I)",
    "description": "PL/I (Programming Language One, pronounced /piː ɛl wʌn/ and sometimes written PL/1) is a procedural, imperative computer programming language developed and published by IBM. It is designed for scientific, engineering, business and system programming. It has been used by academic, commercial and industrial organizations since it was introduced in the 1960s, and is still used.",
    "url": "https://en.wikipedia.org/wiki/PL/I",
    "language_short": "",
    "code": "Hello2: proc options(main);\r\n    put list ('Hello World');\r\nend Hello2;"
  },
  {
    "id": "732",
    "title": "PLSQL (PL/SQL)",
    "description": "PL/SQL (Procedural Language for SQL) is Oracle Corporation's procedural extension for SQL and the Oracle relational database. PL/SQL is available in Oracle Database (since version 6 - stored PL/SQL procedures/functions/packages/triggers since version 7), Times Ten in-memory database (since version 11.2.1), and IBM DB 2 (since version 9.7). Oracle Corporation usually extends PL/SQL functionality with each successive release of the Oracle Database.",
    "url": "https://en.wikipedia.org/wiki/PL/SQL",
    "language_short": "pgsql",
    "code": "begin\r\n    dbms_output.put_line('Hello World');\r\nend;\r\n/"
  },
  {
    "id": "733",
    "title": "PlusOrMinus",
    "description": "PlusOrMinus (POM) is an esoteric programming language by User:PythonshellDebugwindow.",
    "url": "https://esolangs.org/wiki/PlusOrMinus",
    "language_short": "brainfuck",
    "code
  },
  {
    "id": "734",
    "title": "Pluvo",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "say \"Hello World\""
  },
  {
    "id": "735",
    "title": "Poetic",
    "description": "Poetic is an esoteric programming language created by User:JWinslow23 in 2018. It is a derivative of brainfuck that encodes instructions into the lengths of words. Programs generally look like abstract poetry, and upon execution, they are turned into a list of numbers denoting the lengths of the words, and then executed as instructions.",
    "url": "https://esolangs.org/wiki/Poetic",
    "language_short": "",
    "code": "the proverbial \"unconsciousness\"\r\n\r\ni was already aware\r\ni had understood fully\r\n\r\ni saw the devil\r\ni was perfectly still\r\ninvoluntarily i paused\r\n\r\nthere said i:\r\nmy sheer consciousness\r\nof certain given circumstances\r\ni noticed\r\nit's nothing\r\n      nothing\r\n      nothing any man wouldn't learn\r\n\r\na way of finding these\r\ni know not\r\n\r\nnothing common or typical\r\nand yet (somehow)\r\nvery little thought\r\nwill normally resolve every contradiction\r\n\r\na foolish heart -> an eternal misfortune"
  },
  {
    "id": "736",
    "title": "PokéBattle",
    "description": "PokeBattle is a programming language designed so that the program looks like the transcript of a Pokemon battle.",
    "url": "https://esolangs.org/wiki/Pok%C3%A9Battle",
    "language_short": "",
    "code": "Trainer 1: Alice\r\n Togepi\r\n Emolga\r\n Talonflame\r\n Rhyperior\r\n Abra\r\n Pikachu\r\nTrainer 2: Bob\r\n Yveltal\r\n Raichu\r\n Oranguru\r\n Nidoqueen\r\n Incineroar\r\n Avalugg \r\n‌\r\nBattle Start!\r\nTurn 0:\r\n Alice: Rhyperior Go!\r\n Bob: Avalugg Go!\r\n\r\nTurn 1:\r\n Rhyperior uses Absorb!\r\n Avalugg uses Absorb!\r\n\r\nTurn 2:\r\n Rhyperior uses Absorb!\r\n Avalugg uses Absorb!\r\n\r\nTurn 3:\r\n Rhyperior uses Absorb!\r\n Avalugg uses Absorb!\r\n\r\nTurn 4:\r\n Alice uses Max Potion!\r\n Avalugg uses Tackle! It's not very effective.\r\n\r\nTurn 5:\r\n Rhyperior uses Flamethrower!\r\n Avalugg uses Splash!\r\n\r\nTurn 6:\r\n Rhyperior uses Swords Dance!\r\n Avalugg uses Swords Dance!\r\n\r\nTurn 7:\r\n Rhyperior uses Tackle! It's not very effective.\r\n Bob uses Max Potion!\r\n\r\nTurn 8:\r\n Rhyperior uses Skill Swap!\r\n Avalugg uses Swords Dance!\r\n\r\nTurn 9:\r\n Rhyperior uses Swords Dance!\r\n Bob uses Hyper Potion!\r\n\r\nTurn 10:\r\n Rhyperior uses Tackle! It's not very effective.\r\n Avalugg uses Swords Dance!\r\n\r\nTurn 11:\r\n Alice: That's enough! Go Pikachu!\r\n Bob uses Max Potion!\r\n\r\nTurn 12:\r\n Alice uses Max Potion! \r\n Avalugg uses Tackle! It's not very effective.\r\n\r\nTurn 13:\r\n Alice uses Max Potion!\r\n Avalugg uses Splash!\r\n\r\nTurn 14:\r\n Alice uses Max Potion!\r\n Avalugg uses Splash!\r\n\r\nTurn 15:\r\n Alice uses Max Potion!\r\n Avalugg uses Splash!\r\n\r\nTurn 16:\r\n Alice uses Max Potion!\r\n Avalugg uses Splash!\r\n\r\nTurn 17:\r\n Pikachu uses Swords Dance!\r\n Avalugg uses Flamethrower!\r\n\r\nTurn 18:\r\n Pikachu uses Splash!\r\n Avalugg uses Flamethrower! It's super effective!\r\n\r\nTurn 19:\r\n Pikachu uses Swords Dance!\r\n Avalugg uses Swords Dance!\r\n\r\nTurn 20:\r\n Pikachu uses Flamethrower! It's super effective!\r\n Avalugg uses Swords Dance!\r\n\r\nTurn 21:\r\n Pikachu uses Tackle! It's not very effective.\r\n Bob uses Hyper Potion!\r\n\r\nTurn 22:\r\n Alice: That's enough! Go Rhyperior!\r\n Avalugg uses Swords Dance!\r\n\r\nTurn 23:\r\n Rhyperior uses Swords Dance!\r\n Avalugg uses Flamethrower! It's super effective!\r\n\r\nTurn 24:\r\n Rhyperior uses Swords Dance!\r\n Avalugg uses Splash!\r\n\r\nTurn 25:\r\n Alice: That's enough! Go Pikachu!\r\n Avalugg uses Splash!\r\n\r\nTurn 26:\r\n Alice uses Potion!\r\n Avalugg uses Splash!\r\n\r\nTurn 27:\r\n Alice uses Swords Dance!\r\n Avalugg uses Splash!\r\n\r\nBattle End!\r\nWinner: Alice"
  },
  {
    "id": "737",
    "title": "Polynomial",
    "description": "Polynomial is an esoteric language created by User:Maedhros777. It is designed in such a way that each program is simply a polynomial function, where all of the language statements are done by the zeroes of the function. Therefore, Polynomial programs are often very difficult to understand, due to the time-consuming nature of finding the zeroes of a function with high degree.",
    "url": "https://esolangs.org/wiki/Polynomial",
    "language_short": "brainfuck",
    "code": "f(x) = x^50 - 752x^49 + 141960856x^48 - 97823530588x^47 + 6924620364389108x^46 - 4341495724143788540x^45 + 138060613405951923767380x^44 - 79197535132424777586735700x^43 + 979470645655071268126749786680x^42 - 513709357652108230631577128358860x^41 + 770486975689768419626951634418461748x^40 - 273098373735611746286126693707899401476x^39 + 72291664762156559225098986515946802509588x^38 - 14676371828550521943557197189472305446692764x^37 + 2471742454496740843240034728256092024085665124x^36 - 357063163931791512794128153482861289523023882820x^35 + 45115851521103966434436591937303467605719233317170x^34 - 5069635951879805027132623517548283799346981648434460x^33 + 511526544745104457693634223308476770566099272565371060x^32 - 46728094385862876640770832231671877988577394475660885100x^31 + 3886421195321910267418249490411801624852449948925639780700x^30 - 295635895529267179921164468879651662866454307976481821361700x^29 + 20633888636784455204085657939750648669099906931549131855360060x^28 - 1324758206148788859378449344375818925652874503976726821800318620x^27 + 78373487486427853675250519103675553581406450490324786426443578960x^26 - 4277231098063905708498485183459770277016249837260045512086373052580x^25 + 215527455786956603087839057660424758386928544182537723602033298390620x^24 - 10026110853984647107902422007895365708427081026500238164561801279215980x^23 + 430739270392505977394209904953365441102532225723377537121532050266775740x^22 - 17069848872478164030368242448759544641115144627455141327323776464849764020x^21 + 623936547617549209386439841779658427511784043378068133194757937607564613452x^20 - 20993646278144108287371096576875982712212020201505201591115504952836958294764x^19 + 649720717047168714688810604703691057371212844616863730695724642230626940206117x^18 - 18454026326119048562742802386720336605855036106533711987860949339189893357832516x^17 + 480018892566368384981391161715990091416104911769766606211141965273638983019962276x^16 - 11414153815128096188736407808171635605448552508496871507135456079041095632029582920x^15 + 247119850164804163572258046131475110258272489534699880387365447880963300945559555680x^14 - 4862888340475792547245763823711545181858124995375533140243229121347892936079946665360x^13 + 86558002997403388455068105800951021320526816961235127777233671733610160673351674179520x^12 - 1386482271878483438155022114100676424860940250972419166903097785395468148849738551671520x^11 + 19959534586392149266660053142048372043141602919486809273490667168324165973826526352280224x^10 - 253920856155736764038716331406024220136995093667781379719894495826380342450009767792895808x^9 + 2887129000992839385500945493765474545949855475497573514091738434731704727401676275341829504x^8 - 28042509855580438356130080622916737041825853230142162026166889394236138282841003530143152512x^7 + 243032092343346343074179476562493169914690027874421758235567822233002208656757155592889900032x^6 - 1676296630217806396090935946022990777465901542969002129717262721145539754562003915533804752640x^5 + 10587973167254746886025389198053813468704398306519586773922038052938514572005258639168462438400x^4 - 43524882144413253508544104946208809101516451661691038559426656724816915089318151748332891328000x^3 + 204551020411993140063611540392697605993557638942587387542307354260755646692402296279038165920000x^2 - 274800267060219615571000061411061421786428150600591471312149973459733252174021048995828038400000x + 1142695050742106476607449533181123418012829436119125708025689288735734639370685118360020240000000"
  },
  {
    "id": "738",
    "title": "Pony",
    "description": "Pony is an open-source, object-oriented, actor model, capabilities-secure, high-performance programming language. The actor model is particularly borrowed extensively from Erlang. The stated goals of pony are to provide concurrency protection by creating restriction keys. ",
    "url": "https://everipedia.org/wiki/lang_en/pony-programming-language",
    "language_short": "pony",
    "code": "actor Main\r\nnew create(env: Env) =>\r\n    env.out.print(\"Hello World\")"
  },
  {
    "id": "739",
    "title": "Portugol",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "algoritmo \"Hello World\"\r\n// Função: Hello World\r\n// Autor: d3z40\r\n// Data: 22/08/2018\r\n// Seção de Declarações\r\n \r\nvar\r\n    \r\ninicio\r\n// Seção de Comandos\r\nescreva (\"Hello World!\")\r\nfimalgoritmo"
  },
  {
    "id": "740",
    "title": "PostCSS",
    "description": "PostCSS is a software development tool that uses JavaScript-based plugins to automate routine CSS operations. It was designed by Andrey Sitnik with the idea taking its origin in his front-end work for Evil Martians.",
    "url": "https://en.wikipedia.org/wiki/PostCSS",
    "language_short": "css",
    "code": "body::before {\r\n    content: \"Hello World\";\r\n}"
  },
  {
    "id": "741",
    "title": "Postgre SQL (PostgreSQL / PL/pgSQL)",
    "description": "PL/pgSQL (Procedural Language/PostgreSQL) is a procedural programming language supported by the PostgreSQL ORDBMS. It closely resembles Oracle's PL/SQL language. Implemented by Jan Wieck, PL/pgSQL first appeared with PostgreSQL 6.4, released on October 30, 1998. Version 9 also implements some ISO SQL/PSM features, like overloading of SQL-invoked functions and procedures.",
    "url": "https://en.wikipedia.org/wiki/PL/pgSQL",
    "language_short": "pgsql",
    "code": "SELECT 'Hello World' as hello_message;"
  },
  {
    "id": "742",
    "title": "PostScript",
    "description": "PostScript (PS) is a page description language in the electronic publishing and desktop publishing business. It is a dynamically typed, concatenative programming language. It was created at Adobe Systems by John Warnock, Charles Geschke, Doug Brotz, Ed Taft and Bill Paxton from 1982 to 1984.",
    "url": "https://en.wikipedia.org/wiki/PostScript",
    "language_short": "actionscript",
    "code": "% run> gs -q -sDEVICE=nullpage postscript.ps\r\n(Hello world!\\n) print quit"
  },
  {
    "id": "743",
    "title": "PostScript Page",
    "description": "PostScript (PS) is a page description language in the electronic publishing and desktop publishing business. It is a dynamically typed, concatenative programming language. It was created at Adobe Systems by John Warnock, Charles Geschke, Doug Brotz, Ed Taft and Bill Paxton from 1982 to 1984.",
    "url": "https://en.wikipedia.org/wiki/PostScript",
    "language_short": "actionscript",
    "code": "% run> gs -q postscript_page.ps\r\n/pt {72 div} def\r\n/y 9 def\r\n/textdraw {/Courier findfont 12 pt scalefont setfont 8 pt y moveto show} def\r\n \r\n72 72 scale\r\n0 0 0 setrgbcolor\r\n \r\n(Hello world!) textdraw\r\nshowpage\r\nquit"
  },
  {
    "id": "744",
    "title": "PosXML",
    "description": "POSXML (acronym for Point Of Sale eXtended Markup Language) is a programming language, based on XML, that is used to create applications for a POS terminal. Normally the programming language used to develop such applications is C or C++. The main purpose of POSXML is to simplify the development of applications for POS terminals. It contains a set of instructions and pre-programmed commands, which allow direct interaction with the machine, resulting in a large reduction in application development time.",
    "url": "https://en.wikipedia.org/wiki/POSXML",
    "language_short": "xml",
    "code": "<display line=\"0\" column=\"0\" message=\"Hello World\" />"
  },
  {
    "id": "745",
    "title": "Potaka",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "দেখাও(\"Hello World\");"
  },
  {
    "id": "746",
    "title": "Potigol",
    "description": "",
    "url": "",
    "language_short": "javascript",
    "code": "escreva \"Hello World\""
  },
  {
    "id": "747",
    "title": "Powder",
    "description": "Powder is an inefficient and lightweight esoteric programming language based on defining tables by User:A. This is created to provide an example of a lightweight and extensible general-purpose programming language. (In this case, it creates an object-oriented notation using tags.) This is partly influenced by JSON's structure.",
    "url": "https://esolangs.org/wiki/Powder",
    "language_short": "json",
    "code": "{\r\n    \"Output\" :\r\n    {\r\n        \"1\" : 72,\r\n        \"2\" : 101,\r\n        \"3\" : 108,\r\n        \"4\" : 108,\r\n        \"5\" : 111,\r\n        \"6\" : 44,\r\n        \"7\" : 32,\r\n        \"8\" : 119,\r\n        \"9\" : 111,\r\n        \"10\" : 114,\r\n        \"11\" : 108,\r\n        \"12\" : 100\r\n        \"13\" : 33\r\n    }\r\n}"
  },
  {
    "id": "748",
    "title": "PowerShell",
    "description": "PowerShell is a task automation and configuration management framework from Microsoft, consisting of a command-line shell and the associated scripting language.",
    "url": "https://en.wikipedia.org/wiki/PowerShell",
    "language_short": "powershell",
    "code": "'Hello World'"
  },
  {
    "id": "749",
    "title": "Prelude",
    "description": "Prelude is an esoteric programming language created by Nikita Ayzikovsky in 2005. It uses several \"voices\", or \"parts\", each with its own stack, executing instructions in parallel. It is Turing-complete (it is trivial to compile Brainfuck into Prelude using just two voices).",
    "url": "https://esolangs.org/wiki/Prelude",
    "language_short": "brainfuck",
    "code": "...8+.!v...4+.1+!..v!..vvv...4+.!vvv.....9+.3-!###!..v6-!..vv..v\r\n9+(1-)^#7+(1-)..^7+!^3+!##8+(1-)^###9+1+(1-)..^^^^^3+!..^8-!#1+!"
  },
  {
    "id": "750",
    "title": "Printscript",
    "description": "Printscript is an esoteric programming language invented by User:A. It is inspired by Lua. This programming language supports the \"print\" function and many others.",
    "url": "https://esolangs.org/wiki/Printscript",
    "language_short": "javascript",
    "code": "print \"Hello, world!\""
  },
  {
    "id": "751",
    "title": "Processing",
    "description": "Processing is a free graphical library and integrated development environment (IDE) built for the electronic arts, new media art, and visual design communities with the purpose of teaching non-programmers the fundamentals of computer programming in a visual context.",
    "url": "https://en.wikipedia.org/wiki/Processing_(programming_language)",
    "language_short": "processing",
    "code": "size(128, 128);\r\nbackground(0);\r\ntextAlign(CENTER, CENTER);\r\nfill(255);\r\ntext(\"Hello World\", width / 2, height / 2);"
  },
  {
    "id": "752",
    "title": "Profan",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print \"Hello World\""
  },
  {
    "id": "753",
    "title": "ProgFk",
    "description": "ProgFk is a language created by David Catt (User:David.werecat) using nibbles as instructions and having theoretically infinite bitwise memory.",
    "url": "https://esolangs.org/wiki/ProgFk",
    "language_short": "plaintext",
    "code": "14 11 14 11 11 14 14 11 14 11 41 14 14 11 41 41 11 14 14 11 41 41 11 14 14 11 41 41 41 41 11 41 14 14 11 11\r\n14 11 11 11 14 14 14 11 41 41 41 14 14 11 41 41 41 41 14 14 14 11 14 11 14 14 11 41 41 11 14 14 11 14 11 11\r\n14 11 11 14 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\r\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 27 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11\r\n11 17 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11 11 17 11 11 11 11 71 11 11\r\n11 17 11 11 11 11 F0"
  },
  {
    "id": "754",
    "title": "Prolog",
    "description": "Prolog is a logic programming language associated with artificial intelligence and computational linguistics.",
    "url": "https://en.wikipedia.org/wiki/Prolog",
    "language_short": "prolog",
    "code": "helloWorld :-\r\n    write('Hello World').\r\n \r\n:- helloWorld."
  },
  {
    "id": "755",
    "title": "Promela",
    "description": "PROMELA (Process or Protocol Meta Language) is a verification modeling language introduced by Gerard J. Holzmann. The language allows for the dynamic creation of concurrent processes to model, for example, distributed systems. In PROMELA models, communication via message channels can be defined to be synchronous (i.e., rendezvous), or asynchronous (i.e., buffered). PROMELA models can be analyzed with the SPIN model checker, to verify that the modeled system produces the desired behavior. An implementation verified with Isabelle/HOL is also available, as part of the Computer Aided Verification of Automata project.",
    "url": "https://en.wikipedia.org/wiki/Promela",
    "language_short": "",
    "code": "active proctype main(){\r\n  printf(\"Hello World\")\r\n}"
  },
  {
    "id": "756",
    "title": "ProvideX",
    "description": "ProvideX is a computer language and development environment derived from Business Basic (a business oriented derivative of BASIC) in the mid-1980s.",
    "url": "https://en.wikipedia.org/wiki/ProvideX",
    "language_short": "",
    "code": "begin\r\n  print \"Hello World\"\r\nend"
  },
  {
    "id": "757",
    "title": "PUBERTY",
    "description": "PUBERTY is a language created by User:Izumariu in 2018 with the intention to create a language that resembles a pubertal masturbation procedure. It is not intended to find use in public business. The language was written to explore a new way of programming.",
    "url": "https://esolangs.org/wiki/PUBERTY",
    "language_short": "plaintext",
    "code": "It is June 12, 2018, 03:02:04 PM. Izu is in his bed, bored. His secret kinks are vore, fatfurs, inflation, growth and kitsunes. \nThen he spots fatfurs. Soon the following sounds become audible. \n\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap yes fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap yes yeah yeah yeah yes yes fap fap fap yes yEAH YeaH \nfAtfURs,hNNg yEAH fap fap inflation,hnng yeah fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap vore,hnng \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap yeah fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap vore,hnng fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap yeah ugh fap fap fap fap fap\nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fatfurs,hnng yeah fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap fap \nfap fap fap fap fap fap fap fap fap vore,hnng yeah squirt ugh \ngrowth,hnng kitsunes,fuck yes sigh"
  },
  {
    "id": "758",
    "title": "Pug",
    "description": "Pugs is a compiler and interpreter for the Raku programming language, started on February 1, 2005, by Audrey Tang. (At the time, Raku was known as Perl 6.)",
    "url": "https://en.wikipedia.org/wiki/Pugs_(programming)",
    "language_short": "",
    "code": "doctype html\r\nhtml\r\n    head\r\n        title Hello World\r\n    body\r\n        h1 Hello World"
  },
  {
    "id": "759",
    "title": "Pure Data",
    "description": "Pure Data (Pd) is a visual programming language developed by Miller Puckette in the 1990s for creating interactive computer music and multimedia works. While Puckette is the main author of the program, Pd is an open-source project with a large developer base working on new extensions. It is released under a license similar to the BSD license. It runs on Linux, Mac OS X, iOS, Android and Windows. Ports exist for FreeBSD and IRIX.",
    "url": "https://en.wikipedia.org/wiki/Pure_Data",
    "language_short": "plaintext",
    "code": "#N canvas 1029 457 450 300 10;\r\n#X obj 127 132 print;\r\n#X msg 127 86 Hello world!;\r\n#X connect 1 0 0 0;"
  },
  {
    "id": "760",
    "title": "PureBasic",
    "description": "PureBasic is a commercially distributed procedural computer programming language and integrated development environment based on BASIC and developed by Fantaisie Software for Windows 32/64-bit, Linux 32/64-bit, and macOS. An Amiga version is available, although it has been discontinued and some parts of it are released as open source. The first public release of PureBasic for Windows was on 17 December 2000. It has been continually updated since.",
    "url": "https://en.wikipedia.org/wiki/PureBasic",
    "language_short": "purebasic",
    "code": "If OpenConsole()\r\n    PrintN(\"Hello World\")\r\nEndIf"
  },
  {
    "id": "761",
    "title": "PureScript",
    "description": "PureScript is a strongly-typed, purely-functional programming language that compiles to JavaScript. It can be used to develop web applications, server side apps, and also desktop applications with use of Electron. Its syntax is mostly comparable to that of Haskell. In addition, it introduces row polymorphism and extensible records. Also, contrary to Haskell, PureScript adheres to a strict evaluation strategy.",
    "url": "https://en.wikipedia.org/wiki/PureScript",
    "language_short": "purebasic",
    "code": "module Main where\r\n \r\nimport Debug.Trace\r\n \r\nmain = trace \"Hello, World!\"\r\n"
  },
  {
    "id": "762",
    "title": "PureStack",
    "description": "PureStack is an esoteric, stack-based, mostly higher level programming language created by User:iownpants in 2009. It is designed with the intention of satisfying two principles: basing the language on only stacks and allowing no pointer or array type manipulation by the basic instructions, as well as maintaining an esoteric style while providing a number of useful, higher-level capabilities for programming. It is currently not implemented, and some of the specification is unclear. It requires further revision in order to function properly under all conditions.",
    "url": "https://esolangs.org/wiki/PureStack",
    "language_short": "brainfuck",
    "code": "\"Hello, World!\"\r\n!~"
  },
  {
    "id": "763",
    "title": "Purple",
    "description": "Purple is a self-modifying tarpit intended as a minimization of Aubergine created by User:Quintopia in 2015, as a program of repeatedly staying up late at night to create Aubergine derivatives. It was created after noticing that Aubergine's conditional jump was unnecessary for Turing-completeness, and that the functionality of the remaining instructions could be captured in a single instruction with one additional argument, and that said instruction would no longer require an identifying character, so that each instruction would continue to occupy three bytes.",
    "url": "https://esolangs.org/wiki/Purple",
    "language_short": "brainfuck",
    "code": "aA1aa1oA0bi0b0bb1bbbAiB0 Purple is the awesomest, so why haven't you tried it yet?\r\n!dlroW ,olleH"
  },
  {
    "id": "764",
    "title": "Pxem",
    "description": "Pxem(pronunciation is not specified, but author personally pronounces \"ペクシム\", which is pronounced like:pay-coo-she-moo) is a programming language designed by \"ぬこ\"(Romanization:Nuko) or \"nk.\". It is said that its name \"Pxem\" does not have any meanings. It was named because \"it's easy to type its name with keyboard.\"",
    "url": "https://esolangs.org/wiki/Pxem",
    "language_short": "brainfuck",
    "code": "Hello.p\tPrints \"Hello\"\r\nAa.-\tMakes ' '\r\nAm.-\tMakes ','\r\n.p\tPrints \", \"\r\nworld.p\tPrints \"world\"\r\nak.-\tMakes '\\n'\r\nAb.-\tMakes '!'\r\n.p\tPrints \"!\\n\"\r\nxe"
  },
  {
    "id": "765",
    "title": "pyhton (sic)",
    "description": "pyhton [sic] is an esoteric programming language created by Something Fawful. It is technically the second language he has created, but the interpreter for Pyhton [sic] has been easier to get working, and is somewhat easier to explain so it is being uploaded first. The language's name is an intentional typo of Python, including a [sic] afterwords, so that if you are quoting someone who spelled Python as Pyhton, it will be impossible to tell if it is referring to Pyhton [sic] or Python. pyhton [sic]'s name should be in lower case at the start of a sentence, and with an uppercase p otherwise.",
    "url": "https://esolangs.org/wiki/Pyhton_(sic)",
    "language_short": "Python",
    "code": "6>^5165_~h1'>>6(I()5<11'h?~|8"
  },
  {
    "id": "766",
    "title": "pyret",
    "description": "Pyret is a programming language designed to serve as an outstanding choice for programming education while exploring the confluence of scripting and functional programming. It's under active design and development, and free to use or modify.",
    "url": "https://www.pyret.org/",
    "language_short": "c-like",
    "code": "print('Hello, World!')"
  },
  {
    "id": "767",
    "title": "Pyth",
    "description": "Pyth is a procedural programming language which is designed to be compiled into Python. It is created by isaacg in 2014. Its primary purpose is conciseness, without sacrificing clarity. It is primarily used for code-golfing.",
    "url": "https://esolangs.org/wiki/Pyth",
    "language_short": "plaintext",
    "code": "\"Hello, World!"
  },
  {
    "id": "768",
    "title": "Python",
    "description": "Python is an interpreted high-level general-purpose programming language. Python's design philosophy emphasizes code readability with its notable use of significant indentation. Its language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.",
    "url": "https://en.wikipedia.org/wiki/Python_(programming_language)",
    "language_short": "python",
    "code": "#!/usr/bin/env python\r\nprint(\"Hello World\")"
  },
  {
    "id": "769",
    "title": "Python 3",
    "description": "Python is an interpreted high-level general-purpose programming language. Python's design philosophy emphasizes code readability with its notable use of significant indentation. Its language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.",
    "url": "https://en.wikipedia.org/wiki/Python_(programming_language)",
    "language_short": "python",
    "code": "#!/usr/bin/env python3\r\nprint \"Hello World\""
  },
  {
    "id": "770",
    "title": "Q",
    "description": "Q is a programming language for array processing, developed by Arthur Whitney. It is proprietary software, commercialized by Kx Systems. Q serves as the query language for kdb+, a disk based and in-memory, column-based database. Kdb+ is based on the language k, a terse variant of the language APL. Q is a thin wrapper around k, providing a more readable, English-like interface.",
    "url": "https://en.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems)",
    "language_short": "q",
    "code": "\"Hello World!\""
  },
  {
    "id": "771",
    "title": "Q# (QSharp)",
    "description": "Q# (pronounced as Q sharp) is a domain-specific programming language used for expressing quantum algorithms. It was initially released to the public by Microsoft as part of the Quantum Development Kit.",
    "url": "https://en.wikipedia.org/wiki/Q_Sharp",
    "language_short": "c-like",
    "code": "namespace Quantum.HelloWorld\r\n{\r\n    operation HelloWorld () : (String)\r\n    {\r\n        body\r\n        {\r\n            return (\"Hello, World!\");\r\n        }\r\n    }\r\n}"
  },
  {
    "id": "772",
    "title": "QBasic",
    "description": "QBasic is an integrated development environment (IDE) and interpreter for a variety of dialects of BASIC which are based on QuickBASIC. Code entered into the IDE is compiled to an intermediate representation (IR), and this IR is immediately interpreted on demand within the IDE.",
    "url": "https://en.wikipedia.org/wiki/QBasic",
    "language_short": "basic",
    "code": "PRINT \"hello world\""
  },
  {
    "id": "773",
    "title": "QCL (Quantum Computation Language)",
    "description": "Quantum Computation Language (QCL) is one of the first implemented quantum programming languages. The most important feature of QCL is the support for user-defined operators and functions. Its syntax resembles the syntax of the C programming language and its classical data types are similar to primitive data types in C. One can combine classical code and quantum code in the same program.",
    "url": "https://en.wikipedia.org/wiki/Quantum_Computation_Language",
    "language_short": "",
    "code": "print \"Hello World\";"
  },
  {
    "id": "774",
    "title": "Qdeql",
    "description": "Qdeql is an esoteric programming language devised by Scott Feeney that provides a single queue of bytes as the only form of memory available to programs.",
    "url": "https://esolangs.org/wiki/Qdeql",
    "language_short": "brainfuck",
    "code": "---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- h\r\n---------- ---------- ---------- ---------- ----------\r\n--*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- e\r\n---------- ---------- ---------- ---------- ----------\r\n-----*\r\n \r\n-\\=/-\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- l\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- l\r\n---------- ---------- ---------- ---------- ----**\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- o\r\n---------- ---------- ---------- ---------- -----*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- space\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ----*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- w\r\n---------- ---------- ---------- -------*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- o\r\n---------- ---------- ---------- ---------- -----*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- r\r\n---------- ---------- ---------- ---------- --*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- l\r\n---------- ---------- ---------- ---------- --------*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- d\r\n---------- ---------- ---------- ---------- ----------\r\n------*\r\n \r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ---------- newline\r\n---------- ---------- ---------- ---------- ----------\r\n---------- ---------- ---------- ---------- ------*"
  },
  {
    "id": "775",
    "title": "Qore",
    "description": "Qore is an interpreted, high-level, general-purpose, garbage collected dynamic programming language, featuring support for code embedding and sandboxing with optional strong typing and a focus on fundamental support for multithreading and SMP scalability.",
    "url": "https://en.wikipedia.org/wiki/Qore_(programming_language)",
    "language_short": "c-like",
    "code": "#!/usr/bin/env qore\r\n%exec-class HelloWorld\r\nclass HelloWorld\r\n{\r\n    constructor()\r\n    {\r\n        background $$.say(\"Hello World\");\r\n    }\r\n    private say($$arg)\r\n    {\r\n        printf(\"%s\\n\", $$arg);\r\n    }\r\n}"
  },
  {
    "id": "776",
    "title": "QU",
    "description": "Qu is a computer programming language with an open-source interpreter written in C by Marc Krisnanto. It is comparable to Python, Ruby, Perl and many others. It is licensed under the GPL version 2.",
    "url": "https://handwiki.org/wiki/Qu_(programming_language)",
    "language_short": "plaintext",
    "code": "'Hello, World!'\r\ntest"
  },
  {
    "id": "777",
    "title": "QuakeC",
    "description": "QuakeC is a compiled language developed in 1996 by John Carmack of id Software to program parts of the video game Quake. Using QuakeC, a programmer is able to customize Quake to great extents by adding weapons, changing game logic and physics, and programming complex scenarios. It can be used to control many aspects of the game itself, such as parts of the AI, triggers, or changes in the level. The Quake engine was the only game engine to use QuakeC. Following engines used DLL game modules for customization written in C, and C++ from id Tech 4 on.",
    "url": "https://en.wikipedia.org/wiki/QuakeC",
    "language_short": "c-like",
    "code": "bprint(\"Hello World\\n\");"
  },
  {
    "id": "778",
    "title": "Quartz Composer (QuartzComposer)",
    "description": "Quartz Composer is a node-based visual programming language provided as part of the Xcode development environment in macOS for processing and rendering graphical data.",
    "url": "https://en.wikipedia.org/wiki/Quartz_Composer",
    "language_short": "xml",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n    <key>editorViewerWindow</key>\r\n    <string>202 156 512 430 0 0 1280 777 </string>\r\n    <key>frameworkVersion</key>\r\n    <string>334</string>\r\n    <key>rootPatch</key>\r\n    <dict>\r\n        <key>class</key>\r\n        <string>QCPatch</string>\r\n        <key>state</key>\r\n        <dict>\r\n            <key>connections</key>\r\n            <dict>\r\n                <key>connection_1</key>\r\n                <dict>\r\n                    <key>destinationNode</key>\r\n                    <string>Billboard_1</string>\r\n                    <key>destinationPort</key>\r\n                    <string>inputImage</string>\r\n                    <key>sourceNode</key>\r\n                    <string>TextImage_1</string>\r\n                    <key>sourcePort</key>\r\n                    <string>outputImage</string>\r\n                </dict>\r\n            </dict>\r\n            <key>nodes</key>\r\n            <array>\r\n                <dict>\r\n                    <key>class</key>\r\n                    <string>QCTextImage</string>\r\n                    <key>key</key>\r\n                    <string>TextImage_1</string>\r\n                    <key>state</key>\r\n                    <dict>\r\n                        <key>customInputPortStates</key>\r\n                        <dict>\r\n                            <key>inputGlyphSize</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>1.0</real>\r\n                            </dict>\r\n                            <key>inputHeight</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputKerning</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputLeading</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputWidth</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                        </dict>\r\n                        <key>fontName</key>\r\n                        <string>LucidaGrande</string>\r\n                        <key>fontSize</key>\r\n                        <real>1.0</real>\r\n                        <key>horizontalAlignment</key>\r\n                        <string>Centered</string>\r\n                        <key>ivarInputPortStates</key>\r\n                        <dict>\r\n                            <key>inputFontName</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <string>LucidaGrande</string>\r\n                            </dict>\r\n                            <key>inputGlyphSize</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>1.0</real>\r\n                            </dict>\r\n                            <key>inputHeight</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputKerning</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputLeading</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputString</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <string>Hello World!</string>\r\n                            </dict>\r\n                            <key>inputWidth</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                        </dict>\r\n                        <key>manualLayout</key>\r\n                        <false/>\r\n                        <key>userInfo</key>\r\n                        <data>\r\n                        BAtzdHJlYW10eXBlZIHoA4QBQISE\r\n                        hBNOU011dGFibGVEaWN0aW9uYXJ5\r\n                        AISEDE5TRGljdGlvbmFyeQCEhAhO\r\n                        U09iamVjdACFhAFpAZKEhIQITlNT\r\n                        dHJpbmcBlYQBKwhwb3NpdGlvboaS\r\n                        hISEB05TVmFsdWUAlYQBKoSEDHtD\r\n                        R1BvaW50PWRkfZuBHwKBuQCGhg==\r\n                        </data>\r\n                        <key>version</key>\r\n                        <integer>2</integer>\r\n                        <key>verticalAlignment</key>\r\n                        <string>Centered</string>\r\n                    </dict>\r\n                </dict>\r\n                <dict>\r\n                    <key>class</key>\r\n                    <string>QCBillboard</string>\r\n                    <key>key</key>\r\n                    <string>Billboard_1</string>\r\n                    <key>state</key>\r\n                    <dict>\r\n                        <key>CIRendering</key>\r\n                        <false/>\r\n                        <key>customInputPortStates</key>\r\n                        <dict>\r\n                            <key>inputScale</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>1.0</real>\r\n                            </dict>\r\n                        </dict>\r\n                        <key>ivarInputPortStates</key>\r\n                        <dict>\r\n                            <key>inputBlending</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <integer>1</integer>\r\n                            </dict>\r\n                            <key>inputColor</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <dict>\r\n                                    <key>alpha</key>\r\n                                    <real>1.0</real>\r\n                                    <key>blue</key>\r\n                                    <real>0.0</real>\r\n                                    <key>green</key>\r\n                                    <real>0.0</real>\r\n                                    <key>red</key>\r\n                                    <real>0.0</real>\r\n                                </dict>\r\n                            </dict>\r\n                            <key>inputPixelAligned</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputRotation</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputScale</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>1.0</real>\r\n                            </dict>\r\n                            <key>inputX</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                            <key>inputY</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <real>0.0</real>\r\n                            </dict>\r\n                        </dict>\r\n                        <key>optimizedRendering</key>\r\n                        <false/>\r\n                        <key>pixelAligned</key>\r\n                        <real>0.0</real>\r\n                        <key>sizeMode</key>\r\n                        <string>autoHeight</string>\r\n                        <key>systemInputPortStates</key>\r\n                        <dict>\r\n                            <key>_enable</key>\r\n                            <dict>\r\n                                <key>value</key>\r\n                                <true/>\r\n                            </dict>\r\n                        </dict>\r\n                        <key>userInfo</key>\r\n                        <data>\r\n                        BAtzdHJlYW10eXBlZIHoA4QBQISE\r\n                        hBNOU011dGFibGVEaWN0aW9uYXJ5\r\n                        AISEDE5TRGljdGlvbmFyeQCEhAhO\r\n                        U09iamVjdACFhAFpAZKEhIQITlNT\r\n                        dHJpbmcBlYQBKwhwb3NpdGlvboaS\r\n                        hISEB05TVmFsdWUAlYQBKoSEDHtD\r\n                        R1BvaW50PWRkfZuB+gKBuQCGhg==\r\n                        </data>\r\n                        <key>version</key>\r\n                        <integer>4</integer>\r\n                    </dict>\r\n                </dict>\r\n            </array>\r\n            <key>userInfo</key>\r\n            <data>\r\n            BAtzdHJlYW10eXBlZIHoA4QBQISEhBNOU011dGFibGVEaWN0aW9u\r\n            YXJ5AISEDE5TRGljdGlvbmFyeQCEhAhOU09iamVjdACFhAFpA5KE\r\n            hIQITlNTdHJpbmcBlYQBKwp6b29tRmFjdG9yhpKEhIQITlNOdW1i\r\n            ZXIAhIQHTlNWYWx1ZQCVhAEqhIQBZpwBhpKEl5gJc2Nyb2xsaW5n\r\n            hpKEmpuEhAx7Q0dQb2ludD1kZH2dgwAAAAAATIBAgUYBhpKEl5gI\r\n            cG9zaXRpb26GkoSam56dAAWGhg==\r\n            </data>\r\n        </dict>\r\n    </dict>\r\n</dict>\r\n</plist>"
  },
  {
    "id": "779",
    "title": "Qugord",
    "description": "Qugord (or \"Doorspace\") is an Esoteric programming language by David Catt (user:David.werecat) where the program is a series of doors and everything is stored in arrays.",
    "url": "https://esolangs.org/wiki/Qugord",
    "language_short": "plaintext",
    "code": "~group hello from %2 to %14 also affect hello into \"Hello, world!\" also each hello into 0 task give 0 to 1 also at 1 join 1 and %1\r\n~publish also split hello"
  },
  {
    "id": "780",
    "title": "Quipu",
    "description": "Quipu is an esoteric programming language inspired by Quipus (also known as \"talking knots\") – recording devices historically used by Incas. Quipu was originally designed by Vladimir Kostyukov in Jan 2013.",
    "url": "https://esolangs.org/wiki/Quipu",
    "language_short": "brainfuck",
    "code": "'H\r\n'e\r\n'l\r\n'l\r\n'o\r\n' \r\n'W\r\n'o\r\n'r\r\n'l\r\n'd\r\n'!\r\n\\n\r\n/\\"
  },
  {
    "id": "781",
    "title": "Quorum",
    "description": "Quorum is the first evidence-oriented programming language. Try it now free for coding games, LEGO, digital signal processing, physics, and more!",
    "url": "https://quorumlanguage.com/",
    "language_short": "",
    "code": "output \"Hello World\""
  },
  {
    "id": "782",
    "title": "QWERTY",
    "description": "QWERTY (/ˈkwɜːrti/) is a keyboard design for Latin-script alphabets. The name comes from the order of the first six keys on the top left letter row of the keyboard (Q W E R T Y). The QWERTY design is based on a layout created for the Sholes and Glidden typewriter and sold to E. Remington and Sons in 1873. It became popular with the success of the Remington No. 2 of 1878, and remains in ubiquitous use.",
    "url": "https://en.wikipedia.org/wiki/QWERTY",
    "language_short": "",
    "code": "begin\r\n  ?hello = \"Hello World\"\r\n  if 1 == 1 then\r\n    output ?hello\r\n  fi\r\nend"
  },
  {
    "id": "783",
    "title": "R",
    "description": "R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Polls, data mining surveys, and studies of scholarly literature databases show substantial increases in popularity; as of April 2021, R ranks 16th in the TIOBE index, a measure of popularity of programming languages.",
    "url": "https://en.wikipedia.org/wiki/R_(programming_language)",
    "language_short": "r",
    "code": "cat(\"Hello world\\n\")"
  },
  {
    "id": "784",
    "title": "Racket",
    "description": "Racket is a general-purpose, multi-paradigm programming language based on the Scheme dialect of Lisp. It is designed as a platform for programming language design and implementation. In addition to the core Racket language, Racket is also used to refer to the family of programming languages and set of tools supporting development on and with Racket. Racket is also used for scripting, computer science education, and research.",
    "url": "https://en.wikipedia.org/wiki/Racket_(programming_language)",
    "language_short": "plaintext",
    "code": "#lang racket\r\n\"Hello world\""
  },
  {
    "id": "785",
    "title": "Radixal (Radixal!!!!)",
    "description": "Radixal!!!! is an esoteric language created collaboratively by the #esoteric IRC channel on 7 December 2012. The details of the spec were mostly worked out by User:ais523. The language revolves around having a numerical representation that can't represent certain numbers, and commands that are specifically designed to be awkward to use, while still quite powerful. Therefore, it can be considered to be in the same family as Malbolge and Dis, although probably rather easier, and without exactly the same purpose.",
    "url": "https://esolangs.org/wiki/Radixal!!!!",
    "language_short": "plaintext",
    "code": "1 3 2 44 15 27 15 4 2 34 15 34 15 4 4 121 15 4 2 8 15\r\n4 4 45 15 121 15 3 4 56 15 1102 15 46 15 3 2 15 15 3 4 5 15"
  },
  {
    "id": "786",
    "title": "Raffalang",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "TODO MUNDO FALA DE MIM \"Hello World\" BRO;"
  },
  {
    "id": "787",
    "title": "Rafflalang",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "TODO MUNDO FALA DE MIM \"Hello World\" BRO;"
  },
  {
    "id": "788",
    "title": "Raku",
    "description": "Raku is a member of the Perl family of programming languages. Formerly known as Perl 6, it was renamed in October 2019. Raku introduces elements of many modern and historical languages. Compatibility with Perl was not a goal, though a compatibility mode is part of the specification. The design process for Raku began in 2000.",
    "url": "https://en.wikipedia.org/wiki/Raku_(programming_language)",
    "language_short": "",
    "code": "say \"Hello World\";"
  },
  {
    "id": "789",
    "title": "RANDo",
    "description": "Language RANDo was created User:Kamish.",
    "url": "https://esolangs.org/wiki/RANDo",
    "language_short": "plaintext",
    "code": "rrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrndo\r\nrrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrnrrrnrnanananrnando\r\nrrrrrrrrrrnrrrrrrrrrrnrrrrrrrrrrrrrrrnaaaaaanaaaaaando\r\nrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrrrrrnrrnrndo\r\nrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrrrrrnrrnrndo\r\nond\r\nrrrrrrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrrrrrnrrrrnrnaananando\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrnrrrrrnrnrnaanananrnaanananando\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrnrrrrrrrrrrnrnananrnrnando\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrnaaaaanaaaaanrnrnando\r\nrrrrrrrrrrrrrrrrrrrrnrrrrrrrnrnrnanananando"
  },
  {
    "id": "790",
    "title": "RASEL (Random Access Stack Esoteric Language)",
    "description": "RASEL (Random Access Stack Esoteric Language) is a fungeoid esoteric programming language. RASEL code is laid out on a two-dimensional, rectangular (and effectively toroidal) program space of instructions, each represented by a single ASCII character, lines separated by newlines. Unlike Befunge, RASEL is not self-modifying, that is, the instructions cannot change after the program is loaded. The additional ability of random read access to the stack is added instead. Stack data type is Rational while numerators and denominators are bignums. That means precision is limited only by the available memory of the host system, and there should be no rounding errors.",
    "url": "https://esolangs.org/wiki/RASEL",
    "language_short": "",
    "code": "A\"!dlroW ,olleH\">:?@,Hj"
  },
  {
    "id": "791",
    "title": "RatFor",
    "description": "Ratfor (short for Rational Fortran) is a programming language implemented as a preprocessor for Fortran 66. It provides modern control structures, unavailable in Fortran 66, to replace GOTOs and statement numbers.",
    "url": "https://en.wikipedia.org/wiki/Ratfor",
    "language_short": "c-like",
    "code": "print *, 'Hello, world'\r\nend"
  },
  {
    "id": "792",
    "title": "React",
    "description": "React (also known as React.js or ReactJS) is an open-source, front end, JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. However, React is only concerned with state management and rendering that state to the DOM, so creating React applications usually requires the use of additional libraries for routing, as well as certain client-side functionality.",
    "url": "https://en.wikipedia.org/wiki/React_(JavaScript_library)",
    "language_short": "javascript",
    "code": "//simple react component that renders \"Hello World\" as an H1 tag into the body \r\n \r\nReact.render(<h1>Hello World</h1>, document.body);"
  },
  {
    "id": "793",
    "title": "React Native",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "import React from \"react\";\r\nimport { Text, View } from \"react-native\";\r\n\r\nexport default function HelloWorld() {\r\n    return (\r\n        <View>\r\n            <Text>Hello World</Text>\r\n        </View>\r\n    );\r\n}"
  },
  {
    "id": "794",
    "title": "React360",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "import React from \"react\";\r\nimport { AppRegistry, Text, View, StyleSheet } from \"react-360\";\r\n\r\nexport default class hello_world extends React.Component {\r\n    render() {\r\n        return (\r\n            <View style={styles.panel}>\r\n                <View style={styles.greetingBox}>\r\n                    <Text style={styles.greeting}>Hello World</Text>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    panel: {\r\n        // Fill the entire surface\r\n        width: 1000,\r\n        height: 600,\r\n        backgroundColor: \"rgba(255, 255, 255, 0.4)\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    greetingBox: {\r\n        padding: 20,\r\n        backgroundColor: \"#000000\",\r\n        borderColor: \"#639dda\",\r\n        borderWidth: 2,\r\n    },\r\n    greeting: {\r\n        fontSize: 30,\r\n    },\r\n});\r\n\r\nAppRegistry.registerComponent(\"hello_world\", () => hello_world);"
  },
  {
    "id": "795",
    "title": "Readlink",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello world"
  },
  {
    "id": "796",
    "title": "RealBasic",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Function Run(args() as String) As Integer\r\n  Print \"Hello World\"\r\n  Quit\r\nEnd Function"
  },
  {
    "id": "797",
    "title": "Reason",
    "description": "Reason, also known as ReasonML, is a syntax extension and toolchain for OCaml created by Jordan Walke, who also created React, at Facebook. Reason offers a syntax familiar to JavaScript programmers, and transpiles to OCaml. Statically typed Reason (or OCaml) code may be compiled to dynamically typed JavaScript using the ReScript compiler.",
    "url": "https://en.wikipedia.org/wiki/Reason_(programming_language)",
    "language_short": "php",
    "code": "print_string \"hello, world\""
  },
  {
    "id": "798",
    "title": "Rebol",
    "description": "Rebol (/ˈrɛbəl/ REB-əl; historically REBOL) is a cross-platform data exchange language and a multi-paradigm dynamic programming language designed by Carl Sassenrath for network communications and distributed computing. It introduces the concept of dialecting: small, optimized, domain-specific languages for code and data.",
    "url": "https://en.wikipedia.org/wiki/Rebol",
    "language_short": "php",
    "code": "print \"Hello World!\""
  },
  {
    "id": "799",
    "title": "Recurse",
    "description": "Recurse is a two-dimensional language based on Befunge and other, similar languages. It was created by MagiMaster. It was inspired, at least partly, by the fractal circuit mazes.",
    "url": "https://esolangs.org/wiki/Recurse",
    "language_short": "mipsasm",
    "code": "    Main function\r\n$$###########v######################################\r\n>..9n_3n{5Av# 'H' = 9*8       # 'w' = (2*8-1)*8-1 #\r\n#vA3_[_A7_A<# 'e' = 'H'+3*8+5 # 'o' = 'W'-8       #\r\n#>_[5n{4A_[v# 'l' = 'e'+7     # 'r' = 'o'+3       #\r\n#vS1{n2[_n4<# 'l'             # 'l' = 'r'-6       #\r\n#>n{1S_8S_3v# 'o' = 'l'+3     # 'd' = 'l'-8       #\r\n#v[_S8_S6_A<# ',' = 5*8+ 4    # '!' = 4*8+1       #\r\n#>4n{1A_[..!# ' ' = 4*8       #                   <\r\n$$###########^######################################\r\n \r\n    Multiply by 8 (Bidirectional)\r\nn####v#####\r\n>{8}m#m}8{<\r\nn####^#####\r\n \r\n    Push on left stack and print (Bidirectional)\r\n_##v###\r\n>{!#!{<\r\n_##^###\r\n \r\n    Add (Bidirectional)\r\nA##v###\r\n>}a#a}<\r\nA##^###\r\n \r\n    Subtract (Bidirectional)\r\nS##v###\r\n>}s#s}<\r\nS##^###"
  },
  {
    "id": "800",
    "title": "Red",
    "description": "Red is a programming language designed to overcome the limitations of the programming language Rebol. Red was introduced in 2011 by Nenad Rakočević, and is both an imperative and functional programming language. Its syntax and general usage overlaps that of the interpreted Rebol language.",
    "url": "https://en.wikipedia.org/wiki/Red_(programming_language)",
    "language_short": "",
    "code": "Red [Needs: 'View]\r\nview [text \"Hello World\"]"
  },
  {
    "id": "801",
    "title": "Redis",
    "description": "Redis (/ˈrɛdɪs/; Remote Dictionary Server) is an in-memory data structure store, used as a distributed, in-memory key–value database, cache and message broker, with optional durability. Redis supports different kinds of abstract data structures, such as strings, lists, maps, sets, sorted sets, HyperLogLogs, bitmaps, streams, and spatial indexes. The project is developed and maintained by a project core team and as of 2015 is sponsored by Redis Labs. It is open-source software released under a BSD 3-clause license.",
    "url": "https://en.wikipedia.org/wiki/Redis",
    "language_short": "",
    "code": "set Hello World"
  },
  {
    "id": "802",
    "title": "Refal",
    "description": "Refal (\"Recursive functions algorithmic language\"; Russian: РЕФАЛ) \"is a functional programming language oriented toward symbolic computations\", including \"string processing, language translation, [and] artificial intelligence\". It is one of the oldest members of this family, first conceived of in 1966 as a theoretical tool, with the first implementation appearing in 1968. Refal was intended to combine mathematical simplicity with practicality for writing large and sophisticated programs.",
    "url": "https://en.wikipedia.org/wiki/Refal",
    "language_short": "",
    "code": "$$ENTRY Go { = <Hello>;}\r\nHello {\r\n    = <Prout 'Hello World'>;\r\n}"
  },
  {
    "id": "803",
    "title": "reStructuredText (RST, ReST, or reST)",
    "description": "reStructuredText (RST, ReST, or reST) is a file format for textual data used primarily in the Python programming language community for technical documentation.",
    "url": "https://en.wikipedia.org/wiki/ReStructuredText",
    "language_short": "plaintext",
    "code": "============\r\nHello World!\r\n============"
  },
  {
    "id": "804",
    "title": "Retro",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"Hello World\" puts"
  },
  {
    "id": "805",
    "title": "Reversible 2D (Reversible-2D)",
    "description": "Reversible-2D is a 2D programming language which can be reversed. It is unique because it still has variables. The short for Reversible-2D is R2D. For version 1, it is R2D1. When version 2 comes, some ppl will lol. It is made by User:TehZ.",
    "url": "https://esolangs.org/wiki/Reversible-2D",
    "language_short": "brainfuck",
    "code": " >PHOPeOPlOPlOPoOP,OP OPWOPoOPrOPlOPdOP!O¤"
  },
  {
    "id": "806",
    "title": "Rexx",
    "description": "Rexx (Restructured Extended Executor) is an interpreted programming language developed at IBM by Mike Cowlishaw. It is a structured, high-level programming language designed for ease of learning and reading. Proprietary and open source Rexx interpreters exist for a wide range of computing platforms; compilers exist for IBM mainframe computers.",
    "url": "https://en.wikipedia.org/wiki/Rexx",
    "language_short": "plaintext",
    "code": "<<hello.rexx>>=\r\nSay \"Hello, World!\""
  },
  {
    "id": "807",
    "title": "Rhotor",
    "description": "Rhotor is an esoteric programming language developed by Jannis Harder in 2006.\r\n<br>Rhotor is a lazy evaluating functional programming language that utilizes pattern matching.",
    "url": "https://esolangs.org/wiki/Rhotor",
    "language_short": "c-like",
    "code": "x/%\"Hello, world!\\n\""
  },
  {
    "id": "808",
    "title": "richtea",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "Print(\"Hello World\");"
  },
  {
    "id": "809",
    "title": "Ricktea",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Print(\"Hello World\");"
  },
  {
    "id": "810",
    "title": "Ride",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "throw(\"Hello World\")"
  },
  {
    "id": "811",
    "title": "Ring",
    "description": "Ring is a dynamically typed, general-purpose programming language. It can be embedded in C/C++ projects, extended using C/C++ code and/or used as a standalone language. The supported programming paradigms are imperative, procedural, object-oriented, functional, meta, declarative using nested structures, and natural programming. The language is portable (Windows, Linux, macOS, Android, etc.) and can be used to create console, GUI, web, game and mobile applications.",
    "url": "https://en.everybodywiki.com/Ring_(programming_language)",
    "language_short": "c-like",
    "code": "see \"Hello, World!\" "
  },
  {
    "id": "812",
    "title": "RinGy",
    "description": "RinGy is an esoteric programming language created by User:FireFly in 2009. The memory is shared between program and data, and the memory could be represented as a circular linked list, where the key of the last element points to the first. Instructions are executed until the program halts. The standard file extension of a RinGy program is .ry.",
    "url": "https://esolangs.org/wiki/RinGy",
    "language_short": "brainfuck",
    "code": "'H.'e.'l..'o.',.'!-.'w.'o.'r.'l.'d.'!._++++++++++.q"
  },
  {
    "id": "813",
    "title": "RISC V",
    "description": "",
    "url": "",
    "language_short": "",
    "code": ".data\r\nhello_world: .asciiz \"Hello World\"\r\n\r\n.text\r\nmain:   la      a1, hello_world\r\n        li      a0, 4\r\n        ecall\r\n\r\n        li      a0, 10\r\n        ecall"
  },
  {
    "id": "814",
    "title": "RiveScript",
    "description": "RiveScript exposes a simple plain text scripting language that's easy to learn and begin writing in quickly. No need to mess with complicated opaque XML structures or random symbols and line noise like with some other chatbot languages!",
    "url": "https://www.rivescript.com/",
    "language_short": "",
    "code": "+ *\r\n- Hello World"
  },
  {
    "id": "815",
    "title": "Rockstar",
    "description": "Rockstar is a dynamically typed Turing-complete programming language designed for creating computer programs that are also song lyrics. Rockstar is heavily influenced by the lyrical conventions of 1980s hard rock and power ballads. It was created by Dylan Beattie in 2018, based on this tweet from Paul Stovell, which said \"To really confuse recruiters, someone should make a programming language called Rockstar.\"",
    "url": "https://esolangs.org/wiki/Rockstar",
    "language_short": "c-like",
    "code": "Say \"hello world!\""
  },
  {
    "id": "816",
    "title": "Roco",
    "description": "Roco is programming language using a form of coroutines, designed by Lode Vandevenne in 2007. The coroutines are very basic, they have no input or output parameters, and their instruction pointer is never copied or reset. If a coroutine doesn't call (\"ca\" or \"ac\") or yield (\"yi\") another coroutine, it simply loops forever: if the instruction pointer reaches the end of a coroutine, it goes back to its beginning and continues running. Coroutines can be nested, and the top level of the source code is the root coroutine, which is called \"ro\". You can't achieve recursion by making a coroutine call or yield itself, because it just continues where it was.",
    "url": "https://esolangs.org/wiki/Roco",
    "language_short": "processing",
    "code": "cout 72\r\ncout 101\r\ncout 108\r\ncout 108\r\ncout 111\r\ncout 44\r\ncout 32\r\ncout 87\r\ncout 111\r\ncout 114\r\ncout 108\r\ncout 100\r\ncout 33\r\nac"
  },
  {
    "id": "817",
    "title": "ROOP (Real Object-Oriented Paradigm)",
    "description": "ROOP (Real Object-Oriented Paradigm) is a two-dimensional language created by User:-Dark-Phantom- on December, 2015. The language uses a rectangular grid of objects represented as characters in the source code. Some objects are static and others can move.",
    "url": "https://esolangs.org/wiki/ROOP",
    "language_short": "plaintext",
    "code": "\"Hello, World!\"\r\nh"
  },
  {
    "id": "818",
    "title": "Roy",
    "description": "Roy is an experimental programming language that compiles to javascript developed primarily by Brian McKenna. The main motivation for Brian was that \"writing correct javascript is hard\".",
    "url": "https://gyaanipedia.fandom.com/wiki/Roy_(programming_language)",
    "language_short": "javascript",
    "code": "console.log \"Hello world\""
  },
  {
    "id": "819",
    "title": "RPG",
    "description": "RPG is a high-level programming language for business applications, introduced in 1959 for the IBM 1401. It is most well known as the primary programming language of IBM's midrange computer product line, including the IBM i operating system. RPG has traditionally featured a number of distinctive concepts, such as the program cycle, and the column-oriented syntax. The most recent version is RPG IV, which includes a number of modernization features, including free-form syntax.",
    "url": "https://en.wikipedia.org/wiki/IBM_RPG",
    "language_short": "",
    "code": "**free\r\ndsply 'Hello World';\r\nreturn;"
  },
  {
    "id": "820",
    "title": "RPG IV (RPG-IV)",
    "description": "RPG is a high-level programming language for business applications, introduced in 1959 for the IBM 1401. It is most well known as the primary programming language of IBM's midrange computer product line, including the IBM i operating system. RPG has traditionally featured a number of distinctive concepts, such as the program cycle, and the column-oriented syntax. The most recent version is RPG IV, which includes a number of modernization features, including free-form syntax.",
    "url": "https://en.wikipedia.org/wiki/IBM_RPG",
    "language_short": "c-like",
    "code": "/free\r\n    dsply 'Hello World!';\r\n    return;\r\n/end-free"
  },
  {
    "id": "821",
    "title": "RTFM (F^3)",
    "description": "RTFM (also known as F^3) is an esoteric programming language made by User:TeslaX93. The assumption of this language was the desire to encourage the programmer to frequently use the documentation.",
    "url": "https://esolangs.org/wiki/RTFM",
    "language_short": "plaintext",
    "code": "070 08C"
  },
  {
    "id": "822",
    "title": "RTL2 (RTL/2)",
    "description": "RTL/2 (Real-Time Language) is a discontinued high-level programming language for use in real-time computing, developed at Imperial Chemical Industries, Ltd. (ICI), by J.G.P. Barnes. It was originally used internally in ICI but was distributed by SPL International in 1974. It was based on concepts from ALGOL 68, and intended to be small and simple. RTL/2 was standardised in 1980 by the British Standards Institution.",
    "url": "https://en.wikipedia.org/wiki/RTL/2",
    "language_short": "",
    "code": "TITLE Hello World;\r\n\r\nLET NL=10;\r\n\r\nEXT PROC(REF ARRAY BYTE) TWRT;\r\n\r\nENT PROC INT RRJOB();\r\n\r\n    TWRT(\"Hello World#NL#\");\r\n    RETURN(1);\r\n\r\nENDPROC;"
  },
  {
    "id": "823",
    "title": "Rubic",
    "description": "Rubic is an esoteric programming language created by User:Digital Hunter inspired by the Rubik's Cube puzzle.",
    "url": "https://esolangs.org/wiki/Rubic",
    "language_short": "plaintext",
    "code": ".ww ( +ww ) ! +ww +ww +ww +ww r -wg ! +oo b -og ! ! +wo' ! b' .wg *oo +oo ! *wg -oo b -og ! b' +oo +oo +oo ! +wg ! l' -wg ! -oo ! .wg *wg r -wg ! .oo +ww !"
  },
  {
    "id": "824",
    "title": "Ruby",
    "description": "Ruby is an interpreted, high-level, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan.",
    "url": "https://en.wikipedia.org/wiki/Ruby_(programming_language)",
    "language_short": "ruby",
    "code": "#!/usr/bin/env ruby\r\nputs \"Hello World\""
  },
  {
    "id": "825",
    "title": "Ruota",
    "description": "",
    "url": "",
    "language_short": "ruby",
    "code": "# Ruota https://github.com/Ruota-Lang/Ruota\r\n \r\nprintl(\"Hello, World!\")"
  },
  {
    "id": "826",
    "title": "Rust",
    "description": "Rust is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is syntactically similar to C++, but can guarantee memory safety by using a borrow checker to validate references. Rust achieves memory safety without garbage collection, and reference counting is optional.",
    "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)",
    "language_short": "rust",
    "code": "fn main() {\r\n    println!(\"Hello, world!\");\r\n}"
  },
  {
    "id": "827",
    "title": "S Algol (S-Algol)",
    "description": "S-algol (St Andrews Algol):vii is a computer programming language derivative of ALGOL 60 developed at the University of St Andrews in 1979 by Ron Morrison and Tony Davie. The language is a modification of ALGOL to contain orthogonal data types that Morrison created for his PhD thesis. Morrison would go on to become professor at the university and head of the department of computer science. The S-algol language was used for teaching at the university at an undergraduate level until 1999. It was also the language taught for several years in the 1980s at a local school in St. Andrews, Madras College. The computer science text Recursive Descent Compiling describes a recursive descent compiler for S-algol, implemented in S-algol.",
    "url": "https://en.wikipedia.org/wiki/S-algol",
    "language_short": "plaintext",
    "code": "write \"Hello World\"\r\n?"
  },
  {
    "id": "828",
    "title": "Sabdt",
    "description": "Sabdt (sab*dit) or \"strings are best data type\" is an esolang made by User:Aspwil (talk). It is simplistic in nature and relatively easy to code in. It was spawned from the idea that many esolangs are based around numbers, changing values of numbers in cells, printing out cells converted to chars, or taking in text and converting it to numbers etc. This esolang has no inbuilt number system, so the only things you can natively do with it are manipulate and compare strings (along with flow control, variables, functions, input and printing)",
    "url": "https://esolangs.org/wiki/Sabdt",
    "language_short": "",
    "code": "pr \"hello world\";"
  },
  {
    "id": "829",
    "title": "Sacred",
    "description": "Sacred is a joke esoteric language created by User:Conor O'Brien that is primarily a Brainf*** derivative, but adds extra commands.",
    "url": "https://esolangs.org/wiki/Sacred",
    "language_short": "plaintext",
    "code": ")( )( (( )( (( (( () ( () ( (( () )) )( )( )( )) )( )) )( )) )( (( (( (( ) )) ) (( (( )( )( ((( (( () () () () () () ((( (( (( )( ((( ((( (( (( ((( (( () ((( )) )) ((( )) )) ((( (( (( (( ((( () () () ((( )) )) ((( )) )) )( ((( (( (( (( () ((("
  },
  {
    "id": "830",
    "title": "SADOL",
    "description": "SADOL (Sadistic And Damn Odd Language) is an esoteric programming language made by Martin 'nooga' Gasperowicz (User:nooga) in 2005.",
    "url": "https://esolangs.org/wiki/SADOL",
    "language_short": "plaintext",
    "code": "!\",212Hello world!"
  },
  {
    "id": "831",
    "title": "Sal",
    "description": "SADOL (Sadistic And Damn Odd Language) is an esoteric programming language made by Martin 'nooga' Gasperowicz (User:nooga) in 2005.",
    "url": "https://esolangs.org/wiki/SADOL",
    "language_short": "c-like",
    "code": "proc main()\r\n    loop\r\n        WriteLine(\"Hello, World!\")\r\n    endloop\r\nend"
  },
  {
    "id": "832",
    "title": "Salt",
    "description": "Salt (standing for S(m)al(l)t(alk)) is an object-oriented language invented by User:A designed to be very concise. It was influenced by Smalltalk.",
    "url": "https://esolangs.org/wiki/Salt",
    "language_short": "plaintext",
    "code": "'Hello, world'"
  },
  {
    "id": "833",
    "title": "Sansism",
    "description": "Sansism is an esoteric programming language devised by Safalra (Stephen Morley) in November 2003. It is based on Brainfuck and Befunge. Originally a two-dimensional language, it was later generalised to function in any number of dimensions while still using the same eight instructions. Sansism is Turing Complete.",
    "url": "https://esolangs.org/wiki/Sansism",
    "language_short": "brainfuck",
    "code": "           G                                  GGG\r\n>++++++++++>!+++++++!++++++++++!+++!+##!!!!##-G+G\r\nG.+++++++++++++++##!!##.++!.+++..+++++++.+!.++! G\r\nG!.+++.------.--------.!+.!.G                  GG"
  },
  {
    "id": "834",
    "title": "SAS",
    "description": "The SAS language is a computer programming language used for statistical analysis, created by Anthony James Barr at North Carolina State University. It can read in data from common spreadsheets and databases and output the results of statistical analyses in tables, graphs, and as RTF, HTML and PDF documents. The SAS language runs under compilers that can be used on Microsoft Windows, Linux, and various other UNIX and mainframe computers. The SAS System and World Programming System (WPS) are SAS language compilers.",
    "url": "https://en.wikipedia.org/wiki/SAS_language",
    "language_short": "sas",
    "code": "%macro putit( string= ); \r\n    %put &string; \r\n    %mend; \r\n%putit(string=Hello World!)"
  },
  {
    "id": "835",
    "title": "Sashleyfuck",
    "description": "Sashleyfuck is just like Brainfuck, but it uses the letters S, A, H, L, E, and Y. It was made after MiroslavRD being the biggest Sashley hater.",
    "url": "https://esolangs.org/wiki/Sashleyfuck",
    "language_short": "brainfuck",
    "code": "shhhhhhhh[ahhhhhhhhsl]ahhhhhhhheshhhhh[ahhhhhsl]ahhhhehhhhhhheehhheshhhhhhhhh[alllllllllsl]ahheshhhhhhh[ahhhhhhhsl]ahhhhhheshhhhh[ahhhhhsl]alehhhellllllelllllllleshhhhhhhh[allllllllsl]alllele"
  },
  {
    "id": "836",
    "title": "Sass",
    "description": "Sass (short for syntactically awesome style sheets) is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets (CSS). SassScript is the scripting language itself.",
    "url": "https://en.wikipedia.org/wiki/Sass_(stylesheet_language)",
    "language_short": "scss",
    "code": "body::before\r\n    content: \"Hello World!\""
  },
  {
    "id": "837",
    "title": "Sather",
    "description": "Sather is an object-oriented programming language. It originated circa 1990 at the International Computer Science Institute (ICSI) at the University of California, Berkeley, developed by an international team led by Steve Omohundro. It supports garbage collection and generics by subtypes.",
    "url": "https://en.wikipedia.org/wiki/Sather",
    "language_short": "c-like",
    "code": "class MAIN is\r\n    main is \r\n        loop \r\n            #OUT + \"Hello World!\\n\" \r\n        end \r\n    end\r\nend"
  },
  {
    "id": "838",
    "title": "Scala",
    "description": "Scala (/ˈskɑːlɑː/ SKAH-lah) is a strong statically typed general-purpose programming language which supports both object-oriented programming and functional programming. Designed to be concise, many of Scala's design decisions are aimed to address criticisms of Java.",
    "url": "https://en.wikipedia.org/wiki/Scala_(programming_language)",
    "language_short": "scala",
    "code": "object HelloWorld extends App {\r\n    println(\"Hello World\")\r\n}"
  },
  {
    "id": "839",
    "title": "Scheme",
    "description": "Scheme is a minimalist dialect of the Lisp family of programming languages. Scheme consists of a small standard core with several tools for language extension.",
    "url": "https://en.wikipedia.org/wiki/Scheme_(programming_language)",
    "language_short": "scheme",
    "code": "(display \"Hello World\") (newline)"
  },
  {
    "id": "840",
    "title": "SCHWift",
    "description": "",
    "url": "",
    "language_short": "swift",
    "code": "show me what you got \"Hello World\""
  },
  {
    "id": "841",
    "title": "Scilab",
    "description": "Scilab is a free and open-source, cross-platform numerical computational package and a high-level, numerically oriented programming language. It can be used for signal processing, statistical analysis, image enhancement, fluid dynamics simulations, numerical optimization, and modeling, simulation of explicit and implicit dynamical systems and (if the corresponding toolbox is installed) symbolic manipulations.",
    "url": "https://en.wikipedia.org/wiki/Scilab",
    "language_short": "scilab",
    "code": "while(1)\r\n    printf(\"hello world\");\r\nend"
  },
  {
    "id": "842",
    "title": "Sclipting",
    "description": "Sclipting is a stack-based golf language, inspired by GolfScript, that uses Chinese characters for instructions and Hangul syllables for data (strings and integers). The basic idea is that to minimise the number of characters in a program, the language should provide as many single-character instructions as possible. It was invented by Timwi in 2011.",
    "url": "https://esolangs.org/wiki/Sclipting",
    "language_short": "plaintext",
    "code": "丟낆녬닆묬긅덯댦롤긐뤊"
  },
  {
    "id": "843",
    "title": "SCSS",
    "description": "\"SCSS\" (Sassy CSS), uses block formatting like that of CSS. It uses braces to denote code blocks and semicolons to separate rules within a block. The indented syntax and SCSS files are traditionally given the extensions .sass and .scss, respectively.",
    "url": "https://en.wikipedia.org/wiki/Sass_(stylesheet_language)",
    "language_short": "scss",
    "code": "body::before {\r\n    content: \"Hello World!\"\r\n}"
  },
  {
    "id": "844",
    "title": "Sed",
    "description": "sed (\"stream editor\") is a Unix utility that parses and transforms text, using a simple, compact programming language. sed was developed from 1973 to 1974 by Lee E. McMahon of Bell Labs, and is available today for most operating systems.",
    "url": "https://en.wikipedia.org/wiki/Sed",
    "language_short": "bash",
    "code": "#!/usr/bin/sed -f sed.sed\r\nc\\\r\nHello World\r\nq"
  },
  {
    "id": "845",
    "title": "Seed",
    "description": "Seed is a language based on random seeds. Actually, programs only contain two instructions: length and random seed, separated by a space. To execute a Seed program, the seed is fed into a Mersenne twister (Wikipedia) random number generator, and the randomness obtained is converted into a string of length bytes, which will be executed by a Befunge-98 interpreter (or compiler).",
    "url": "https://esolangs.org/wiki/Seed",
    "language_short": "",
    "code": "20 77698190481213510983405846204529755428212736563278528088055816123655499433757607718113585773285686740433752335768949721107461077652705328567448384490378909463204984642622585570301449419608763821501335954761638946551568252142160714228369356054944595121742743720935369219143086698092657062614382519069928478344861416117079283276656675368390764675728501797178208908097054412833019383889935034413095990596139618411133857423995278221670378808372393943846302426674985203826030563290800228881174929701934609803807325868775242909948272754141956168876233403760199007405891058308908050926690654387065882097924294620229833663324754801060691573338185912369627367088050915813931912943122729210762147280440619571047157836177316082899933374851699282897590433145623725705072835054748369992455883804733164985993447304652512229557984322495162682327137071900307763332392727562988633724175094951314863886096190608268953115914497741446723188169519334729165647294618083444761551231012944903572063441813639201051793052623561949314826491616145873848990439549320951496534538450810083853945092224500179417650727351532486362656533602860500906935826231374501097567347929533018944533000919137863885267937690665655625569011036163950983389810112758403211861147501289650757555111271813737813381172074709337306647481507917983021055643749698971365256395367215437223669891280521155247529741719633106765965869860677198632388808752014013939448563313855130972968670015202479226496876067874099463222366536167126653600056389712632892652810365218798697007191747287017174284819764736012653205048166550645507761123345279502597627995423826537299795220169894222867163817508592362092945387317777666016102146798532337718546431888424995701016828542559577710937459975677354300708252448630110787487122698124054544454425586794841157136743408274159313823745226919626156949004386804874236325506583268311452185182143521552429596087556634158778951670223004413763782647825362665491934988477225698133609360969370513836064317152213804169538880632390908441210809806024082600637872813704781431414342781727628446451808751293046212690472851527294326981763969926510021099532791692362104324026231160941956411410511639925420026544463125250979130259151326444714248961523031316570018708849878676230362246913063109584502143502908906243190007062857721367402065760878808920961082444422470813023453274563914735545463757909757689866565064353853099958949763412521666109346825939993377745919874506439752272141853783745051726268592621080457687000431023453539135927140364910898906534604541224314820195082362228787083990333757268808864746297304451768935814651205074884015268982492445996542040655715230139673520569765431617018824427859214902954216246257690105154030408059145566852643855789351907818461502260430297487602982850090037405732117988720732457199005151517240766953718440639691354185802798689950155164379549518496065038927905828230066053603755553745353618846804435103593395141938947781375633374976924393453162350331593801284839409264892975739791751842620029351535320807733966984270102067017902086335370470815153908942490581427972998999752666174807935897314584088695849094389002316139005810918748032068307783088481430339303809949409414892479892121893571274086727250767713365523021125610242269894861374297866741571608166536165735922984579027986499758294460652554897534526492251140681138244025665400003029337114012766773010641359450599171473565675885966777145500248501370644599274741842644014722083732709145488157998306684831419559774212264003518406013032514468522158218837161285401631773099549510145156007147884565387852623860047153609138110997222297132678660783411624002400927435687937355446057878202312894093195453248164648271580944753933355967626542678764854079218206499479071658357103085513937246462858404881973219571392564909528645166637501279457604649906515968389831094896970731573714836150178126997674563415266672131632765794599548356902607125568792417432226125654028873443580337866760487651905138461301986816386866811155111486155341154153322710638921116465132825486519667178335471102213200521032618562169530188826434060179505699797068436325168526618824444305122475837890944742004331675952611756641739756206337285946"
  },
  {
    "id": "846",
    "title": "Seed7",
    "description": "Seed7 is an extensible general-purpose programming language designed by Thomas Mertes. It is syntactically similar to Pascal and Ada. Along with many other features, it provides an extension mechanism. Seed7 supports introducing new syntax elements and their semantics into the language, and allows new language constructs to be defined and written in Seed7. For example, programmers can introduce syntax and semantics of new statements and user defined operator symbols. The implementation of Seed7 differs significantly from that of languages with hard-coded syntax and semantics.",
    "url": "https://en.wikipedia.org/wiki/Seed7",
    "language_short": "",
    "code": "$$ include \"seed7_05.s7i\";\r\n\r\nconst proc: main is func\r\n  begin\r\n    writeln(\"Hello World\");\r\n  end func;"
  },
  {
    "id": "847",
    "title": "Seeker",
    "description": "Seeker is an esoteric programming language created by User:Saka (User:Galaxtone helped a little) that employs \"seekers\" and \"blocks\", pointers that can be accessed via the special functions.",
    "url": "https://esolangs.org/wiki/Seeker",
    "language_short": "plaintext",
    "code": "!chr.@chr:72.$$chr.@chr:101.$$chr.@chr:108.$$chr.@chr:111.$$chr.@chr:32.$$chr.@chr:119.$$chr.@chr:114.$$chr.@chr:100.$$chr.@chr:33.$$chr._"
  },
  {
    "id": "848",
    "title": "Self",
    "description": "Self is an object-oriented programming language based on the concept of prototypes. Self began as a dialect of Smalltalk, being dynamically typed and using just-in-time compilation (JIT) as well as the prototype-based approach to objects: it was first used as an experimental test system for language design in the 1980s and 1990s. In 2006, Self was still being developed as part of the Klein project, which was a Self virtual machine written fully in Self. The latest version is 2017.1 released in May 2017.",
    "url": "https://en.wikipedia.org/wiki/Self_(programming_language)",
    "language_short": "plaintext",
    "code": "'Hello World!' printLine"
  },
  {
    "id": "849",
    "title": "Semicolon",
    "description": "The semicolon or semi-colon ; is a symbol commonly used as orthographic punctuation. In the English language, a semicolon is most commonly used to link (in a single sentence) two independent clauses that are closely related in thought. When a semicolon joins two or more ideas in one sentence, those ideas are then given equal rank. Semicolons can also be used in place of commas to separate the items in a list, particularly when the elements of that list contain commas.",
    "url": "https://en.wikipedia.org/wiki/Semicolon",
    "language_short": "plaintext",
    "code": ";;;;⁏;;⁏;;;\r\n⁏ ;;;;;;⁏⁏;;⁏;⁏\r\n⁏ ;;;;;;⁏⁏;⁏⁏;;\r\n;;⁏⁏ ;;⁏ ;;;;;;⁏⁏;⁏⁏⁏⁏\r\n⁏ ;;;;;;⁏;;;;;\r\n⁏ ;;;;;;⁏⁏⁏;⁏⁏⁏\r\n⁏ ;;;;;;⁏⁏;⁏⁏⁏⁏\r\n;;⁏⁏ ;;;;;;⁏⁏\r\n⁏;;⁏ ;;;;;;⁏⁏;⁏⁏;;\r\n⁏ ;;;;;;⁏⁏;;⁏;;\r\n⁏ ;;;;;;⁏;;;;⁏\r\n⁏ ;;;;;;;⁏;⁏;\r\n⁏ ;;  ;"
  },
  {
    "id": "850",
    "title": "SendStuff",
    "description": "The SendStuff esoteric programming language, created by User:Zzo38, involves creating nodes to send the result(s) of the command (which can be only non-negative integers) to other nodes. There is no variables, strings, or anything else like that, only nodes and send number to another nodes.",
    "url": "https://esolangs.org/wiki/SendStuff",
    "language_short": "plaintext",
    "code": ">(Add      72 >(Output) \r\n>(Add      29 >(Output)\r\n>(Add      7  >(Output) \r\n              >(Output)\r\n>(Add      3  >(Output)\r\n>(Subtract 67 >(Output)\r\n>(Subtract 12 >(Output) \r\n>(Add      55 >(Output)\r\n>(Add      24 >(Output)\r\n>(Add      3  >(Output)\r\n>(Subtract 6  >(Output)\r\n>(Subtract 8  >(Output)\r\n>(Subtract 67 >(Output)"
  },
  {
    "id": "851",
    "title": "Ser2",
    "description": "ser2 was created between 2009 and 2012. Its name abbreviates \"Search Entity and Replace\", the \"2\" indicates the second attempt. ser2 is inspired by C++ template meta-programming. It is a minimalistic functional language with the initial and final state predefined and built-in i/o.",
    "url": "https://esolangs.org/wiki/Ser2",
    "language_short": "brainfuck",
    "code": "!print--:#out:--:#c:#n:/wrote--:'@output--:#out: #c:#n:\r\n!print--:#out:eol:     /wrote- :'@output--:#out:&0a:\r\n!wrote--:'@iopair--:#out:#c:#n:/print--:#out:#n:\r\n!wrote- :'@iopair--:#out:#c:   /#out:\r\n \r\n!'@run-:#: / print--:#:\r\n--:'H:--:'e:--:'l:--:'l:--:'o:--:',:--:' :\r\n--:'w:--:'o:--:'r:--:'l:--:'d:--:'!:eol:"
  },
  {
    "id": "852",
    "title": "Setanta",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "scríobh(\"Hello World\")"
  },
  {
    "id": "853",
    "title": "Shakespeare",
    "description": "The Shakespeare Programming Language (SPL) is an esoteric programming language designed by Jon Åslund and Karl Hasselström. Like the Chef programming language, it is designed to make programs appear to be something other than programs - in this case, Shakespearean plays.",
    "url": "https://en.wikipedia.org/wiki/Shakespeare_Programming_Language",
    "language_short": "plaintext",
    "code": "The Infamous Hello World Program.\r\n \r\nRomeo, a young man with a remarkable patience.\r\nJuliet, a likewise young woman of remarkable grace.\r\nOphelia, a remarkable woman much in dispute with Hamlet.\r\nHamlet, the flatterer of Andersen Insulting A/S.\r\n \r\n \r\n                    Act I: Hamlet's insults and flattery.\r\n \r\n                    Scene I: The insulting of Romeo.\r\n \r\n[Enter Hamlet and Romeo]\r\n \r\nHamlet:\r\n    You lying stupid fatherless big smelly half-witted coward!\r\n    You are as stupid as the difference between a handsome rich brave\r\n    hero and thyself! Speak your mind!\r\n \r\n    You are as brave as the sum of your fat little stuffed misused dusty\r\n    old rotten codpiece and a beautiful fair warm peaceful sunny summer's\r\n    day. You are as healthy as the difference between the sum of the\r\n    sweetest reddest rose and my father and yourself! Speak your mind!\r\n \r\n    You are as cowardly as the sum of yourself and the difference\r\n    between a big mighty proud kingdom and a horse. Speak your mind.\r\n \r\n    Speak your mind!\r\n \r\n[Exit Romeo]\r\n \r\n                    Scene II: The praising of Juliet.\r\n \r\n[Enter Juliet]\r\n \r\nHamlet:\r\n    Thou art as sweet as the sum of the sum of Romeo and his horse and his\r\n    black cat! Speak thy mind!\r\n \r\n[Exit Juliet]\r\n \r\n                    Scene III: The praising of Ophelia.\r\n \r\n[Enter Ophelia]\r\n \r\nHamlet:\r\n    Thou art as lovely as the product of a large rural town and my amazing\r\n    bottomless embroidered purse. Speak thy mind!\r\n \r\n    Thou art as loving as the product of the bluest clearest sweetest sky\r\n    and the sum of a squirrel and a white horse. Thou art as beautiful as\r\n    the difference between Juliet and thyself. Speak thy mind!\r\n \r\n[Exeunt Ophelia and Hamlet]\r\n \r\n \r\n                    Act II: Behind Hamlet's back.\r\n \r\n                    Scene I: Romeo and Juliet's conversation.\r\n \r\n[Enter Romeo and Juliet]\r\n \r\nRomeo:\r\n    Speak your mind. You are as worried as the sum of yourself and the\r\n    difference between my small smooth hamster and my nose. Speak your\r\n    mind!\r\n \r\nJuliet:\r\n    Speak YOUR mind! You are as bad as Hamlet! You are as small as the\r\n    difference between the square of the difference between my little pony\r\n    and your big hairy hound and the cube of your sorry little\r\n    codpiece. Speak your mind!\r\n \r\n[Exit Romeo]\r\n \r\n                    Scene II: Juliet and Ophelia's conversation.\r\n \r\n[Enter Ophelia]\r\n \r\nJuliet:\r\n    Thou art as good as the quotient between Romeo and the sum of a small\r\n    furry animal and a leech. Speak your mind!\r\n \r\nOphelia:\r\n    Thou art as disgusting as the quotient between Romeo and twice the\r\n    difference between a mistletoe and an oozing infected blister! Speak\r\n    your mind!\r\n \r\n[Exeunt]"
  },
  {
    "id": "854",
    "title": "Shell",
    "description": "A shell script is a computer program designed to be run by the Unix shell, a command-line interpreter. The various dialects of shell scripts are considered to be scripting languages. Typical operations performed by shell scripts include file manipulation, program execution, and printing text. A script which sets up the environment, runs the program, and does any necessary cleanup, logging, etc. is called a wrapper.",
    "url": "https://en.wikipedia.org/wiki/Shell_script",
    "language_short": "shell",
    "code": "#!/bin/sh\r\necho \"Hello World\""
  },
  {
    "id": "855",
    "title": "shen",
    "description": "Shen is a cool language in the spirit of Lisp that modernizes it and is backed by cutting-edge research on programming languages. It gives very thoughtful answers to problems we, the programmers’ global tribe, are collectively facing.",
    "url": "http://shenlanguage.org/",
    "language_short": "c-like",
    "code": "(pr \"hello world\")"
  },
  {
    "id": "856",
    "title": "SICKBAY",
    "description": "SICKBAY is an esoteric dialect of BASIC designed by Chris Pressey from two ideas probably conceived around 2009-2012.",
    "url": "https://esolangs.org/wiki/SICKBAY",
    "language_short": "c-like",
    "code": "20 PRINT \"WORLD!\"\r\n10 PRINT \"HELLO, \";\r\n20 PRINT \"SAILOR\""
  },
  {
    "id": "857",
    "title": "Sidekiq",
    "description": "Sidekiq is an open source job scheduler written in Ruby. It's important to be aware that Sidekiq by default doesn't do scheduling, it only executes jobs. The Enterprise version comes with scheduling out of the box.",
    "url": "https://en.wikipedia.org/wiki/Sidekiq",
    "language_short": "",
    "code": "def self.❨╯°□°❩╯︵┻━┻\r\n    puts \"Hello World\"\r\nend"
  },
  {
    "id": "858",
    "title": "SIL",
    "description": "SIL International (formerly known as the Summer Institute of Linguistics) is a Christian non-profit organization, whose main purpose is to study, develop and document languages, especially those that are lesser-known, in order to expand linguistic knowledge, promote literacy, translate the Christian Bible into local languages, and aid minority language development.",
    "url": "https://en.wikipedia.org/wiki/SIL_International",
    "language_short": "plaintext",
    "code": "print Hello, World!"
  },
  {
    "id": "859",
    "title": "Simpl+",
    "description": "Synchronous Interprocess Messaging Project for LINUX (SIMPL) is a free and open-source project that allows QNX-style synchronous message passing by adding a Linux library using user space techniques like shared memory and Unix pipes to implement SendMssg/ReceiveMssg/ReplyMssg inter-process messaging mechanisms.",
    "url": "https://en.wikipedia.org/wiki/SIMPL",
    "language_short": "c-like",
    "code": "// Hello World in Crestron's SIMPL+\r\nFunction Main\r\n{\r\n    Print(\"Hello World!\\n\");\r\n}"
  },
  {
    "id": "860",
    "title": "Simula",
    "description": "Simula is the name of two simulation programming languages, Simula I and Simula 67, developed in the 1960s at the Norwegian Computing Center in Oslo, by Ole-Johan Dahl and Kristen Nygaard. Syntactically, it is a fairly faithful superset of ALGOL 60, also influenced by the design of Simscript.",
    "url": "https://en.wikipedia.org/wiki/Simula",
    "language_short": "c-like",
    "code": "Begin\r\n    OutText (\"Hello World!\");\r\n    Outimage;\r\nEnd;"
  },
  {
    "id": "861",
    "title": "Skip",
    "description": "Skip is a general-purpose programming language that tracks side effects to provide caching with reactive invalidation, ergonomic and safe parallelism, and efficient garbage collection. Skip is statically typed and ahead-of-time compiled using LLVM to produce highly optimized executables.",
    "url": "http://skiplang.com/",
    "language_short": "",
    "code": "fun main(): void {\r\n  print_string(\"Hello World\")\r\n}"
  },
  {
    "id": "862",
    "title": "Skript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "on load:\r\n    broadcast \"Hello World\""
  },
  {
    "id": "863",
    "title": "Slashes",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Hello, world!"
  },
  {
    "id": "864",
    "title": "Slim",
    "description": "Slim is a minimalistic stack-based esoteric programming language designed by User:Scoppini in 2015.",
    "url": "https://esolangs.org/wiki/Slim",
    "language_short": "plaintext",
    "code": "0^@^@^^@^@^^^\r\n^@^^@^^@^@^@^\r\n@^@^^@^@^^@^^\r\n^@^^@^@^^@^^\r\n^@^^@^@^^^^\r\n@^^@^@^^^^^\r\n^@^@^@^@^@^^^\r\n@^@^^@^@^^^^\r\n@^@^^^@^^@^@^\r\n^@^^@^@^^@^^\r\n^@^^@^^@^@^^\r\n^^@^@^^^^@^\r\n@^^^^@^@^@^@^"
  },
  {
    "id": "865",
    "title": "Smali",
    "description": "smali/baksmali is an assembler/disassembler for the dex format used by dalvik, Android's Java VM implementation. The syntax is loosely based on Jasmin's/dedexer's syntax, and supports the full functionality of the dex format (annotations, debug info, line info, etc.)",
    "url": "https://github.com/JesusFreke/smali/wiki",
    "language_short": "smali",
    "code": ".class public LHelloWorld;\r\n \r\n.super Ljava/lang/Object;\r\n \r\n.method public static main([Ljava/lang/String;)V\r\n    .registers 2\r\n \r\n    sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;\r\n \r\n    const-string\tv1, \"Hello World!\"\r\n \r\n    invoke-virtual {v0, v1}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V\r\n \r\n    return-void\r\n.end method"
  },
  {
    "id": "866",
    "title": "small s.c.r.i.p.t.",
    "description": "small s.c.r.i.p.t. is a single character read interpret programming toyol, designed and implemented in OpenCOBOL by Brian Tiffin, User:Btiffin in August 2013.",
    "url": "https://esolangs.org/wiki/Small_s.c.r.i.p.t.",
    "language_short": "small",
    "code": "Hello\\, world"
  },
  {
    "id": "867",
    "title": "Smalltalk",
    "description": "Smalltalk is an object-oriented, dynamically typed reflective programming language. Smalltalk was created as the language underpinning the \"new world\" of computing exemplified by \"human–computer symbiosis\". It was designed and created in part for educational use, specifically for constructionist learning, at the Learning Research Group (LRG) of Xerox PARC by Alan Kay, Dan Ingalls, Adele Goldberg, Ted Kaehler, Diana Merry, Scott Wallace, and others during the 1970s.",
    "url": "https://en.wikipedia.org/wiki/Smalltalk",
    "language_short": "smalltalk",
    "code": "Transcript show: 'Hello, world!'."
  },
  {
    "id": "868",
    "title": "SmallTalk GNU (Smalltalk-gnu)",
    "description": "SmallTalk GNU is an implementation of the Smalltalk programming language by the GNU Project.",
    "url": "https://en.wikipedia.org/wiki/GNU_Smalltalk",
    "language_short": "smalltalk",
    "code": "'Hello World' printNl !"
  },
  {
    "id": "869",
    "title": "SMATINY",
    "description": "SMATINY, the Self-Modifying Automaton application that's really TINY, is a minimalistic programming language by Ihope127, based on the swapping concept of SMETANA. The computational class is as yet unknown.",
    "url": "https://esolangs.org/wiki/SMATINY",
    "language_short": "plaintext",
    "code": "1. Swap 1 with 71.\r\n10. Output this block's position.\r\n11. Swap 11 with 150.\r\n32. Output this block's position.\r\n34. Swap 33 with 32.\r\n35. Swap 35 with 118.\r\n36. Swap 36 with 9.\r\n72. Output this block's position.\r\n101. Output this block's position.\r\n102. Swap 101 with 100.\r\n103. Swap 103 with 107.\r\n104. Swap 104 with 32.\r\n108. Output this block's position.\r\n109. Swap 109 with 107.\r\n111. Output this block's position.\r\n112. Swap 112 with 31.\r\n114. Output this block's position.\r\n115. Swap 110 with 117.\r\n116. Swap 116 with 107.\r\n117. Swap 110 with 99.\r\n119. Output this block's position.\r\n120. Swap 120 with 110."
  },
  {
    "id": "870",
    "title": "Smil (Synchronized Multimedia Integration Language)",
    "description": "Synchronized Multimedia Integration Language (SMIL (/ˈsmaɪl/)) is a World Wide Web Consortium recommended Extensible Markup Language (XML) markup language to describe multimedia presentations. It defines markup for timing, layout, animations, visual transitions, and media embedding, among other things. SMIL allows presenting media items such as text, images, video, audio, links to other SMIL presentations, and files from multiple web servers. SMIL markup is written in XML, and has similarities to HTML.",
    "url": "https://en.wikipedia.org/wiki/Synchronized_Multimedia_Integration_Language",
    "language_short": "xml",
    "code": "<smil>\r\n    <head>\r\n        <layout>\r\n            <root-layout width=\"300\" height=\"160\" background-color=\"white\"/>\r\n            <region id=\"text_region\" left=\"115\" top=\"60\"/>\r\n        </layout>\r\n    </head>\r\n    <body>\r\n        <text src=\"data:,Hello%20World!\" region=\"text_region\">\r\n            <param name=\"fontFace\" value=\"Arial\"/>\r\n        </text>\r\n    </body>\r\n</smil>"
  },
  {
    "id": "871",
    "title": "SmileBASIC",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "PRINT \"Hello World\""
  },
  {
    "id": "872",
    "title": "SMITH# (SMITH Sharp)",
    "description": "SMITH# is an esoteric programming language by Gerson Kurz, descended from SMITH",
    "url": "https://esolangs.org/wiki/SMITH_sharp",
    "language_short": "plaintext",
    "code": "; SMITH# Hello World! program written by zzo38\r\n; This code uses 33 cells. The number 8 command takes the cell\r\n; number as the parameter and output it. Number 0 command stops\r\n; the program. The first cell is cell zero. Even since cell 32 is\r\n; referenced in the data section, I can reference the reference to cell\r\n; 32 for space rather than adding the space into the data section.\r\n8 25 8 26 8 27 8 27 8 28 8 23 8 29 8 28 8 30 8 27 8 31 8 32 0 72 101 108 111 87 114 100 33\r\n"
  },
  {
    "id": "873",
    "title": "SMITHb",
    "description": "SMITHb (or in other words, \"SMITH FLAT\") is an esoteric programming language invented by User:Zzo38. There is no GOTO or loops or such things as that. The program consists of a sequence of integers (of any size, positive, negative, or zero) and nulls (which are represented by *). The program executes only forward, repeatedly executing and deleting the command indicated by the first 2 elements of the sequence (which is one command). It can also act as a stack with the top of the stack at the end of the program.",
    "url": "https://esolangs.org/wiki/SMITHb",
    "language_short": "plaintext",
    "code": "12(0 *) * *\r\n\"!\" \"d\" \"l\" \"r\" \"o\" \"W\" 32 \"o\" \"l\" \"l\" \"e\" \"H\""
  },
  {
    "id": "874",
    "title": "SML (Standard ML)",
    "description": "Standard ML (SML) is a general-purpose, modular, functional programming language with compile-time type checking and type inference. It is popular among compiler writers and programming language researchers, as well as in the development of theorem provers.",
    "url": "https://en.wikipedia.org/wiki/Standard_ML",
    "language_short": "sml",
    "code": "val () = print \"Hello World\\n\""
  },
  {
    "id": "875",
    "title": "Smurf",
    "description": "Smurf is an esoteric programming language designed by Matthew Westcott in an attempt to cut down Muriel to the bare minimum, retaining that language's self-propagation paradigm. The only native data type is the string.",
    "url": "https://esolangs.org/wiki/Smurf",
    "language_short": "plaintext",
    "code": "\"Hello, world!\"o"
  },
  {
    "id": "876",
    "title": "SNOBOL",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "          OUTPUT = \"Hello World\"\r\nEND"
  },
  {
    "id": "877",
    "title": "Snowman",
    "description": "Snowman is an esoteric programming language created by Stack Exchange user Doorknob.",
    "url": "https://esolangs.org/wiki/Snowman",
    "language_short": "plaintext",
    "code": "~\"Hello World!\"sPvG"
  },
  {
    "id": "878",
    "title": "SNUSP",
    "description": "SNUSP (SNUSP's Not Unix, but a Structured Path) is a language with a two-dimensional code space, inspired by PATH. SNUSP is more orthogonal, specifies semantics more concretely, and optionally allows more advanced features.",
    "url": "https://esolangs.org/wiki/SNUSP",
    "language_short": "plaintext",
    "code": "   /e+++++++++++++++++++++++++++++.\\  \r\n./\\/\\/\\  /+++\\!>.+++o.l.+++++++l/                  #/?\\  \r\n$$H!\\++++++\\ +   \\comma.------------ .<w++++++++.\\ /?\\<!\\-/\r\n/++++++/ +/\\                      /.--------o/ \\-/!.++++++++++/?\\n\r\n/=\\++++++\\ +\\\\!=++++++\\             \\r+++.l------.d--------.>+.!\\-/\r\n\\!\\/\\/\\/\\/ \\++++++++++/"
  },
  {
    "id": "879",
    "title": "Solidity",
    "description": "Solidity is an object-oriented programming language for writing smart contracts. It is used for implementing smart contracts on various blockchain platforms, most notably, Ethereum. It was developed by Christian Reitwiessner, Alex Beregszaszi, and several former Ethereum core contributors to enable writing smart contracts on blockchain platforms such as Ethereum. The programs compiled by the Solidity are intended to be run on Ethereum Virtual Machine.",
    "url": "https://en.wikipedia.org/wiki/Solidity",
    "language_short": "c-like",
    "code": "pragma solidity ^0.4.24;\r\n \r\ncontract HelloWorld {\r\n    function render () public pure returns (string) {\r\n        return 'Hello World';\r\n    }\r\n}"
  },
  {
    "id": "880",
    "title": "Something",
    "description": "Something is similar to that most famous of languages by Urban Müller, referred to here as brainfood. Like brainfood, in Something, cells on a tape can store values from 0 to 255, and a pointer can read and write to a cell. Unlike brainfood, Something has an unbounded tape, and it has 13 instructions instead of 8.",
    "url": "https://esolangs.org/wiki/Something",
    "language_short": "",
    "code": "ADD 72\nCHR \nZER\nADD 69\nCHR \nZER\nADD 76\nCHR \nZER\nADD 76\nCHR \nZER\nADD 79\nCHR \nZER\nADD 32\nCHR \nZER\nADD 87\nCHR \nZER\nADD 79\nCHR \nZER\nADD 82\nCHR \nZER\nADD 76\nCHR \nZER\nADD 68\nCHR \nZER"
  },
  {
    "id": "881",
    "title": "Sortle",
    "description": "Sortle is an esoteric programming language created by Scott Feeney in 2005 based on the concept of insertion sort. Programs consist of lists of named expressions, which are sorted and evaluated from top to bottom. Expressions have no side effects; the result of an expression becomes the new name of the expression, and the list's order is adjusted accordingly.",
    "url": "https://esolangs.org/wiki/Sortle",
    "language_short": "plaintext",
    "code": "hello := \"hello, \" \".!\" \"\" ? ~\r\nworld := \"(.....),.!\" \"\" ? \", world\" ~"
  },
  {
    "id": "882",
    "title": "SoupScript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "PrintLn Hello World!\r\n \r\nBreak"
  },
  {
    "id": "883",
    "title": "Spaghetti",
    "description": "Spaghetti, created by Jeffry Johnston in 2001, is \"designed to produce spaghetti code, to the point where every program line can be arranged pretty much randomly and the program should still function properly.\"",
    "url": "https://esolangs.org/wiki/Spaghetti",
    "language_short": "plaintext",
    "code": "10[?100]11\r\n9[?108]10\r\n13[?101]2\r\n12[?10]0\r\n4[?111]5\r\n8[?114]9\r\n2[?108]3\r\n11[?33]12\r\n6[?87]7\r\n3[?108]4\r\n1[?48]13\r\n5[?32]6\r\n7[?111]8"
  },
  {
    "id": "884",
    "title": "SpaghettiScript",
    "description": "SpaghettiScript is a joke language created by User:UltimateProGrammer in 2020. It is similar to bf, however it uses the idea of functions. All code in SpaghettiScript is called spaghetti code. It is tape based, and Turing-complete.",
    "url": "https://esolangs.org/wiki/SpaghettiScript",
    "language_short": "plaintext",
    "code": "[1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA\r\n⇢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:OA] ---≡1 "
  },
  {
    "id": "885",
    "title": "SparQL",
    "description": "SPARQL (pronounced \"sparkle\" /ˈspɑːkəl/, a recursive acronym for SPARQL Protocol and RDF Query Language) is an RDF query language—that is, a semantic query language for databases—able to retrieve and manipulate data stored in Resource Description Framework (RDF) format. It was made a standard by the RDF Data Access Working Group (DAWG) of the World Wide Web Consortium, and is recognized as one of the key technologies of the semantic web. On 15 January 2008, SPARQL 1.0 was acknowledged by W3C as an official recommendation, and SPARQL 1.1 in March, 2013.",
    "url": "https://en.wikipedia.org/wiki/SPARQL",
    "language_short": "c-like",
    "code": "SELECT ?h WHERE { \r\n    VALUES ?h { \"Hello World!\" } \r\n}"
  },
  {
    "id": "886",
    "title": "Spin",
    "description": "Spin is an esoteric programming language made by User:Hohoo. Its syntax resembles BASIC.",
    "url": "https://esolangs.org/wiki/Spin",
    "language_short": "plaintext",
    "code": "START TO SPIN!\r\nSPIN THIS ALL! High end lock likes offering. With old red lamps dodged.\r\nSTOP SPINNING!"
  },
  {
    "id": "887",
    "title": "Spiral",
    "description": "Spiral, devised by User:Quintopia, is an esoteric programming language in two dimensions. Unlike other two-dimensional languages (exception: Wierd), the instruction pointer decides where to move based on where there is code to execute. In addition, the only data structure is a deque.",
    "url": "https://esolangs.org/wiki/Spiral",
    "language_short": "plaintext",
    "code": "e0v ***   *eXlv**   *lX      *2X       **oXi\r\nv * * *   *     *   * 2      * o      **   v*\r\n* * * *   * *****   * v      * v      * *iX *\r\n* * * *   * *       * ^      v *      * * w *\r\n* *** *   * *****   * v      * *      * * v *\r\n*     *   *     ^   * ^      * *      * * * *\r\n* *** *   * ****v   * v      * *      v * * *\r\n* * * *   * *       * *      * *      ^ * * *\r\n* * * *   * *****   * *****  * *****  * *** *\r\n* * * *   *     *   *     *  *     *  **   **\r\n*** ***   *******   *****v^  *******   *****\r\n \r\n \r\n*wX ***    **3Xp    *rX4..   d5*      qd**  \r\n* 3 * *   **   v^   *    ..  * *      *  ***\r\n* v * ^   * #pX v   * ..  .  * *      *    **\r\n* *** v   * # r #   * ..  .  * *      * !q* *\r\n* * * *   * # v #   * 54 ..  * *      * * * *\r\n* * * *   * # * #   *   @X   * *      * * * *\r\n* * * *   * # * #   *   v    * *      * * * *\r\n* * * *   * # * #   * * **   * *      * * * *\r\n*  *  *   * # * #   * ** **  * *      * *** *\r\n*  *  *   * #v* ^   * *** *  * *****  *    **\r\n** * **   **   *v   * * * *  *     *  *  ***\r\n    *****     *v^**    *** ***  *******  **** "
  },
  {
    "id": "888",
    "title": "Spleenmap",
    "description": "Spleenmap is a 2D language designed by fr34k in 2009. It uses four instructions, but only one to control data.",
    "url": "https://esolangs.org/wiki/Spleenmap",
    "language_short": "plaintext",
    "code": "   .++  ...+...+...\r\n+++ +* .         +\r\n++      ++       +.\r\n.        +       +\r\n.+       + +..+ ++\r\n++ +++ .+ +  + +\r\n    +.. + .  + .+ .++\r\n        . ...+ +    +\r\n    ++.      +. ++.\r\n    +         . .\r\n    .+       ++ ++\r\n    +++     +   +++   ?++.\r\n        +     +     +      .\r\n        .     +   ++.     ++\r\n        ++     ++. +  +++  +\r\n        +        . +... ++ +\r\n        .+   ++. .       +..\r\n        +++ + +++\r\n        ++."
  },
  {
    "id": "889",
    "title": "Splinter",
    "description": "Splinter is an esoteric programming language designed by Keymaker in 2007. It was intended to be Turing-incomplete, and was purposefully kept so, but initially wrongly classified as a finite-state machine, the author not realizing certain things could be done with it, after all. Later, User:ais523 proved it to be a push-down automaton. The language has 26 unbounded memory storages, splinters, but not enough abilities to modify their content. The language has three instructions, one for placing data from splinters to the current program execution, one to set content for splinters, and one for output.",
    "url": "https://esolangs.org/wiki/Splinter",
    "language_short": "plaintext",
    "code": "\\H\\e\\l\\l\\o\\,\\ \\w\\o\\r\\l\\d\\!\\"
  },
  {
    "id": "890",
    "title": "Spoon",
    "description": "Spoon is a Brainfuck derivative invented by S. Goodwin in 1998. It uses Huffman-coded binary sequences to represent each instruction.",
    "url": "https://esolangs.org/wiki/Spoon",
    "language_short": "plaintext",
    "code": "0101111111110010001111111111010000001101100101001011111110010001111110\n1000000110111001010111111100101000101011100101001011111111111001000110\n0000000000000000001000000110110000010100000000000000000000000000000000\n0000000101001011111111111001000111111101000000110110010100101111110010\n0011111101000000110110010101110010100000000000000000000010100000000000\n0000000000000000101001011111111111001000110000000000000000000100000011\n011000001010"
  },
  {
    "id": "891",
    "title": "SPSS",
    "description": "SPSS Statistics is a software package used for interactive, or batched, statistical analysis. Long produced by SPSS Inc., it was acquired by IBM in 2009. Current versions (post 2015) have the brand name: IBM SPSS Statistics.",
    "url": "https://en.wikipedia.org/wiki/SPSS",
    "language_short": "c-like",
    "code": "BEGIN PROGRAM.\r\nprint \"Hello, world!\"\r\nEND PROGRAM."
  },
  {
    "id": "892",
    "title": "SQL",
    "description": "SQL (/ˌɛsˌkjuːˈɛl/ (About this soundlisten) S-Q-L, /ˈsiːkwəl/ \"sequel\"; Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e. data incorporating relations among entities and variables.",
    "url": "https://en.wikipedia.org/wiki/SQL",
    "language_short": "sql",
    "code": "CREATE TABLE HELLO (HELLO CHAR(12))\r\nINSERT INTO HELLO\r\n        VALUES ('HELLO WORLD!')\r\nSELECT * FROM HELLO"
  },
  {
    "id": "893",
    "title": "Squirrel",
    "description": "Squirrel is a high level imperative, object-oriented programming language, designed to be a lightweight scripting language that fits in the size, memory bandwidth, and real-time requirements of applications like video games and embedded systems.",
    "url": "https://en.wikipedia.org/wiki/Squirrel_(programming_language)",
    "language_short": "c-like",
    "code": "print(\"Hello World!\");"
  },
  {
    "id": "894",
    "title": "Stackint",
    "description": "Stackint is an esolang by User:PythonshellDebugwindow. Its only method of storage is, as its name suggests, a stack of integers.",
    "url": "https://esolangs.org/wiki/Stackint",
    "language_short": "plaintext",
    "code": "98*99*54*+99*93*+99*93*+99*65*+84*99*6+99*65*+99*93*+6+99*93*+91+91+*"
  },
  {
    "id": "895",
    "title": "Stackstack",
    "description": "Stackstack is a stack-based programming language made in 2013 by User:T.J.S.1 at 15 years old. It can be described as a Forth-like language. The language began with one main interpreter written in Javascript, but more is being worked on.",
    "url": "https://esolangs.org/wiki/Stackstack",
    "language_short": "plaintext",
    "code": "72 char print 101 char print 108 char dup print print 111 char print \",\" print \" \" print\r\n119 char print 111 char print 114 char print 108 char print 100  char print 33 char print"
  },
  {
    "id": "896",
    "title": "Stanza",
    "description": "In computing, a stanza consists of a related group of lines in a script or configuration file. Formats depend on context.",
    "url": "https://en.wikipedia.org/wiki/Stanza_(computing)",
    "language_short": "c-like",
    "code": "println(\"Hello World\")"
  },
  {
    "id": "897",
    "title": "Starlark",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "898",
    "title": "sTBF",
    "description": "STBF(or SCTBF), or rather S-CODE To BrainFuck is a program I made on Scratch recently (here) that compiles simple S-CODE (syntax a bit similar to BASIC or M-CODE) into (somewhat compact) BF code! (It's still in BETA, so don't expect it being AMAZING)",
    "url": "https://esolangs.org/wiki/STBF",
    "language_short": "",
    "code": "phrase Hello, World!"
  },
  {
    "id": "899",
    "title": "Stlisp",
    "description": "Stlisp is a stack-based esoteric programming language with a syntax that looks just like lisp.",
    "url": "https://esolangs.org/wiki/Stlisp",
    "language_short": "c-like",
    "code": "\"Hello, World!\" (print)\r\n\"Hello, World!\" print ()\r\nprint (\"Hello, World!\")\r\nprint \"Hello, World!\"()\r\n(print \"Hello, World!\")\r\n(\"Hello, World!\" print)"
  },
  {
    "id": "900",
    "title": "Streem",
    "description": "Streem is a stream based concurrent scripting language. It is based on a programming model similar to the shell, with influences from Ruby, Erlang, and other functional programming languages.",
    "url": "https://github.com/matz/streem",
    "language_short": "",
    "code": "[\"Hello World\"] | stdout"
  },
  {
    "id": "901",
    "title": "Strelnokoff",
    "description": "Strelnokoff is an esoteric programming language devised by Chris Pressey in 2001. It is a non-deterministic imperative programming language; each instruction unilaterally updates the global state of the program, but there is no guarantee as to the order in which instructions are executed.",
    "url": "https://esolangs.org/wiki/Strelnokoff",
    "language_short": "",
    "code": "REM HELLO WORLD IN STRELNOKOFF\r\nREM CHRIS PRESSEY MARCH 24 2001\r\nX = (X / X) * X + (X = 0) * (T =  0) * (PRINT CHAR 'H' - 'H' +  1)\r\nX = (X / X) * X + (X = 0) * (T =  1) * (PRINT CHAR 'e' - 'e' +  2)\r\nX = (X / X) * X + (X = 0) * (T =  2) * (PRINT CHAR 'l' - 'l' +  3)\r\nX = (X / X) * X + (X = 0) * (T =  3) * (PRINT CHAR 'l' - 'l' +  4)\r\nX = (X / X) * X + (X = 0) * (T =  4) * (PRINT CHAR 'o' - 'o' +  5)\r\nX = (X / X) * X + (X = 0) * (T =  5) * (PRINT CHAR ',' - ',' +  6)\r\nX = (X / X) * X + (X = 0) * (T =  6) * (PRINT CHAR ' ' - ' ' +  7)\r\nX = (X / X) * X + (X = 0) * (T =  7) * (PRINT CHAR 'w' - 'w' +  8)\r\nX = (X / X) * X + (X = 0) * (T =  8) * (PRINT CHAR 'o' - 'o' +  9)\r\nX = (X / X) * X + (X = 0) * (T =  9) * (PRINT CHAR 'r' - 'r' + 10)\r\nX = (X / X) * X + (X = 0) * (T = 10) * (PRINT CHAR 'l' - 'l' + 11)\r\nX = (X / X) * X + (X = 0) * (T = 11) * (PRINT CHAR 'd' - 'd' + 12)\r\nX = (X / X) * X + (X = 0) * (T = 12) * (PRINT CHAR '!' - '!' + 13)\r\nX = (T = X) * 0 + (X > T) * X REM RESET FLAG\r\nT = (X / X) * X + (X = 0) * T REM INCREMENT TICK"
  },
  {
    "id": "902",
    "title": "Stuck",
    "description": "Stuck is a stack-based programming language written in Python by Shebang of the Code Golf SE site. It was inspired by CJam/GolfScript.",
    "url": "https://esolangs.org/wiki/Stuck",
    "language_short": "",
    "code": "\"Hello, world!\""
  },
  {
    "id": "903",
    "title": "stupidBASIC",
    "description": "stupidBASIC is an interpreted stupid programming language that is part of the stupid programming language family. It is syntactically similar to BASIC dialects, but operates similar to Asparagus assembly.",
    "url": "https://esolangs.org/wiki/StupidBASIC",
    "language_short": "",
    "code": "program\r\n  say Hello, world!\r\nend program"
  },
  {
    "id": "904",
    "title": "stupidc",
    "description": "stupidc is a vaguely C-style language that compiles directly to 6502 assembly natively. The compiler, although still in development, can be found at the GitHub repository, and is written in QuickBasic.",
    "url": "https://esolangs.org/wiki/Stupidc",
    "language_short": "",
    "code": "system(&BE6502);\r\ninclude(#\"lcd.sc\");\r\n\r\nreset({\r\n $$lcd.init(:lcd.init.8x10);\r\n $$lcd.print(:hworld);\r\n});\r\n\r\nmem(:hworld,#\"Hello, world!\");"
  },
  {
    "id": "905",
    "title": "StupidStackLanguage",
    "description": "StupidStackLanguage (or SSL) is an esoteric programming language created by Lebster in which all operations take place on a Stack",
    "url": "https://esolangs.org/wiki/StupidStackLanguage",
    "language_short": "",
    "code": "avdqvdmavvqmiqiiifvdlfbffiiiflblblfbqviiifbfiiifwdfwwiif"
  },
  {
    "id": "906",
    "title": "STXTRM",
    "description": "STXTRM (pronounced as \"StackStream\") is a minimalist self-modifying, stack-based esoteric programming language. It was designed as a direct successor to MSM and created by User:Plugnburn on August 9, 2013 along with its reference implementation.",
    "url": "",
    "language_short": "https://esolangs.org/wiki/STXTRM",
    "code": "[Hello, world!]"
  },
  {
    "id": "907",
    "title": "Stylus",
    "description": "Stylus is a dynamic stylesheet preprocessor language that is compiled into Cascading Style Sheets (CSS). Its design is influenced by Sass and LESS. It's regarded as the fourth most used CSS preprocessor syntax.",
    "url": "https://en.wikipedia.org/wiki/Stylus_(stylesheet_language)",
    "language_short": "",
    "code": "body::before\r\n    content: \"Hello World\""
  },
  {
    "id": "908",
    "title": "SubleQ",
    "description": "Subleq refers to a kind of OISC where the one instruction is \"SUBtract and branch if Less-than or EQual to zero\", conventionally abbreviated to subleq.",
    "url": "https://esolangs.org/wiki/Subleq",
    "language_short": "",
    "code": "############################################\r\n# FileName: helloworld.sq\r\n# Author: Lawrence Woodman\r\n# Date: 26th March 2009\r\n#===========================================\r\n# Outputs 'hello, world'\r\n############################################\r\nloop: hello (-1) # Outputs character pointed to by hello\r\n minusOne loop # Increments character output pointer to next character\r\n minusOne checkEnd+1 # Increments end of string pointer to next character\r\ncheckEnd: Z hello (-1) # Halts program if character at pointer is zero\r\n Z Z loop # Jumps to loop\r\n \r\n# Data Storage \r\n. minusOne: -1 # Used to increment pointer\r\n. hello: \"hello, world\\n\" Z: 0 # Zero terminated string to print"
  },
  {
    "id": "909",
    "title": "Subskin",
    "description": "Subskin is an OISC variant with a very short (148 bytes of code) Ruby implementation written by Jannis Harder in 2005. Subskin is an abbreviation for \"subtract and skip if negative\", which is the only instruction.",
    "url": "https://esolangs.org/wiki/Subskin",
    "language_short": "",
    "code": "2\r\n48\r\n18\r\na\r\n1\r\n2\r\n4\r\n2\r\na\r\n6\r\n0\r\n100\r\na\r\n21\r\n64\r\n6c\r\n72\r\n6f\r\n77\r\n20\r\n2c\r\n6f\r\n6c\r\n6c\r\n65"
  },
  {
    "id": "910",
    "title": "suicide",
    "description": "suicide is a language create by User:fr34k in 2008. suicide is Turing complete. It has a limit of 676 variables, but if these are unbounded it can emulate a Minsky machine.",
    "url": "https://esolangs.org/wiki/Suicide",
    "language_short": "",
    "code": "<*vAA:\"Hello, world!\""
  },
  {
    "id": "911",
    "title": "Super Stack!",
    "description": "Super Stack! is a stack-based esoteric programming language by User:Orange.",
    "url": "Super Stack!",
    "language_short": "",
    "code": "0 33 100 108 114 111 87 32 44 111 108 108 101 72\r\nif outputascii fi"
  },
  {
    "id": "912",
    "title": "SuperCollider",
    "description": "SuperCollider is an environment and programming language originally released in 1996 by James McCartney for real-time audio synthesis and algorithmic composition.",
    "url": "https://en.wikipedia.org/wiki/SuperCollider",
    "language_short": "",
    "code": "\"Hello World\".postln;"
  },
  {
    "id": "913",
    "title": "Surtic",
    "description": "Surtic (\"Sir Chick\") is an esoteric programming language created by User:Digital Hunter with help from User:Galaxtone. \"Surtic\" is \"citrus\" spelled backwards, with some artistic liberty taken in its pronunciation.",
    "url": "https://esolangs.org/wiki/Surtic",
    "language_short": "",
    "code": "c0++++++++fc0[c1++++fc1[c1‑c2++c3+++c4+++c5+]c0‑c2+c3+c4‑c6+]oc2c3---oc3c3+++++++oc3oc3c3+++oc3oc5c4‑oc4oc3c3+++oc3c3------oc3fc6[c3-]oc3c5+oc5c6++oc6"
  },
  {
    "id": "914",
    "title": "Svelte",
    "description": "Svelte is a free and open-source front end compiler created by Rich Harris and maintained by the Svelte core team members. Svelte applications do not include framework references. Instead, building a Svelte application generates code to manipulate the DOM, which may reduce the size of transferred files as well as give better client startup and run-time performance. Svelte has its own compiler for converting app code into client-side JavaScript at build time. It is written in TypeScript. The Svelte source code is licensed under MIT License and hosted on GitHub.",
    "url": "https://en.wikipedia.org/wiki/Svelte",
    "language_short": "",
    "code": "<script>\r\n  let message = 'Hello World';\r\n</script>\r\n\r\n<p>{ message }</p>"
  },
  {
    "id": "915",
    "title": "SVG",
    "description": "Scalable Vector Graphics (SVG) is an Extensible Markup Language (XML)-based vector image format for two-dimensional graphics with support for interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium (W3C) since 1999.",
    "url": "https://en.wikipedia.org/wiki/Scalable_Vector_Graphics",
    "language_short": "",
    "code": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n<svg width=\"240\" height=\"100\" viewBox=\"0 0 240 100\" zoomAndPan=\"disable\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"  xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <title>Hello World</title>\r\n    <g>\r\n      <text x=\"10\" y=\"50\">Hello World</text>\r\n      <animate attributeName='opacity' values='0;1' dur='4s' fill='freeze' begin=\"0s\"/>\r\n    </g>\r\n</svg>"
  },
  {
    "id": "916",
    "title": "SVM",
    "description": "SVM is an esoteric programming language by David Catt (user:David.werecat) that works as a virtual machine with expandable memory.",
    "url": "https://esolangs.org/wiki/SVM",
    "language_short": "",
    "code": "## The hello world program in SVM code\r\nAM =0000000C\r\nCM $$Hello World!,=0000000C,*00000000\r\nDD *00000000,=0000000C\r\nIC *00000000\r\nEP"
  },
  {
    "id": "917",
    "title": "Swift",
    "description": "Swift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. and the open-source community, first released in 2014. Swift was developed as a replacement for Apple's earlier programming language Objective-C, as Objective-C had been largely unchanged since the early 1980s and lacked modern language features. Swift works with Apple's Cocoa and Cocoa Touch frameworks, and a key aspect of Swift's design was the ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades.",
    "url": "https://en.wikipedia.org/wiki/Swift_(programming_language)",
    "language_short": "",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "918",
    "title": "Swordfish",
    "description": "Swordfish is a 2D language created by User:Numeri in 2013. It was based loosely off of ><>.",
    "url": "https://esolangs.org/wiki/Swordfish",
    "language_short": "",
    "code": "Hello:, \\\r\n,,/#;,,,W\r\n,,\\!dlro/"
  },
  {
    "id": "919",
    "title": "SYCPOL (System card programming language)",
    "description": "SYCPOL (System card programming language, pronounced /'sɪkpɔl/) is a mildly esoteric programming language created by User:Fergusq in 2014 inspired by COBOL (not Card Orientations Based Object Language). The program is a set of system cards which are interpreted by a \"system card machine\".",
    "url": "https://esolangs.org/wiki/SYCPOL",
    "language_short": "plaintext",
    "code": "COMMENT           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nTHESE  CARDS  PROVIDED\r\nIN THIS  FILE  ARE THE\r\nIMPLEMENTATION  OF THE\r\nFAMOUS  \"HELLO  WORLD\"\r\nPROGRAM   IN   SYCPOL.\r\n \r\nTHE IMPLEMENTATION  OF\r\nTHE  \"PRINT TO STREAM\"\r\nPROCEDURE     FROM THE\r\nSTANDARD LIBRARY    IS\r\nINCLUDED FOR THOSE WHO\r\nDON'T HAVE IT ALREADY.\r\n \r\nTHESE CARDS        ARE\r\nRELEASED  IN SO CALLED\r\n\"PUBLIC DOMAIN\".\r\n \r\n \r\n \r\nCOMMENT           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nA SHORT NOTE ABOUT THE\r\nFORMAT OF THE PROGRAM.\r\n \r\nALL  SPACES   INCLUDED\r\nARE MANDATORY.\r\n \r\nTHIS  PROGRAM  DOESN'T\r\nCONTAIN    THE   WHOLE\r\nSTANDARD LIBRARY, ONLY\r\nTHE  \"PRINT TO STREAM\"\r\nPROCEDURE.\r\n \r\nTHIS PROGRAM USES ONLY\r\nDATATYPES \"INTEGER 8\",\r\n\"STRING 8\" AND \"STRING\r\n16\".\r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\nDOCUMENTATION DIVISION\r\n \r\nIDENTIFIER   STRING 16\r\n\"HELLO WORLD\"\r\n \r\nAUTHOR NAME  STRING 16\r\n\"GERMANYBOY\"\r\n \r\nIMPORTS       DIVISION\r\n \r\n!PS EXTERNAL PROCEDURE\r\n \r\nMODULE NAME   STRING 8\r\n\"STDIO\"\r\n \r\nIDENTIFIER   STRING 16\r\n\"PRINT TO STREAM\"\r\n \r\nINPUT OUTPUT  DIVISION\r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nOPEN STANDARD OUTPUT\r\nCLOSE STANDARD INPUT\r\n \r\n.STDOUT  OUTPUT STREAM\r\nOUTS STANDARD OUTPUT\r\n \r\nSTORAGE       DIVISION\r\n \r\n.TEXT        STRING 16\r\n\"HELLO WORLD!\"\r\n \r\nPROGRAM CODE  DIVISION\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nMAIN         PROCEDURE\r\n(1) PROCEED TO !PS\r\n        WITH ARGUMENTS\r\n        .TEXT\r\n        .OUTPUT\r\n(2) RETURN\r\n        WITH SUCCESS\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\nDOCUMENTATION DIVISION\r\n \r\nIDENTIFIER    STRING 8\r\n\"STDIO\"\r\n \r\nAUTHOR NAME  STRING 16\r\n\"GERMANYBOY\"\r\n \r\nSTORAGE       DIVISION\r\n \r\n.ZERO        INTEGER 8\r\n0\r\n \r\nPROGRAM CODE  DIVISION\r\n \r\n \r\n \r\n \r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\n!PRINTTS     PROCEDURE\r\n \r\nIDENTIFIER   STRING 16\r\n\"PRINT TO STREAM\"\r\n \r\nPARAMETER      SECTION\r\n \r\n$$TEXT        STRING 32\r\n$$STREAM  OUTPUT STREAM\r\n \r\nVARIABLE       SECTION\r\n \r\n$$I           INTEGER 8\r\n0\r\n \r\n$$L           INTEGER 8\r\nUNDEFINED\r\n \r\n \r\nPROGRAM           CARD\r\nSTANDARD SYSTEM CARD I\r\n \r\nPROCEDURE CODE SECTION\r\n(1) CHANGE $$L\r\n        TO THE LENGTH\r\n        OF $$TEXT\r\n(2) IF $$I=$$L       (6)\r\n(3) SEND THE CHARACTER\r\n        AT $$I\r\n        IN $$TEXT\r\n        TO $$STREAM\r\n(4) INCREMENT $$I\r\n(5) JUMP           (2)\r\n(6) RETURN\r\n        WITH SUCCESS"
  },
  {
    "id": "920",
    "title": "SystemTap",
    "description": "In computing, SystemTap (stap) is a scripting language and tool for dynamically instrumenting running production Linux kernel-based operating systems. System administrators can use SystemTap to extract, filter and summarize data in order to enable diagnosis of complex performance or functional problems.",
    "url": "https://en.wikipedia.org/wiki/SystemTap",
    "language_short": "",
    "code": "probe oneshot { println(\"Hello World\") }"
  },
  {
    "id": "921",
    "title": "Takeover",
    "description": "Takeover is an esoteric programming language created by User:ais523 in 2016. The original idea that inspired the language was to create a language in which standard input was appended to the program before it started to execute (thus making the null program a self-interpreter), and the rest of the language was designed around this concept. The resulting language has some similarities to Splinter, and some similarities to the non-esoteric language Forth.",
    "url": "https://esolangs.org/wiki/Takeover",
    "language_short": "plaintext",
    "code": "[>+>->[>]><>>>,>.[Hello, world!]]>++"
  },
  {
    "id": "922",
    "title": "Taktentus",
    "description": "Taktentus is an simple language with equal. Author is Jacek Szewczyk. Language was created in 2015.",
    "url": "https://esolangs.org/wiki/Taktentus",
    "language_short": "plaintext",
    "code": "%% Write \"Hello, World!\"\r\nh:=72\r\n    @wy := h\r\nh+=29  @wy := h\r\nh+=7   @wy := h @wy := h\r\nh:=111 @wy := h\r\nh:=44  @wy := h @wy := @spacja\r\nh:=87  @wy := h\r\nh+=24  @wy := h\r\nh+=3   @wy := h\r\nh+=-6  @wy := h\r\nh-=8   @wy := h\r\nh:=33  @wy := h"
  },
  {
    "id": "923",
    "title": "Tao Presentations",
    "description": "TAO is the French acronym for Testing Assisté par Ordinateur (Computer Based Testing).",
    "url": "https://en.wikipedia.org/wiki/TAO_(e-Testing_platform)",
    "language_short": "angelscript",
    "code": "// ****************************************************************************\r\n//  hello_world.ddd                                                 Tao project\r\n// ****************************************************************************\r\n//\r\n// File Description:\r\n//\r\n// Original hello world with Tao Presentations.\r\n// http://www.taodyne.com/shop/en/blog/3-getting-started-with-tao-presentations\r\n//\r\n//\r\n//\r\n// ****************************************************************************\r\n//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>\r\n//  (C) 2010 Jérôme Forissier <jerome@taodyne.com>\r\n//  (C) 2010 Catherine Burvelle <cathy@taodyne.com>\r\n//  (C) 2010 Taodyne SAS\r\n// ****************************************************************************\r\n \r\ncolor \"white\"\r\nmilkyway 10000\r\nrotatez -23\r\nearth 400\r\nhello_world 440\r\n \r\n \r\nmilkyway R ->\r\n// ----------------------------------------------------------------------------\r\n//    Draw the Milky Way\r\n// ----------------------------------------------------------------------------\r\n    locally\r\n        texture_wrap true, true\r\n        texture_transform {scale 5, 5, 5}\r\n        texture \"milkyway.jpg\"\r\n        rotatey 0.02 * page_time + 100\r\n        scale 1, -1, 1\r\n        sphere R\r\n \r\n \r\nearth R ->\r\n// ----------------------------------------------------------------------------\r\n//    Draw Earth\r\n// ----------------------------------------------------------------------------\r\n    locally\r\n        texture \"earth.bmp\"\r\n        texture_wrap true, true\r\n        rotatey 5 * page_time + 250\r\n        sphere 0, 0, 0, R\r\n \r\n \r\nhello_world R ->\r\n// ----------------------------------------------------------------------------\r\n//    Draw \"hello world\" text\r\n// ----------------------------------------------------------------------------\r\n    locally\r\n        frame_texture 1900, 600,\r\n            color 1, 1, 1, 1\r\n            reset_transform\r\n            // If font Arial Unicode installed, it will be used.\r\n            // Otherwise, unifont will be used (unifont is packaged\r\n            // with Tao presentations).\r\n            font \"Arial Unicode MS\", \"unifont\", 72\r\n            move_to -800, -9, 0\r\n            text \"Hello World! or Καλημέρα κόσμε; or こんにちは 世界\"\r\n        rotatey -11 * page_time + 180\r\n        color 20% , 20% , 20% , 70%\r\n        sphere 0, 0, 0, R - 30\r\n        color 100% , 90% , 20% , 90%\r\n        sphere 0, 0, 0, R"
  },
  {
    "id": "924",
    "title": "TapeBagel",
    "description": "TapeBagel is an esoteric programming language that uses an integer array of three integers to make up most of the commands and operators. It was made by S. R. Farmer in May, 2006, a full time SDK is currently in the works. The commands and operators consist of two to seven special characters such as the pound sign etc. The first character or set of characters tells which class the operator is in. The second character or set of characters will have another character telling which command or operator in that class (see below).",
    "url": "https://esolangs.org/wiki/TapeBagel",
    "language_short": "plaintext",
    "code": "%% %++ %++ %++ %++ %++ %++ %++ %++ @* ## %++ %++ %++ %++ %++ @* ## %++\r\n%++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ @* @* ## %++ %++ %++ %++\r\n%++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ @* ## @* %++ %++ %++ %++\r\n%++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ @* ## %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ @* ## %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ %++ %++ %++ @* ##  %++ %++ %++ %++ %++ %++ %++ %++ %++ %++\r\n%++ %++ @* ## %++ %++ %++ %++ @* ##"
  },
  {
    "id": "925",
    "title": "Tcl",
    "description": "Tcl (pronounced \"tickle\" or as an initialism) is a high-level, general-purpose, interpreted, dynamic programming language. It was designed with the goal of being very simple but powerful. Tcl casts everything into the mold of a command, even programming constructs like variable assignment and procedure definition. Tcl supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles.",
    "url": "https://en.wikipedia.org/wiki/Tcl",
    "language_short": "c-like",
    "code": "puts \"Hello World\""
  },
  {
    "id": "926",
    "title": "TCSH",
    "description": "tcsh (/ˌtiːˈsiːʃɛl/ “tee-see-shell”, /ˈtiːʃɛl/ “tee-shell”, or as “tee see ess aitch”, tcsh) is a Unix shell based on and backward compatible with the C shell (csh).",
    "url": "https://en.wikipedia.org/wiki/Tcsh",
    "language_short": "bash",
    "code": "#!/bin/tcsh\r\necho \"Hello, World!\""
  },
  {
    "id": "927",
    "title": "Telephone",
    "description": "",
    "url": "",
    "language_short": "yaml",
    "code": "#How to Spell HELLO WORLD on a standard telephone keypad\r\n43556 96753"
  },
  {
    "id": "928",
    "title": "Terra",
    "description": "In Terra, we just gave in to the trend of making the meta-language of C/C++ more powerful and replaced it with a real programming language",
    "url": "https://terralang.org/",
    "language_short": "",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "929",
    "title": "TeX",
    "description": "In 1979, Honeywell Information Systems announced a new programming language for their time-sharing service named TEX, an acronym for the Text Executive text processing system. TEX was a first generation scripting language, developed around the time of AWK and used by Honeywell initially as an in-house system test automation tool.",
    "url": "https://en.wikipedia.org/wiki/Text_Executive_Programming_Language",
    "language_short": "latex",
    "code": "Hello World\r\n\\bye"
  },
  {
    "id": "930",
    "title": "The Amnesiac From Minsk",
    "description": "The Amnesiac From Minsk is a series of esoteric programming languages designed by User:ais523 towards the end of 2015. They are arranged as a sequence of \"difficulty levels\"; higher-level languages are intended to be harder to program in (and lower-level languages can be seen as wimpmodes for the higher-level languages). Minsky machines can be seen as a \"level 0\", or a wimpmode for the language as a whole, as they have a strict superset of its functionality.",
    "url": "https://esolangs.org/wiki/The_Amnesiac_From_Minsk",
    "language_short": "angelscript",
    "code": "L1\t +\t =\t -\n0:\t-0;\t-1;\t+58;\t@1\n1:\t-0;\t-2;\t+59;\t@2\n2:\t-0;\t-3;\t+58;\t@3\n3:\t-0;\t-4;\t+59;\t@2\n4:\t-0;\t-5;\t+58;\t@5\n5:\t-0;\t-6;\t+59;\t@3\n6:\t-0;\t-7;\t+58;\t@3\n7:\t-0;\t-8;\t+59;\t@2\n8:\t-0;\t-9;\t+58;\t@2\n9:\t-0;\t-10;\t+59;\t@2\n10:\t-0;\t-11;\t+58;\t@2\n11:\t-0;\t-12;\t+59;\t@3\n12:\t-0;\t-13;\t+58;\t@2\n13:\t-0;\t-14;\t+59;\t@3\n14:\t-0;\t-15;\t+58;\t@4\n15:\t-0;\t-16;\t+59;\t@3\n16:\t-0;\t-17;\t+58;\t@2\n17:\t-0;\t-18;\t+59;\t@3\n18:\t-0;\t-19;\t+58;\t@4\n19:\t-0;\t-20;\t+59;\t@3\n20:\t-0;\t-21;\t+58;\t@2\n21:\t-0;\t-22;\t+59;\t@5\n22:\t-0;\t-23;\t+58;\t@3\n23:\t-0;\t-24;\t+59;\t@2\n24:\t-0;\t-25;\t+58;\t@2\n25:\t-0;\t-26;\t+59;\t@3\n26:\t-0;\t-27;\t+58;\t@5\n27:\t-0;\t-28;\t+59;\t@2\n28:\t-0;\t-29;\t+58;\t@7\n29:\t-0;\t-30;\t+59;\t@4\n30:\t-0;\t-31;\t+58;\t@2\n31:\t-0;\t-32;\t+59;\t@4\n32:\t-0;\t-33;\t+58;\t@2\n33:\t-0;\t-34;\t+59;\t@3\n34:\t-0;\t-35;\t+58;\t@2\n35:\t-0;\t-36;\t+59;\t@5\n36:\t-0;\t-37;\t+58;\t@2\n37:\t-0;\t-38;\t+59;\t@4\n38:\t-0;\t-39;\t+58;\t@3\n39:\t-0;\t-40;\t+59;\t@2\n40:\t-0;\t-41;\t+58;\t@3\n41:\t-0;\t-42;\t+59;\t@3\n42:\t-0;\t-43;\t+58;\t@2\n43:\t-0;\t-44;\t+59;\t@3\n44:\t-0;\t-45;\t+58;\t@4\n45:\t-0;\t-46;\t+59;\t@3\n46:\t-0;\t-47;\t+58;\t@3\n47:\t-0;\t-48;\t+59;\t@2\n48:\t-0;\t-49;\t+58;\t@5\n49:\t-0;\t-50;\t+59;\t@2\n50:\t-0;\t-51;\t+58;\t@5\n51:\t-0;\t-52;\t+59;\t@2\n52:\t-0;\t-53;\t+58;\t@5\n53:\t-0;\t-54;\t+59;\t@2\n54:\t-0;\t-55;\t+58;\t@2\n55:\t-0;\t-56;\t+59;\t@2\n56:\t-0;\t-57;\t+58;\t@2\n57:\t+57;\t+57;\t+57;\t@2\n58:\t-0;\t-0;\t-0;\t@2\n59:\t-0;\t-0;\t-0;\t@2"
  },
  {
    "id": "931",
    "title": "The Waterfall Model",
    "description": "The Waterfall Model is an esoteric programming language (or possibly a computational model) created by User:ais523 in 2018. It can be seen as a simplification of counter machines along different lines from The Amnesiac From Minsk; however, similarly to that language, it's intended as a source language for proving the Turing-completeness of other languages by compiling The Waterfall Model into them. Historically, though, it was originally created as a derivative of Kangaroo (and the first informal proof of its Turing-completeness was by analogy with the proof for Kangaroo, although there are simpler and more rigorous proofs available).",
    "url": "https://esolangs.org/wiki/The_Waterfall_Model",
    "language_short": "json",
    "code": "[[27425257720895005854917070679642,\r\n    17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],\r\n[  2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2],\r\n[  3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 2, 2],\r\n[  3, 2, 2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 0, 2, 2],\r\n[  3, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2],\r\n[  3, 2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 2, 0, 4, 2, 0, 2, 2],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 2],\r\n[  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 2, 2, 2, 2, 2],\r\n[ 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[27425257720895005854917070679641,\r\n    1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1],\r\n[  3, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 9],\r\n[  3, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1],\r\n[239, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1],\r\n[  5, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1],\r\n[  3, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 3, 1],\r\n[  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]]\r\n"
  },
  {
    "id": "932",
    "title": "TheSquare",
    "description": "TheSquare is an esoteric programming language made by Ben Russell in 2006 which is inspired by Befunge.",
    "url": "https://esolangs.org/wiki/TheSquare",
    "language_short": "plaintext",
    "code": "v#############@\r\n+:DDDDDDDDDDD:[\r\n+#;;;;;;;;;;;#\r\n+              \r\n+ ;;\r\n+  >v      ;\r\n+ JJ+      >v\r\n+>^-+      J-\r\n+/--+      --\r\nv{>[<;;    --\r\n/- +  >v;  --\r\n+\\ +;JJ+>v --\r\n++ +>^++J- --\r\n++ +J++++-;--\r\n++ >^>^++->^-\r\n++     ++-Jv<\r\n>^     >^-+ ;\r\n#      v-<+>[ ^\r\n#      - ;+\r\n#      >-[^"
  },
  {
    "id": "933",
    "title": "THP",
    "description": "",
    "url": "",
    "language_short": "pgsql",
    "code": "; Hello World in \"The Harper Programmer\"\r\n; Compiled and tested with version 2.0 Sybex Edition\r\n \r\nVariable        Msg,13,\"Hello, World!\"\r\n \r\nWrite           Msg"
  },
  {
    "id": "934",
    "title": "THue",
    "description": "Thue is an esoteric programming language invented by John Colagioia in 2000. It is a matrioshka language based on nondeterministic string rewriting which the author describes as a constraint-programming version of a Turing tarpit.",
    "url": "https://esolangs.org/wiki/Thue",
    "language_short": "plaintext",
    "code": "a::=~Hello World!\r\n::=\r\na"
  },
  {
    "id": "935",
    "title": "Thutu",
    "description": "Thutu is an esoteric programming language created by User:ais523 and released in 2007. It was based on Thue; although it was created independently of Thubi, the languages evolved along similar lines. Thutu resembles Thue and ///, but uses regular expressions rather than just strings, and has a more sophisticated flow-control system (in Thue, lines execute nondeterministically, or sequentially in ///, but in Thutu the order of flow can be controlled using command characters).",
    "url": "https://esolangs.org/wiki/Thutu",
    "language_short": "plaintext",
    "code": "/^=1$$/Hello, world!=n=x=9/"
  },
  {
    "id": "936",
    "title": "TI Hexadecimal",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "AsmPrgm\r\nEF4045\r\n111A1A\r\nED53D786\r\n21A89D\r\nEF6145\r\nC9\r\n48656C6C6F20776F726C64202100"
  },
  {
    "id": "937",
    "title": "TiBasic (TI-BASIC)",
    "description": "TI-BASIC is the official name of a BASIC-like language built into Texas Instruments (TI)'s graphing calculators. TI-BASIC is a language family of three different.",
    "url": "https://en.wikipedia.org/wiki/TI-BASIC",
    "language_short": "less",
    "code": "PROGRAM:HELLOW\r\n:ClrHome\r\n:Disp \"HELLO WORLD!\""
  },
  {
    "id": "938",
    "title": "Tier",
    "description": "Tier is a stack-based, three-dimensional programming language, created in 2019/2020 by BN.",
    "url": "https://esolangs.org/wiki/Tier",
    "language_short": "plaintext",
    "code": "\"hello, world!\"{#"
  },
  {
    "id": "939",
    "title": "Tiny",
    "description": "Tiny is a small floating point RPN based language created by User:Ron.hudson. It is a console/character type interpretive programming language, in which all statements are either assignments or those that print quoted strings.",
    "url": "https://esolangs.org/wiki/Tiny",
    "language_short": "brainfuck",
    "code": "1 \"Hello, world!\\n\"\r\n2 ."
  },
  {
    "id": "940",
    "title": "TK",
    "description": "Tk is a free and open-source, cross-platform widget toolkit that provides a library of basic elements of GUI widgets for building a graphical user interface (GUI) in many programming languages.",
    "url": "https://en.wikipedia.org/wiki/Tk_(software)",
    "language_short": "plaintext",
    "code": "label .l -text \"Hello World!\"\r\npack .l"
  },
  {
    "id": "941",
    "title": "Toadskin",
    "description": "Toadskin is a minimal esoteric programming language based on combining aspects of brainfuck and Forth.",
    "url": "https://esolangs.org/wiki/Toadskin",
    "language_short": "brainfuck",
    "code": ":V+++++;:XVV;:v-----;:xvv;XXXXXXX++.<XXXXXXXXXX+.V\r\n++..+++.<XXX++.>>XV.XX++++.+++.v-.x++.<XXX+++.<X.>"
  },
  {
    "id": "942",
    "title": "TOGA computer (Toga Enhanced)",
    "description": "The TOGA is a one instruction set computer (OISC), sometimes called an ultimate reduced instruction set computer (URISC), is an abstract machine that uses only one instruction – obviating the need for a machine language opcode. It uses two operands: a memory address where a data of one bit is stored, and program address. Although a unique instruction is used, the language formed by this instruction is demonstrably a bounded-storage machine (failing to be Turing complete only because it cannot reference memory that does not appear as an operand of a source instruction). The TOGA is an esoteric or academic computer, as many instructions are needed to do even a simple operation. However, the TOGA has a very simple architecture and the number of transistors to make a TOGA is extremely low. Therefore, its performance relative to the number of transistor might still be worth note.",
    "url": "https://esolangs.org/wiki/TOGA_computer",
    "language_short": "angelscript",
    "code": "       .include lib.te\r\n \r\nstart: .deref p X\r\n        .testH X print -1\r\nprint: .out X\r\n        .add p BASE p\r\n        .goto start\r\n        \r\n        p:H X:0\r\n        H:72 101; 108 108; 111 44\r\n        32 87; 111 114; 108 100\r\n        33 EOL:10; -1"
  },
  {
    "id": "943",
    "title": "TOML",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "hello = \"world\""
  },
  {
    "id": "944",
    "title": "Trans-dimensional (Trans Dimensional)",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "dimension X;\r\nput [X:1] -> \"Hello World\";\r\noutput get [X:1];"
  },
  {
    "id": "945",
    "title": "Tree",
    "description": "Tree is an esoteric programming language designed by Tslil Clingman in 2008. The author's intentions when designing this language were twofold: Create an esoteric language that looks like a tree and Design a language specifically not Turing Complete.",
    "url": "https://esolangs.org/wiki/Tree",
    "language_short": "gherkin",
    "code": " \r\n                      ^\r\n                    ^^|^^ \r\n                   ^^\\|/^^\r\n                   H^ |/^^^\r\n                     \\| e\r\n                      |/\r\n                   ol~|  \r\n                     \\| \r\n                  , 32|  W\r\n                   \\/ | /      \r\n                    \\ |/   \r\n                 l   \\|  \r\n                 \\  d |   o\r\n                  \\/ !|r /   \r\n                   \\/ |\\/\r\n                    \\ |/ \r\n                     \\|/"
  },
  {
    "id": "946",
    "title": "Tri",
    "description": "Tri is an esoteric programming language by User:Madk. The language is named for the number of symbols in all its keywords.",
    "url": "https://esolangs.org/wiki/Tri",
    "language_short": "plaintext",
    "code": "inc inc psh psh psh mul sto nxt sto psh mul lst psh add \r\nsto prn nxt zro clr inc inc inc psh psh add inc nxt pop \r\ninc psh lst psh mul one psh add sto nxt sto lst lst psh \r\nnxt nxt nxt add sto prn zro inc inc inc psh inc psh add \r\nsto prn prn inc inc inc prn clr lst lst lst psh nxt psh\r\nsub nxt sto inc prn lst one clr inc psh psh inc psh mul \r\nnxt psh sub neg pop prn inc nxt psh nxt sto inc inc inc\r\ninc inc inc inc inc prn lst prn nxt dec dec dec dec dec \r\nprn dec dec dec dec dec dec prn lst dec dec dec dec dec \r\ndec dec dec dec dec dec prn lst prn lin"
  },
  {
    "id": "947",
    "title": "Trigger",
    "description": "Trigger is an esoteric programming language designed in 2005 by Keymaker, based on triggers, which are toggled by patterns (rows of the same character). There are four different patterns, thus four instructions. One for toggling triggers, one for conditional jumping, one for output, and one for input.",
    "url": "https://esolangs.org/wiki/Trigger",
    "language_short": "plaintext",
    "code": "HHHeeelll lllooo   wwwooorrrlllddd!!!"
  },
  {
    "id": "948",
    "title": "Troll Online",
    "description": "Troll Online is a programming language builded in c#. It can connect to internet.",
    "url": "https://esolangs.org/wiki/Troll_Online",
    "language_short": "plaintext",
    "code": "hello world!!¨ç]a\r\n↓ùp👌a"
  },
  {
    "id": "949",
    "title": "TrollScript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Trooloolooloolooloolooloolooloolollooooolooloolooloolooloolooooolooloolooloolooloolooloolooloooooloolooloooooloooloolooloololllllooooloololoooooololooolooloolooloolooloololoolooolooloololooooooloololooooloololooloolooloolooloolooloolooloolooloolooloololooooolooolooloololooollollollollollolllooollollollollollollollollloooooololooooolooll."
  },
  {
    "id": "950",
    "title": "TrumpScript",
    "description": "",
    "url": "",
    "language_short": "python",
    "code": "say \"Hello World\"!\r\nAmerica is great."
  },
  {
    "id": "951",
    "title": "TSQL (Transact-SQL / T-SQL) ",
    "description": "Transact-SQL (T-SQL) is Microsoft's and Sybase's proprietary extension to the SQL (Structured Query Language) used to interact with relational databases. T-SQL expands on the SQL standard to include procedural programming, local variables, various support functions for string processing, date processing, mathematics, etc. and changes to the DELETE and UPDATE statements.",
    "url": "https://en.wikipedia.org/wiki/Transact-SQL",
    "language_short": "sql",
    "code": "DECLARE @message varchar(128)\r\nSELECT  @message = 'Hello World!'\r\nPRINT   @message"
  },
  {
    "id": "952",
    "title": "TTCN3",
    "description": "TTCN-3 (Testing and Test Control Notation version 3) is a strongly typed testing language used in conformance testing of communicating systems. TTCN-3 is written by ETSI in the ES 201 873 series, and standardized by ITU-T in the Z.160 Series. TTCN-3 has its own data types and can be combined with ASN.1, IDL and XML type definitions.",
    "url": "https://en.wikipedia.org/wiki/TTCN-3",
    "language_short": "c-like",
    "code": "module HelloWorld\r\n{\r\n    control\r\n    {\r\n        log(\"Hello, world!\");\r\n    }\r\n}"
  },
  {
    "id": "953",
    "title": "Tunex",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "fn main(args) : void\r\n{\r\n  display(\"Hello World\")\r\n}"
  },
  {
    "id": "954",
    "title": "Turing",
    "description": "Turing is a Pascal-like programming language developed in 1982 by Ric Holt and James Cordy, then of University of Toronto, in Toronto, Ontario, Canada. Turing is a descendant of Euclid, Pascal and SP/k that features a clean syntax and precise machine-independent semantics.",
    "url": "https://en.wikipedia.org/wiki/Turing_(programming_language)",
    "language_short": "python",
    "code": "put \"Hello World\""
  },
  {
    "id": "955",
    "title": "Turth machine (Turth-machine)",
    "description": "Turth-machine is a simple pseudo-code programming language created by User:A.",
    "url": "https://esolangs.org/wiki/Turth-machine",
    "language_short": "c-like",
    "code": "Output \"Hello World\""
  },
  {
    "id": "956",
    "title": "TypeScript",
    "description": "TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript.",
    "url": "https://en.wikipedia.org/wiki/TypeScript",
    "language_short": "typescript",
    "code": "console.log(\"Hello, World!\");"
  },
  {
    "id": "957",
    "title": "Ubercode",
    "description": "Ubercode is a high level programming language designed by Ubercode Software and released in 2005 for Microsoft Windows. Ubercode is influenced by Eiffel and BASIC.",
    "url": "https://en.wikipedia.org/wiki/Ubercode",
    "language_short": "plaintext",
    "code": "    Ubercode 1 class HelloWorld  \r\n \r\n    public function Main()\r\n    code\r\n        call Msgbox(\"Hello World!\", \"My first program\", \"OK\")\r\n    end function\r\n \r\n    end class"
  },
  {
    "id": "958",
    "title": "ubiquity",
    "description": "Ubiquity is the default installer for Ubuntu and its derivatives. It is run from the Live CD or USB and can be triggered to run from the options on the device or on the desktop of the Live mode. It was first introduced in Ubuntu 6.06 LTS \"Dapper Drake\" At program start, it allows the user to change the language to a local language if they prefer. It is designed to be easy to use.",
    "url": "https://en.wikipedia.org/wiki/Ubiquity_(software)",
    "language_short": "c-like",
    "code": "function cmd_hello_world() {\r\n    displayMessage(\"Hello, World!\");\r\n}"
  },
  {
    "id": "959",
    "title": "UClang*",
    "description": "UClang* is a little endian esoteric language created by User:RSG4908 that uses Unicode letters to represent instructions.",
    "url": "https://esolangs.org/wiki/UClang*",
    "language_short": "",
    "code": "A0 48 A1 A0 65 A1 A0 6C A1 A0 6C A1 A0 6F A1 A0 20 A1 A0 77 A1 A0 6F A1\r\nA0 72 A1 A0 6C A1 A0 64 A1 AA"
  },
  {
    "id": "960",
    "title": "Umajin",
    "description": "",
    "url": "",
    "language_short": "pyrhon",
    "code": "println 'Hello World!'"
  },
  {
    "id": "961",
    "title": "Underload",
    "description": "Underload is a stack-based esoteric programming language that works along similar lines to Muriel. It was created by User:ais523 in 2006. Although not technically speaking a functional language, its evaluation operator ^ (which is the only form of flow control) makes programming in it functional in practice.",
    "url": "https://esolangs.org/wiki/Underload",
    "language_short": "plaintext",
    "code": "(Hello, world!)S"
  },
  {
    "id": "962",
    "title": "Unicat",
    "description": "Unicat is an esoteric programming language created in 2015 by User:Gemdude46.\r\n<br>The language is programmed using the 9 cat emoji: ( 😸 😹 😺 😻 😼 😽 😾 😿 🙀 ) All other characters are ignored.",
    "url": "https://esolangs.org/wiki/Unicat",
    "language_short": "plaintext",
    "code": "😻😹😸🙀🙀😹😹😸🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😼😽🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😼😸🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😺😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😾😺🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😼😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😼😹🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😺🙀🙀😽😼😸🙀🙀🙀🙀"
  },
  {
    "id": "963",
    "title": "Unicomal",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "0100 PRINT \"Hello World\""
  },
  {
    "id": "964",
    "title": "Unicon",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "procedure main()\r\n    write(\"Hello World\")\r\nend"
  },
  {
    "id": "965",
    "title": "Unicorn",
    "description": "Unicon is a programming language designed by American computer scientist Clint Jeffery with collaborators including Shamim Mohamed, Jafar Al Gharaibeh, Robert Parlett and others. Unicon descended from Icon and a preprocessor for Icon called IDOL. Compared with Icon, Unicon offers better access to the operating system as well as support for object-oriented programming. Unicon began life as a merger of three popular Icon extensions: an OO preprocessor named Idol, a POSIX filesystem and networking interface, and an ODBC facility. The name is shorthand for \"Unified Extended Dialect of Icon.\"",
    "url": "https://en.wikipedia.org/wiki/Unicon_(programming_language)",
    "language_short": "",
    "code": "procedure main()\r\n    write(\"Hello World\")\r\nend"
  },
  {
    "id": "966",
    "title": "Uniface",
    "description": "Uniface is a low-code development and deployment platform for enterprise applications that can run in a large range of runtime environments, including mobile, mainframe, web, Service-oriented architecture (SOA), Windows, Java EE and .NET. Uniface is used to create mission-critical applications.",
    "url": "https://en.wikipedia.org/wiki/Uniface_(programming_language)",
    "language_short": "",
    "code": "message \"Hello World\""
  },
  {
    "id": "967",
    "title": "Unlambda",
    "description": "Unlambda, designed by David Madore in 1999, is a minimal functional esoteric programming language based on combinatory logic. Notably, it was the first functional Turing tarpit.",
    "url": "https://esolangs.org/wiki/Unlambda",
    "language_short": "plaintext",
    "code": "`r```````````.H.e.l.l.o. .w.o.r.l.di"
  },
  {
    "id": "968",
    "title": "Unreal Script (UnrealScript)",
    "description": "UnrealScript (often abbreviated to UScript) is Unreal Engine's native scripting language used for authoring game code and gameplay events before the release of Unreal Engine 4. The language was designed for simple, high-level game programming. The UnrealScript interpreter was programmed by Tim Sweeney, who also created an earlier game scripting language, ZZT-oop.",
    "url": "https://unreal.fandom.com/wiki/UnrealScript",
    "language_short": "",
    "code": "class HelloWorld extends Mutator;\r\n\r\nfunction PostBeginPlay()\r\n{\r\n  Super.PostBeginPlay();\r\n  Log(\"Hello World\");\r\n}"
  },
  {
    "id": "969",
    "title": "URSL",
    "description": "URSL is an esoteric programming language created by David Catt (user:David.werecat) which has a stack, queue, tape, memory array and ten registers.",
    "url": "https://esolangs.org/wiki/URSL",
    "language_short": "plaintext",
    "code": "v072-w0v0101-w0v0108-w0w0v0111-w0v044-w0v032-w0v0119-w0v0111-w0v0114-w0v0108-w0v0100-w0v033-w0"
  },
  {
    "id": "970",
    "title": "V",
    "description": "The V programming language is a programming language designed by Alexander Medvednikov. Alexander Medvednikov initially created the V programming language for Volt, a desktop client for multiple messaging and communication apps.",
    "url": "https://en.everybodywiki.com/V_(programming_language)",
    "language_short": "plaintext",
    "code": "iHello World!"
  },
  {
    "id": "971",
    "title": "V--",
    "description": "V-- is an interpreted high-level programming language created by Marcus Kaiser in 2007.",
    "url": "https://esolangs.org/wiki/V--",
    "language_short": "plaintext",
    "code": "= Hello,World!"
  },
  {
    "id": "972",
    "title": "Vala",
    "description": "Vala is an object-oriented programming language with a self-hosting compiler that generates C code and uses the GObject system.",
    "url": "https://en.wikipedia.org/wiki/Vala_(programming_language)",
    "language_short": "vala",
    "code": "static void main (string[] args)\r\n{\r\n    stdout.printf (\"Hello World\\n\");\r\n}"
  },
  {
    "id": "973",
    "title": "var'aq",
    "description": "var'aq is an esoteric programming language based on the fictional Klingon language. var'aq was created in 2000 by Brian Connors, with some help from Chris Pressey and Mark Shoulson.",
    "url": "https://esolangs.org/wiki/Var%27aq",
    "language_short": "plaintext",
    "code": "\"Hello, world!\" cha'"
  },
  {
    "id": "974",
    "title": "Varsig",
    "description": "Varsig is a variant by User:Zzo38 of SIG.\r\n<br>There are two data structures, a stack (initialized empty) and a tape (initialized to all zeros). The tape is infinite both ways. There are also 26 variables A to Z, all initialized to zero. You can't change the variable normally, but at the beginning of each run, if that variable has been read any number of times during the previous run, it is incremented at the beginning of the run. The program executes all the codes in order on each run, and won't stop until EXIT command is executed. Any \"number\" can be any non-negative integer, or a letter A to Z to use the current value of that variable.",
    "url": "https://esolangs.org/wiki/Varsig",
    "language_short": "plaintext",
    "code": "!72)!101)!108:))!111)!44)!32)!87)!111)!114)!108)!100)!33)#"
  },
  {
    "id": "975",
    "title": "Velato",
    "description": "Velato is an esoteric programming language by User:Rottytooth, which uses MIDI files as source code. Programs in Velato are defined by the pitch and order of notes. Velato is intended to allow for flexibility in composition, so functional programs will not necessarily sound like random notes. There is a tendency for Velato programs to have jazz-like harmonies.",
    "url": "https://esolangs.org/wiki/Velato",
    "language_short": "plaintext",
    "code": "on \"2.19.64\"\r\n \r\n\\header{\r\n    title = \"Hello, World!\"\r\n}\r\n \r\n\\language \"english\"\r\n \r\n\\paper {\r\n    top-margin = 1.5\\in\r\n    left-margin = 2.0\\in\r\n    right-margin = 2.0\\in\r\n}\r\n \r\n\\score {\r\n    \\transpose c c' {\r\n    % H\r\n    <c a>4\r\n    g8(\r\n    e8 f8\r\n    gs8 d8\r\n    g8) |\r\n \r\n    % e\r\n    a8\r\n    <g e>4.\r\n    <f cs>4\r\n    c16( cs16\r\n    g8 |\r\n \r\n    % l\r\n    a8)\r\n    <g e>8\r\n    <f cs>4\r\n    <c a>4\r\n    g4( |\r\n \r\n    % l\r\n    a16 g16\r\n    e16 f8\r\n    cs8.) <c a g>2 |\r\n \r\n    % o\r\n    a8( g8 e8)\r\n    f8.\r\n    cs16( cs8 cs8 g8 |\r\n \r\n    % ,\r\n    a8 g4\r\n    e8 f8\r\n    e e\r\n    g8) |\r\n \r\n    % space\r\n    a8\r\n    <g e>4.\r\n    f8(\r\n    ds d\r\n    g8 |\r\n \r\n    % W\r\n    a8 g4\r\n    e8 f8\r\n    a8 gs8\r\n    g8) |\r\n \r\n    % o\r\n    a8( g8\r\n    e8 f8\r\n    cs8 cs8) <cs g>4 |\r\n \r\n    % r\r\n    a8( g8\r\n    e8 f8\r\n    cs8 cs8 e8. g16 |\r\n \r\n    % l\r\n    c16 a16)\r\n    <g e>8\r\n    <f cs>4\r\n    <c a>4\r\n    g4( |\r\n \r\n    % d\r\n    a8 g4\r\n    e16 f16\r\n    cs8 c8 c8\r\n    g8 |\r\n \r\n    % !\r\n    a16)\r\n    <g e>4\r\n    f16( ds16 ds16)\r\n    <g c>2 |\r\n    }\r\n    \\layout {\r\n    indent = 0\\cm\r\n    }\r\n    \\midi {\r\n    \\tempo 4 = 120\r\n    }\r\n}"
  },
  {
    "id": "976",
    "title": "Verbose",
    "description": "Verbose is made to be as verbose as possible, and was created by User:Poolala.\r\n<br>Inspired by VerboseFuck, INTERCAL, and COBOL. (No, not Card Orientations Based Object Language.)",
    "url": "https://esolangs.org/wiki/Verbose",
    "language_short": "plaintext",
    "code": "PUT THE NUMBER LXXII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CI ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CVIII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXI ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER XLIV ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER XXXII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXIX ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXI ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CXIV ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER CVIII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER C ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE\r\nPUT THE NUMBER XXXIII ONTO THE TOP OF THE PROGRAM STACK\r\nGET THE TOP ELEMENT OF THE STACK AND CONVERT IT TO AN ASCII CHARACTER AND OUTPUT IT FOR THE CURRENT PERSON USING THIS PROGRAM TO SEE"
  },
  {
    "id": "977",
    "title": "VerboseFuck",
    "description": "VerboseFuck is an esoteric programming language created by David Catt (user:David.werecat) that makes Brainfuck verbose. It's most likely the result of the author being too lazy to create a brand new language.",
    "url": "https://esolangs.org/wiki/VerboseFuck",
    "language_short": "plaintext",
    "code": "~!comment!~VerboseFuck, a BrainFuck derivative focussing on verbosity. see more at <http://esolangs.org/wiki/VerboseFuck>~!uncomment!~\r\nprogram.initialize();\r\nmath.equation(program.errors.handler.activated = boolean(false));\r\nprogram.console.standardinput.openstream();\r\nprogram.console.standardoutput.openstream();\r\ndefine(defines.variable, variable(pointer));\r\nimplanttype(pointer, types.pointer(to:types.byte));\r\nmath.equation(pointer = void(0));\r\nprogram.memory.allocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\ndefine(defines.label, defines.label.createnew());\r\nconditional(block.if, boolean.inequality(deref(pointer), byte(0))) { \r\n    math.equation(pointer = pointer + void(1));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(pointer = pointer + void(1));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(pointer = pointer + void(1));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    math.equation(pointer = pointer + void(1));\r\n    math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(pointer = pointer - void(1));\r\n    math.equation(pointer = pointer - void(1));\r\n    math.equation(pointer = pointer - void(1));\r\n    math.equation(pointer = pointer - void(1));\r\n    ~!comment!~MANDATORY~!uncomment!~\r\n    math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n};\r\nconditional(block.if, boolean.inequality(deref(pointer), byte(0))) { \r\n    program.flow.labeledjump(defines.label.last());\r\n};\r\nundefine(defines.label, defines.label.last());\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer - void(1));\r\nmath.equation(pointer = pointer - void(1));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(pointer = pointer + void(1));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\nmath.equation(pointer = pointer + void(1));\r\nprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);\r\n~!comment!~MANDATORY~!uncomment!~\r\nprogram.memory.deallocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);\r\nundefine(defines.variable, variable(pointer));\r\nprogram.console.standardoutput.closestream();\r\nprogram.console.standardinput.closestream();\r\nprogram.terminate();\r\n~!comment!~MANDATORY~!uncomment!~"
  },
  {
    "id": "978",
    "title": "Verilog",
    "description": "Verilog, standardized as IEEE 1364, is a hardware description language (HDL) used to model electronic systems. It is most commonly used in the design and verification of digital circuits at the register-transfer level of abstraction.",
    "url": "https://en.wikipedia.org/wiki/Verilog",
    "language_short": "verilog",
    "code": "module main;\r\n    initial\r\n        begin\r\n        $$display(\"Hello World!\");\r\n        $$finish;\r\n    end\r\nendmodule"
  },
  {
    "id": "979",
    "title": "Verve",
    "description": "Verve is a research operating system developed by Microsoft Research. Verve is verified end-to-end for type safety and memory safety.",
    "url": "https://en.wikipedia.org/wiki/Verve_(operating_system)",
    "language_short": "c-like",
    "code": "print(\"Hello World\")"
  },
  {
    "id": "980",
    "title": "VHDL",
    "description": "The VHSIC Hardware Description Language (VHDL) is a hardware description language (HDL) that can model the behavior and structure of digital systems at multiple levels of abstraction, ranging from the system level down to that of logic gates, for design entry, documentation, and verification purposes. Since 1987, VHDL has been standardized by the Institute of Electrical and Electronics Engineers (IEEE) as IEEE Std 1076; the latest version (as of April 2020) of which is IEEE Std 1076-2019. To model analog and mixed-signal systems, an IEEE-standardized HDL based on VHDL called VHDL-AMS (officially IEEE 1076.1) has been developed.",
    "url": "https://en.wikipedia.org/wiki/VHDL",
    "language_short": "vhdl",
    "code": "use std.textio.all;\r\n \r\nentity hello_world is\r\nend hello_world;\r\n \r\narchitecture behaviour of hello_world is\r\nbegin\r\n    process\r\n    begin\r\n        write (output, String'(\"Hello world!\"));\r\n        wait;\r\n    end process;\r\nend behaviour;"
  },
  {
    "id": "981",
    "title": "Vi",
    "description": "vi (pronounced as distinct letters, /ˌviːˈaɪ/)is a screen-oriented text editor originally created for the Unix operating system. The portable subset of the behavior of vi and programs based on it, and the ex editor language supported within these programs, is described by (and thus standardized by) the Single Unix Specification and POSIX.",
    "url": "https://en.wikipedia.org/wiki/Vi",
    "language_short": "vim",
    "code": "The following tab indented lines will cause a true vi with modelines\r\nactivated to infinitely loop puting \"Hello World\" in the buffer. Hit\r\n    to abort the loop and see the output. None of the vi clones\r\nsupport modelines this powerful, and modelines are diabled by default.\r\nSet the environment variable EXINIT to \"set ml\" to activate modelines.\r\n \r\n    vi: $$  y a :\r\n    vi: $$-1y b :\r\n    vi: @b :\r\n    put a |@b\r\n    Hello World\r\n \r\nWhitespace is largely insignificant, but these must be the last five\r\nlines in the file to work properly. Unless it is in \"vi: ... :\" or\r\n\"ex: ... :\" format, any preceeding text will be ignored."
  },
  {
    "id": "982",
    "title": "Vim Script (vim)",
    "description": "Vim script, Vim’s built-in programming language. Many Vim plugins and extensions are also available online for free.",
    "url": "https://simple.wikipedia.org/wiki/Vim#Vim_script",
    "language_short": "vim",
    "code": "echo \"Hello World\""
  },
  {
    "id": "983",
    "title": "VimScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "echo \"Hello World\""
  },
  {
    "id": "984",
    "title": "Virgil",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "def main() {\r\n    System.puts(\"Hello World\\n\");\r\n}"
  },
  {
    "id": "985",
    "title": "Visual Basic",
    "description": "Visual Basic is a third-generation event-driven programming language from Microsoft known for its Component Object Model (COM) programming model first released in 1991 and declared legacy during 2008. Microsoft intended Visual Basic to be relatively easy to learn and use.",
    "url": "https://en.wikipedia.org/wiki/Visual_Basic",
    "language_short": "vbnet",
    "code": "Module HelloWorld\r\n    Sub Main()\r\n        MsgBox(\"Hello world!\")\r\n    End Sub\r\nEnd Module"
  },
  {
    "id": "986",
    "title": "Visual Basic .NET (VB.net)",
    "description": "Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework. Microsoft launched VB.NET in 2002 as the successor to its original Visual Basic language. Although the \".NET\" portion of the name was dropped in 2005, this article uses \"Visual Basic [.NET]\" to refer to all Visual Basic languages released since 2002, in order to distinguish between them and the classic Visual Basic. Along with C# and F#, it is one of the three main languages targeting the .NET framework. As of March 11th, 2020, Microsoft announced that evolution of the VB.NET language has concluded.",
    "url": "https://en.wikipedia.org/wiki/Visual_Basic_.NET",
    "language_short": "vbnet",
    "code": "Module HelloWorld\r\n    Sub Main()\r\n        System.Console.WriteLine(\"Hello World\")\r\n    End Sub\r\nEnd Module"
  },
  {
    "id": "987",
    "title": "Visual Basic for Applications",
    "description": "Visual Basic for Applications (VBA) is an implementation of Microsoft's event-driven programming language Visual Basic 6, which was declared legacy in 2008, and is an associated integrated development environment (IDE).",
    "url": "https://en.wikipedia.org/wiki/Visual_Basic_for_Applications",
    "language_short": "",
    "code": "Sub HelloWorld()\r\n    Call MsgBox(\"Hello World\")\r\nEnd Sub"
  },
  {
    "id": "988",
    "title": "Visual Basic Scripting\t(VBScript)",
    "description": "Visual Basic Script (VBS) is a script language developed by Microsoft based on Visual Basic (VB) or Visual Basic for Applications (VBA). It is a reduced version of Visual Basic and is mainly used in connection with ASP (Active Server Pages) and the creation of dynamic websites. Since VBS is loaded during the runtime, it is called an interpreted script language.",
    "url": "https://en.ryte.com/wiki/Visual_Basic_Script",
    "language_short": "vbscript",
    "code": "MsgBox \"Hello world!\""
  },
  {
    "id": "989",
    "title": "VisualFoxPro",
    "description": "Visual FoxPro was a Microsoft data-centric procedural programming language that subsequently became object-oriented.",
    "url": "https://en.wikipedia.org/wiki/Visual_FoxPro",
    "language_short": "stata",
    "code": "* Message Box:\r\nMESSAGEBOX(\"Hello World\")\r\n \r\n* Print to screen:\r\n? \"Hello World\"\r\n \r\n* GUI:\r\nloForm = CREATEOBJECT(\"HiForm\")\r\nloForm.Show(1)\r\n \r\nDEFINE CLASS HiForm AS Form\r\n    AutoCenter\t= .T.\r\n    Caption\t\t= \"Hello, World\"\r\n    \r\n    ADD OBJECT lblHi as Label ;\r\n        WITH Caption = \"Hello, World!\"\r\nENDDEFINE"
  },
  {
    "id": "990",
    "title": "Visualg",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "Algoritmo \" \"\r\nInicio\r\nescreva(\"Hello World\")\r\nFimalgoritmo"
  },
  {
    "id": "991",
    "title": "VJass",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "struct HelloWorld extends array\r\n    private static method onInit takes nothing returns nothing\r\n        call DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 0, \"Hello World\")\r\n    endmethod\r\nendstruct"
  },
  {
    "id": "992",
    "title": "VMS",
    "description": "In computing, a virtual machine (VM) is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.",
    "url": "https://en.wikipedia.org/wiki/Virtual_machine",
    "language_short": "gams",
    "code": "$$top:\r\n$$write sys$$output \"Hello world!\"\r\n$$wait 00:00:10\r\n$$goto top"
  },
  {
    "id": "993",
    "title": "Volatile",
    "description": "Volatile is an esoteric programming language invented by User:A that can only push random numbers onto an unbounded stack that can push unbounded numbers. It is inspired by Keg; 7 of the 7 instructions are borrowed from Keg.",
    "url": "https://esolangs.org/wiki/Volatile",
    "language_short": "brainfuck",
    "code": "~:/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++.~:/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.~:/:::::::::::::::::::::::::::::::::+++++++++++++++++++++++++++++++++.~:/::::::::::++++++++++."
  },
  {
    "id": "994",
    "title": "Vowels",
    "description": "A vowel is a syllabic speech sound pronounced without any stricture in the vocal tract. Vowels are one of the two principal classes of speech sounds, the other being the consonant. Vowels vary in quality, in loudness and also in quantity (length). They are usually voiced and are closely involved in prosodic variation such as tone, intonation and stress.",
    "url": "https://en.wikipedia.org/wiki/Vowel",
    "language_short": "plaintext",
    "code": "ue\r\nyeouo\r\neuea\r\neuai\r\neuai\r\neuoa\r\neaiu\r\neaao\r\neioo\r\neuoa\r\neuou\r\neuai\r\neuee\r\neaai\r\neeoe\r\neeee\r\ny"
  },
  {
    "id": "995",
    "title": "VRML",
    "description": "VRML (Virtual Reality Modeling Language, pronounced vermal or by its initials, originally—before 1995—known as the Virtual Reality Markup Language) is a standard file format for representing 3-dimensional (3D) interactive vector graphics, designed particularly with the World Wide Web in mind. It has been superseded by X3D.",
    "url": "https://en.wikipedia.org/wiki/VRML",
    "language_short": "nginx",
    "code": "#VRML V2.0 utf8\r\nShape {\r\n    geometry Text {\r\n        string \"Hello World\"\r\n    }\r\n}"
  },
  {
    "id": "996",
    "title": "VTL",
    "description": "VTL is an esoteric programming language created by David Catt (user:David.werecat) which loads code into modifiable memory and an extended section.",
    "url": "https://esolangs.org/wiki/VTL",
    "language_short": "plaintext",
    "code": "1D C4 01 C4 01 C4 01 C4 01 C4 01 C4 01 C4 01 C4\r\n01 C4 01 C4 01 C4 01 C4 01 C4 01 C4 E0 48 65 6C\r\n6C 6F 2C 20 77 6F 72 6C 64 21"
  },
  {
    "id": "997",
    "title": "Vue (Vue.js)",
    "description": "Vue.js (commonly referred to as Vue; pronounced /vjuː/, like \"view\") is an open-source model–view–viewmodel front end JavaScript framework for building user interfaces and single-page applications. It was created by Evan You, and is maintained by him and the rest of the active core team members.",
    "url": "https://en.wikipedia.org/wiki/Vue.js",
    "language_short": "twig",
    "code": "<div id=\"app\">\r\n    <p>{{ message }}</p>\r\n</div>\r\n<script>\r\n    new Vue({\r\n        el: '#app',\r\n        data: {\r\n            message: 'Hello World!'\r\n        }\r\n    })\r\n</script>"
  },
  {
    "id": "998",
    "title": "WARP",
    "description": "WARP is an object and stack based language, created by User:Aldous zodiac (talk) in May 2013. All numerics are signed, integral and expressed in hexatridecimal (base 36) notation, unless the radix system is changed within an executing program. WARP is a (weak) recursive acronym, WARP And Run Program - so called because it is expected that interpreters randomize the source program after each command is executed.",
    "url": "https://esolangs.org/wiki/WARP",
    "language_short": "plaintext",
    "code": ")\"Hello, world!\""
  },
  {
    "id": "999",
    "title": "WebAssembly",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "module\r\n    (import \"wasi_unstable\" \"fd_write\"\r\n        (func $fd_write (param i32 i32 i32 i32) (result i32))\r\n    )\r\n\r\n    (memory 1)\r\n    (export \"memory\" (memory 0))\r\n\r\n    (data (i32.const 0) \"\\08\\00\\00\\00\\0c\\00\\00\\00Hello World\\n\")\r\n\r\n    (func $main (export \"_start\")\r\n        i32.const 1\r\n        i32.const 0\r\n        i32.const 1\r\n       i32.const 20\r\n        call $fd_write\r\n        drop\r\n    )\r\n)"
  },
  {
    "id": "1000",
    "title": "Wenyan",
    "description": "Classical Chinese, also known as Literary Chinese[a] (文言文, wényánwén or 古文, gǔwén), is the language of the classic literature from the end of the Spring and Autumn period through to the end of the Han dynasty, a written form of Old Chinese (上古漢語, shànɡɡǔ hànyǔ).",
    "url": "https://en.wikipedia.org/wiki/Wenyan",
    "language_short": "",
    "code": "吾有一言。曰「「Hello World」」。書之。"
  },
  {
    "id": "1001",
    "title": "Wheat",
    "description": "Wheat is an esolanguage designed by Keymaker in 2009. The language is based on outputting and inputting, only what has been output on a previous cycle can be input on the current one. The buffers last only one cycle; if the data of previous cycle is not read on current cycle, on the next cycle it can not be accessed, it will all be erased, replaced by the output of the current cycle (if any, otherwise the empty string is used). Reading empty buffer returns the empty character/string. (The language can not read external input, and is thus classified output-only.) There are no limits for the program sizes or the output it creates. The program runs endlessly unless terminated with the terminating instruction. By cycle it is meant the lines of the program, from top to bottom, executed once. There are 36 one-character registers, each set to empty string on every cycle. Their content may be modified only by inputting into them.",
    "url": "https://esolangs.org/wiki/Wheat",
    "language_short": "lua",
    "code": "input h\r\nif h \"H\":\r\n    output \" world!\"\r\n    output N\r\n    terminate\r\noutput \"Hello,\""
  },
  {
    "id": "1002",
    "title": "Wheel",
    "description": "Wheel (WHolly ElEgant Language) was created by PixelatedStarfish in 2021. The syntax of the language is designed to be terse, with single character operations. The syntax is influenced by bf and Heck.",
    "url": "https://esolangs.org/wiki/Wheel",
    "language_short": "",
    "code": "C72C69C76C76C79C32C87C79C82C76C68"
  },
  {
    "id": "1003",
    "title": "Whenever",
    "description": "",
    "url": "",
    "language_short": "basic",
    "code": "1 print(\"Hello world!\"); "
  },
  {
    "id": "1004",
    "title": "Whirl",
    "description": "Whirl is an esoteric programming language invented by Sean Heber (2004), with only two instructions, 0 and 1. These instructions rotate the Operations Ring and the Maths Ring, each of which has 12 sectors. The language therefore has 24 actual commands. The task of remembering the current orientation of each ring is left to the programmer.",
    "url": "https://esolangs.org/wiki/Whirl",
    "language_short": "plaintext",
    "code": "110001100111000111110000010001111100011000000000110000011100000110000010000\r\n011000111100000111110000011100001111100100011001110000111111100001001111100\r\n011000000000110000011000111110001000000000000000000001001111110000111111000\r\n100000000000000000000000000011111000100100000000111111000100000000000001001\r\n000011111000001110000111110010001100011000000100010000011000000000000000001\r\n100000111001111100111111000100111001111000011100010011111110000111000110000\r\n000000000000000000000000000001000100001111100000111000011111001100011100000\r\n111000000010001111100000111110001000000000111000110000000000000000000000000\r\n000000100100001111100000111000011100010000000000000100010000111110001110001\r\n111100111111000011100001100111000111000000000001111100000111000110000110110\r\n001000000000010000001111100000111000011111000000010001110000000000000000000\r\n000000000000100000011111000001100"
  },
  {
    "id": "1005",
    "title": "Whitespace",
    "description": "Whitespace is an esoteric programming language developed by Edwin Brady and Chris Morris at the University of Durham (also developers of the Kaya and Idris programming languages). It was released on 1 April 2003 (April Fool's Day). Its name is a reference to whitespace characters. Unlike most programming languages, which ignore or assign little meaning to most whitespace characters, the Whitespace interpreter ignores any non-whitespace characters. Only spaces, tabs and linefeeds have meaning.",
    "url": "https://en.wikipedia.org/wiki/Whitespace_(programming_language)",
    "language_short": "plaintext",
    "code": "push 0   \r\npush 10  \t \t \r\npush 33  \t    \t\r\npush 100  \t\t  \t  \r\npush 108  \t\t \t\t  \r\npush 114  \t\t\t  \t \r\npush 111  \t\t \t\t\t\t\r\npush 119  \t\t\t \t\t\t\r\npush 32  \t     \r\npush 44  \t \t\t  \r\ncopy 3\t  \t\t\r\ncopy 6\t  \t\t \r\ndup \r\npush 101   \t\t  \t \t\r\npush 72  \t  \t   \r\n \r\nlabel 0   \r\noutchar\t\r\ndup   \r\npush 0    \r\nswap \r\nsub\t\t  \t\r\njn\t0\t  \r\nexit"
  },
  {
    "id": "1006",
    "title": "Wierd",
    "description": "Wierd is a graphical language developed by Chris Pressey, Ben Olmstead, and John Colagioia, in 1997.",
    "url": "https://esolangs.org/wiki/Wierd",
    "language_short": "plaintext",
    "code": " \r\n                    H          ************************             ******************                                                 **********\r\n                    e         *                      *            *                  *                                        *       *        *\r\n                     l        *      ***             *             **                 *                                      * *      *        *\r\n                   !  o       *   ***   *          * *               *                 *                                     *  *     *        *\r\n                       ,      *  *       *        ** *               *                 *                                    *    *    *      * *\r\n                        W      * *        *      * * *               *                 *                                    *     *   *     ** *\r\n                         r      *          *    *  * *               *  ************   *                                   *       *  *    * * *\r\n                          d                 *  *   * *               * *          *    *                                  ******    *  *  *  * *\r\n                           *                 * *   * *               **         **     *                                        *    *  * *  * *\r\n                            *                 **   * *               *         *       *                                         *    *  ** *  *\r\n                             *                 *   * *                         *       *                   **  **                 *    *  * *  *\r\n                              *                    * *                        *        *                 **  ** *              **  *    *   *  *\r\n                               ********************  *                        *        *               **       *            **  ****    ***   *\r\n                                                      *              **      *         *             **         *          **                  *\r\n                                                       *           **  *     *        *            **           *        **                    *\r\n                                                        *        **     *  **        *       **  **             *      **                     *\r\n                                                         *****  *        **         *       *  **                **  **                      *\r\n                                                              **                   *        *                      **                       *\r\n                                                                                  *          *                                             *\r\n                     *************************************************************           *                *****************************\r\n                    *                                                                       *                *\r\n                    *                                          ***                         *                *\r\n                   *                   *                       *  *                       *                *\r\n                   *                   **                       *  *                     *                *\r\n                    *                  * *                      *   **                  ******           *        *********************\r\n                    *                  * *                     *      *                       *          *       *                     *\r\n                     *                 *  *                    *      *                        *        *        *                      *\r\n                     *                 *  *                   *        **                       *       *         *                      *\r\n                      *                *   *                 *           **                      *       *        *                       *\r\n                      *                *   *                *****          **                     *      *       *                         *\r\n                       *               *    **                   *           **               **   *      *     *                           *\r\n                       *               *      **                  *            **           **  *****     *    *                            *\r\n                      *                *        **                 *             *        **               *   *                            *\r\n                     *                 *          **           **   *            *      **                 *    **                          *\r\n                     *                 *            *        **  *****            **  **                    *     **                        *\r\n                      *                *            *      **                       **                      *       *                       *\r\n                      *                *             **  **                                                  *       *                      *\r\n                       **              *               **                                                    *        **                    *\r\n                         *             *                                                                      *         *                   *\r\n                          *            *  *************************************************************       *         *                   *\r\n                           **          *   *                                                           *       *         *                  *\r\n                             **        *    *                                                        *  *      *         *                  *\r\n                               *      *      *                          *************************   **   *    *          *                  *\r\n                                *     *       *                        *                       *   * *    *   *          *                  *\r\n                                 ***  *        *                       *      *               *   *  *     *   *         *  **************  *\r\n                                    * *         *                     *       **             *   *   *      *  *  **      **             *  *\r\n                                    * *          *                    *       * *  ***      *   *    *       *  **  **             *******  *\r\n                                     **           *                    *      *  **        *   *     *        *       **            *       *\r\n                                      *            *                   *      *           *   *      *         *        **           *      *\r\n                                                    *                   *     *          *   *       *          *         **          *     *\r\n                                                     *                  *     *         *   *        *           *          **        *     *\r\n                                                      *                  *    *        *   *  *      *            *           **      *     *\r\n                                                       *                 *    *        *  *   **     *             *            **    *     *\r\n                                                        *                 *   *        *  *  *  *    *              *             *   *     *\r\n                                                         *                *   *        *  * *   *    *               *            *   *     *\r\n                                                          *                *  *        *  **    *    *                *            *  *     *\r\n                                                           *               *  *        *  *     *    *                *             * *     *\r\n                                                            *             *   *        *        *    *                *              **    *\r\n                                                             *           *   *          *       *    *                *               *   *\r\n                                                              *         *   *            *     *     *                *                  *\r\n                                                               *       *   *              *****      *                *                 *\r\n                                                                *      *  *                          *                *                *\r\n                                                                 *     * *                           *                *               *\r\n                                                                  *    **                           *                 *              *\r\n                                                                   *   *                           *                 *               *\r\n                                                                    *                             *                 *                *\r\n                                                                     *****************************                 *                  *\r\n                                                                                                                  *                   *\r\n                   ***********************************************************************************************                     *\r\n                   *                                                                                                                   *\r\n                   *                                                                                                                    *\r\n                   *                                     **                                                                             *\r\n                   *                                   **  **                                                                          *\r\n                   *                                 **      *                                                                        *\r\n                   *                               **        *                                                                        *\r\n                   *                             **          *                                                                         *\r\n                   *                           **            *                                                                         *\r\n                   *                         **              *  ******                                                                *\r\n                   *     ****              **                * *    *                                               ******************\r\n                   *    *    *       **  **                  **    *                                               *\r\n                   *    *    *     **  **                    *   **                                                *\r\n                   *   *     *    *                             *                                                  *\r\n                   *  *      *    *                             *                                                 *\r\n                   * *****    *  *                             *                                                  *\r\n                   *     *     * *                             *                                                   *\r\n                   *     *      **                            *                                                    *\r\n                   *     *       *                            *                                                     *\r\n                   *     *                                   *                                                      *\r\n                   *******                                   *                                                       *\r\n                                                       **  **                                                        *\r\n                                                     **  **                                                           *    *\r\n                                           **      **                                                                 *    **\r\n                   ************************  **  **                                                                    *   * *\r\n                   *                           **                                                                      *   *  *\r\n                   *  *                                                                                               *   *    *\r\n                   *  **                                                                                             *   *    *\r\n                   *  * *                                                                                            *  *    *\r\n                   *  *  *                                                                                           * *    *\r\n                   * *   *                                                                                           **    *\r\n                   * *    **                                                                                         *    *\r\n                   * *      **                                                                                           *\r\n                   * *        **                                                                                        *\r\n                    **          **                                                                                     *\r\n                     *            **                                                     ******************************\r\n                                    **                                             **  **\r\n                                      **                                         **  **\r\n                                        **  **                                 **\r\n                                          **  *                              **\r\n                                              *                            **\r\n                                               *                         **\r\n                                               *                       **\r\n                                              *              **  **  **\r\n                                              ***************  **  **"
  },
  {
    "id": "1007",
    "title": "WikiText",
    "description": "Wikitext, also known as Wiki markup or Wikicode, consists of the syntax and keywords used by the MediaWiki software to format a page. To learn how to see this hypertext markup, and to save an edit, see Help:Editing. Generally, coding can be copied and pasted, without writing new code. There is a short list of markup and tips at Help:Cheatsheet.",
    "url": "https://en.wikipedia.org/wiki/Help:Wikitext",
    "language_short": "",
    "code": "Hello World"
  },
  {
    "id": "1008",
    "title": "WML",
    "description": "Wireless Markup Language (WML), based on XML, is a now-obsolete markup language intended for devices that implement the Wireless Application Protocol (WAP) specification, such as mobile phones.",
    "url": "https://en.wikipedia.org/wiki/Wireless_Markup_Language",
    "language_short": "cs",
    "code": "#define HELLOWORLD\r\n    [message]\r\n        speaker=\"narrator\"\r\n        message=_\"Hello World\"\r\n    [/message]\r\n#enddef"
  },
  {
    "id": "1009",
    "title": "Wolfram Mathematica Language",
    "description": "he Wolfram Language (/ˈwʊlfrəm/ WUUL-frəm) is a general multi-paradigm programming language developed by Wolfram Research. It emphasizes symbolic computation, functional programming, and rule-based programming and can employ arbitrary structures and data. It is the programming language of the mathematical symbolic computation program Mathematica.",
    "url": "https://en.wikipedia.org/wiki/Wolfram_Language",
    "language_short": "mathematica",
    "code": "Print[\"Hello World\"];"
  },
  {
    "id": "1010",
    "title": "Word!CPU",
    "description": "I have seen the Brainfuck CPU project, and a description of a INTERCAL CPU, but here is the new one!!!! Each command is 2 bytes (4 nybbles). The memory is from 0000h to 1FFFh, and there is 2 different sets of memory, the data memory and the program memory.",
    "url": "https://esolangs.org/wiki/Word!CPU",
    "language_short": "plaintext",
    "code": "40 0A 88 02 40 01 68 02 E0 00 48 65 6C 6C 6F 2C \r\n20 77 6F 72 6C 64 21 0A 00"
  },
  {
    "id": "1011",
    "title": "wowLang",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "wow WOw wow wow wow wow wow wow wow woW WOW Wow wOW woW wow WoW wow WOw wow woW WOW WOW WOW WOW WOW Wow wOW woW WOW WOW WoW WOW WOW WOW WOW WOW WOW WOW WoW WoW WOW WOW WOW WoW WOw wow wow wow woW WOW Wow wOW woW wow wow wow wow wow WoW wow wow wow WOw wow woW WOW WOW WOW Wow wOW woW WoW wow WOw wow wow wow woW WOW Wow wOW woW wow wow wow WoW WOW WOW WOW WoW wow wow wow wow wow wow WoW wow wow wow wow wow wow wow wow WoW"
  },
  {
    "id": "1012",
    "title": "Wren",
    "description": "Wren is small. The VM implementation is under 4,000 semicolons. You can skim the whole thing in an afternoon. It's small, but not dense. It is readable and lovingly-commented.",
    "url": "https://wren.io/",
    "language_short": "c-like",
    "code": "IO.print(\"Hello World\")"
  },
  {
    "id": "1013",
    "title": "WSH",
    "description": "",
    "url": "",
    "language_short": "vbnet",
    "code": "WScript.Echo \"Hello World\"\r\nWScript.Quit"
  },
  {
    "id": "1014",
    "title": "X",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "/**\r\n* Hello world in X.so.\r\n*/\r\n$$HelloWorld (\r\n    $$Main(\r\n        !Include(\"X\")\r\n        !X.Show(\"Hello, world!\\n\")\r\n    )\r\n)"
  },
  {
    "id": "1015",
    "title": "X D (x-D)",
    "description": "x-D is a programming language based on smileys, created by tejeez in 2007.",
    "url": "https://esolangs.org/wiki/X-D",
    "language_short": "brainfuck",
    "code": ";-~~~~~> ;P ;~~> ;P ;------> ;-P ;--> ;P ;D ;~~---> ;P ;| ;~~< ;----> ;P\r\n;~---------> ;P ;--> ;P ;-----< ;P ;-------< ;P ;D ;> ;P ;~< ;-------< ;P"
  },
  {
    "id": "1016",
    "title": "X.so",
    "description": "X.so is a stack-based, esoteric programming language created by User:AnotherTest. The X in the name comes from extensible, and the so extension refers the to the shared object files that the X.so interpreter may dynamically load as a form of plugins.",
    "url": "https://esolangs.org/wiki/X.so",
    "language_short": "c-like",
    "code": "/**\r\n* Hello world in X.so.\r\n*/\r\n$$HelloWorld (\r\n    $$Main(\r\n        !Include(\"X\")\r\n        !X.Show(\"Hello, world!\\n\")\r\n    )\r\n)"
  },
  {
    "id": "1017",
    "title": "xbase",
    "description": "xBase is the generic term for all programming languages that derive from the original dBASE (Ashton-Tate) programming language and database formats.",
    "url": "https://en.wikipedia.org/wiki/XBase",
    "language_short": "vim",
    "code": "do while .t.\r\n    ? 'Hello World'\r\nenddo"
  },
  {
    "id": "1018",
    "title": "xbase++",
    "description": "Xbase++ is an object oriented programming language which has multiple inheritance and polymorphism. It is based on the XBase language dialect and conventions. It is 100% Clipper compatible language supporting multiple inheritance, polymorphism, object oriented programming.",
    "url": "https://en.wikipedia.org/wiki/XBase%2B%2B",
    "language_short": "c-like",
    "code": "func Main()\r\n    Qout(\"Hello World\")\r\nreturn 1"
  },
  {
    "id": "1019",
    "title": "xEec",
    "description": "xEec is an esoteric programming language designed and implemented by Paulo Jorente in October, 2015.",
    "url": "https://esolangs.org/wiki/XEec",
    "language_short": "plaintext",
    "code": "h#10 h$$! h$$d h$$l h$$r h$$o h$$W h#32 h$$, h$$o h$$l h$$l h$$e h$$H >o o$$ p jno"
  },
  {
    "id": "1020",
    "title": "XENBLN",
    "description": "XENBLN is a general-purpose code-golfing language created by User:PythonshellDebugwindow. It uses a character encoding based on the first 256 Unicode characters, but with non-printing characters replaced.",
    "url": "https://esolangs.org/wiki/XENBLN",
    "language_short": "plaintext",
    "code": "š"
  },
  {
    "id": "1021",
    "title": "XHTML",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/TR/xhtml1\" xml:lang=\"en\" lang=\"en\">\r\n<head>\r\n<title>Hello World</title>\r\n<meta charset=\"UTF-8\"/>\r\n</head>\r\n<body>\r\n<p>Hello World</p>\r\n</body>\r\n</html>"
  },
  {
    "id": "1022",
    "title": "Xihcute",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "92*1+ytotm0!52*~bleHello World"
  },
  {
    "id": "1023",
    "title": "XL (eXtensible Language)",
    "description": "XL (\"eXtensible Language\") is the first computer programming language designed to support concept programming.",
    "url": "https://en.wikipedia.org/wiki/XL_(programming_language)",
    "language_short": "xl",
    "code": "// XL programming language: http://xlr.sourceforge.net\r\nwriteln \"Hello, world\""
  },
  {
    "id": "1024",
    "title": "XLisp",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "(DISPLAY \"Hello World\")\r\n(NEWLINE)"
  },
  {
    "id": "1025",
    "title": "Xlogo",
    "description": "",
    "url": "",
    "language_short": "lsl",
    "code": "to HelloWorld\r\n    resetall\r\n    hideturtle\r\n    fd 20 left 180\r\n    fd 40 left 180\r\n    fd 20 right 90\r\n    fd 20 left 90\r\n    fd 20 left 180\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 right 90\r\n    fd 20 right 90\r\n    fd 10 right 90\r\n    fd 20 left 90\r\n    fd 10 left 90\r\n    fd 30 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 60 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 180\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 40 left 180\r\n    fd 40 left 90\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 40 left 90\r\n    fd 20 right 90\r\n    fd 20 right 90\r\n    fd 5  left 90  \r\n    fd 5  left 90  \r\n    fd 25 left 180\r\n    fd 40 left 90\r\n    fd 40 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 20 left 90\r\n    fd 40 left 180\r\n    fd 40\r\nend"
  },
  {
    "id": "1026",
    "title": "XML",
    "description": "Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. The World Wide Web Consortium's XML 1.0 Specification of 1998 and several other related specifications—all of them free open standards—define XML.",
    "url": "https://en.wikipedia.org/wiki/XML",
    "language_short": "xml",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<text><![CDATA[Hello World]]></text>"
  },
  {
    "id": "1027",
    "title": "XPL0",
    "description": "XPL0 is a computer programming language that is essentially a cross between Pascal and C. It was created in 1976 by Peter J. R. Boyle who wanted a high-level language for his microcomputer and wanted something more sophisticated than BASIC, which was the dominant language for personal computers at the time.",
    "url": "https://en.wikipedia.org/wiki/XPL0",
    "language_short": "plaintext",
    "code": "code Text=12;\r\nText(0, \"Hello World\")"
  },
  {
    "id": "1028",
    "title": "XQuery (XML Query)",
    "description": "XQuery (XML Query) is a query and functional programming language that queries and transforms collections of structured and unstructured data, usually in the form of XML, text and with vendor-specific extensions for other data formats (JSON, binary, etc.).",
    "url": "https://en.wikipedia.org/wiki/XQuery",
    "language_short": "xquery",
    "code": "let $$hello := \"Hello, World!\"\r\nreturn $$hello"
  },
  {
    "id": "1029",
    "title": "XRF",
    "description": "XRF is a stack-based esoteric programming language designed by User:Scoppini in 2015.",
    "url": "https://esolangs.org/wiki/XRF",
    "language_short": "plaintext",
    "code": "53374 54374 54374 545F4 54374\r\n54374 54374 41345 546F4 54374\r\n54374 54374 54374 54554 54554\r\n545F4 54314 54554 54554 54554\r\n545F4 54314 54314 54554 545F4\r\n54314 33745 54664 54664 54664\r\n54664 54314 54664 54664 54664\r\n54664 54664 54664 54314 54934\r\n54554 5454F 54374 5451F 54314\r\n54554 545F4 54314 54664 54664\r\n54664 54314 54664 54664 54664\r\n54664 9151B"
  },
  {
    "id": "1030",
    "title": "XSLT",
    "description": "XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents, or other formats such as HTML for web pages, plain text or XSL Formatting Objects, which may subsequently be converted to other formats, such as PDF, PostScript and PNG. XSLT 1.0 is widely supported in modern web browsers.",
    "url": "https://en.wikipedia.org/wiki/XSLT",
    "language_short": "xml",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <xsl:text>Hello World!</xsl:text>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
  },
  {
    "id": "1031",
    "title": "XUL",
    "description": "XUL (/ˈzuːl/ ZOOL), which stands for XML User Interface Language, is a user interface markup language developed by Mozilla. XUL is an XML dialect for writing graphical user interfaces, enabling developers to write user interface elements in a manner similar to web pages.",
    "url": "https://en.wikipedia.org/wiki/XUL",
    "language_short": "xml",
    "code": "<?xml version=\"1.0\"?>\r\n<window xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\">\r\n    <label value=\"Hello World\"/>\r\n</window>"
  },
  {
    "id": "1032",
    "title": "Y",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "module helloworld\r\n \r\n    define(EOF,(-1))\r\n    \r\n    import printf from \"ylib.d\"\r\n \r\n    main()\r\n        printf(\"Hello World\\n\")\r\n    end\r\nend"
  },
  {
    "id": "1033",
    "title": "YAML",
    "description": "YAML (a recursive acronym for \"YAML Ain't Markup Language\") is a human-readable data-serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted.",
    "url": "https://en.wikipedia.org/wiki/YAML",
    "language_short": "yaml",
    "code": "hello: world"
  },
  {
    "id": "1034",
    "title": "YASKC",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "using universal delay 200\r\nusing loop False\r\n\r\ntypewrite Hello World"
  },
  {
    "id": "1035",
    "title": "YoLang",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!yo!yoYo!Yo!Yo!Yo!Yo!Yo!Yo!yoYo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!yoYo!Yo!Yo!yoYo!YOYOYOYOYo?YO?yoYo!Yo!YO!yoYo!YO!Yo!Yo!Yo!Yo!Yo!Yo!Yo!YO!YO!Yo!Yo!Yo!YO!yoYo!Yo!YO!YOYOYo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!Yo!YO!yoYO!Yo!Yo!Yo!YO!Yo?Yo?Yo?Yo?Yo?Yo?YO!Yo?Yo?Yo?Yo?Yo?Yo?Yo?Yo?YO!yoYo!YO!yoYO!"
  },
  {
    "id": "1036",
    "title": "YoptaScript",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": "ксива.малява(\" Оно работает \") нах"
  },
  {
    "id": "1037",
    "title": "ZBD",
    "description": "",
    "url": "",
    "language_short": "plaintext",
    "code": " + Mr.B says \"Hello Friend\" "
  },
  {
    "id": "1038",
    "title": "Zepto",
    "description": "",
    "url": "",
    "language_short": "scheme",
    "code": "(write \"Hello World\")"
  },
  {
    "id": "1039",
    "title": "Zetaplex",
    "description": "Zetaplex, created by poiuy_qwert in 2007 is another varient of Gammaplex created by Lode Vandevenne. The two main differences between the languages are that commands are made up of a pair of characters, and the memory is an infinite tape of infinite stacks. This language was designed to be very functional.",
    "url": "https://esolangs.org/wiki/Zetaplex",
    "language_short": "brainfuck",
    "code": "\\      / #111#87\\ #        #         ######\r\n3      4 #        #        #        #      #\r\n3      1 #        #        #        #      #\r\n#      1 #        #        #        #      #\r\n1####### /44#23#/ #        #        #      #\r\n0      8 #        #        #        #      #\r\n0      0 1        #        #        #      #\r\n#      1 1        #        #        #      #\r\n\\      / \\1#108sy 101#72Os DrFe####  ######"
  },
  {
    "id": "1040",
    "title": "Zig",
    "description": "Zig is an imperative, general-purpose, statically typed, compiled system programming language designed by Andrew Kelley. The language is designed for \"robustness, optimality and maintainability\" , supporting compile-time generics and reflection, cross-compilation and manual memory management. A major goal of the language is to improve upon the C language, while also taking inspiration from Rust, among others.",
    "url": "https://en.wikipedia.org/wiki/Zig_(programming_language)",
    "language_short": "",
    "code": "const std = @import(\"std\");\r\n\r\npub fn main() !void {\r\n    const stdout = std.io.getStdOut().writer();\r\n    try stdout.print(\"Hello World\", .{});\r\n}"
  },
  {
    "id": "1041",
    "title": "ziim",
    "description": "Ziim is a two-dimensional esoteric programming language, invented by Timwi in 2011, consisting entirely of the following Unicode arrow characters.",
    "url": "https://esolangs.org/wiki/Ziim",
    "language_short": "brainfuck",
    "code": "    ↘↓                        \r\n        ↘                     \r\n↘          ←              ↙   \r\n            ⤢↘           ↘← ↑   \r\n    ↘←     ↑⤡↙ → ↙         ↓↙↙   \r\n        ↙  → ↗           ↙      \r\n    ↘ ←  ↙↙↘     ↙↘ ↙     ↑   ↘← \r\n↘     ↑↕ ←     ↓↓↑      ↙   ← \r\n    ↘   ←  ↙ ↕← ↗            ↔↙ \r\n        ↗↓ ↑↑  →↖  ↙←  ↓   ↘     \r\n    →    ↘ ↘   ↓↘← ↗     ↙↙      \r\n    ↙    ↖ ↘  ←↓↙←     ↑  ↑↑   \r\n↑ →         ↘  →          ↙   \r\n        ↘        ↙      ←↙       \r\n    ↘  ↕     ↔       ↙↙     ←  ↙\r\n                    ⤡           \r\n    ↑ ↘  ←↓↓↓ ↓↓↓   ↙↘        \r\n        ↘→  ↘ ↙  ←    ↑       \r\n    ↓  ↘  → ↘   ↙ ←            \r\n            →↘ ↓ ↓ ↙←   ↕←       \r\n        ↗   →↘ ↙←              \r\n            →↗  ↓  ↖←   ↖ ↕ ↔  ↙ \r\n    ↗↔ ↖  ↑↓   ↙↑ ↖←       ↑↘ \r\n    ↙       ↓ →↗→↖↑ ↑        ↑\r\n            ↗↖  ↑→ ↙↓ ↙        \r\n    ↑    ↗      ↔   ↖↙←↙↓↖      \r\n    ↗↔  ↕ ↑  →              ↙   \r\n    ↘  ←↗ →↖ ↘  ↕  ←    ↖   ⤡   \r\n    ↗         ←        ↙  ↑     \r\n        ↙       ↖   ↓↖←     ↖ ↑ \r\n    ↓ ↓↑↙        → ↘↑↓↖        \r\n    ↗ ↙←    ↑      ↙→     ↕    \r\n    →                   ↖       \r\n    ⤡    ↖       →↗ ↓     ↖    \r\n    ↑            ↑ ↗↖  "
  },
  {
    "id": "1042",
    "title": "Zim",
    "description": "Zim is a graphical text editor designed to maintain a collection of locally stored wiki-pages, a personal wiki. Each wiki-page can contain things like text with simple formatting, links to other pages, attachments, and images. Additional plugins, such as an equation editor and spell-checker, are also available. The wiki-pages are stored in a folder structure in plain text files with wiki formatting.",
    "url": "https://en.wikipedia.org/wiki/Zim_(software)",
    "language_short": "c-like",
    "code": "output \"Hello World\""
  },
  {
    "id": "1043",
    "title": "Zimbu",
    "description": "",
    "url": "",
    "language_short": "c-like",
    "code": "FUNC Main() int\r\n    IO.write(\"Hello, World!\\n\")\r\n    RETURN 0\r\n}"
  },
  {
    "id": "1044",
    "title": "Zinc",
    "description": "The Zinc Application Framework is an application framework, intended for the development of cross-platform software applications with graphical user interface (GUI), using a widget toolkit. Zinc targets both embedded (such as Wind River's VxWorks) and desktop platforms.",
    "url": "https://en.wikipedia.org/wiki/Zinc_Application_Framework",
    "language_short": "",
    "code": "//! zinc\r\nlibrary HelloWorld {\r\n    private function onInit() {\r\n        DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 0, \"Hello World\");\r\n    }\r\n}\r\n//! endzinc"
  },
  {
    "id": "1045",
    "title": "Zombie",
    "description": "In computing, a zombie is a computer connected to the Internet that has been compromised by a hacker, computer virus, computer worm, or trojan horse program and can be used to perform malicious tasks of one sort or another under remote direction.",
    "url": "https://en.wikipedia.org/wiki/Zombie_(computing)",
    "language_short": "sqf",
    "code": "HelloWorld is a zombie\r\nsummon\r\n    task SayHello\r\n        say \"Hello World!\"\r\n    animate\r\nanimate"
  },
  {
    "id": "1046",
    "title": "Zonnon",
    "description": "Zonnon is a general purpose programming language in the line or family of the preceding languages Pascal, Modula, and Oberon. Jürg Gutknecht is the author.",
    "url": "https://en.wikipedia.org/wiki/Zonnon",
    "language_short": "c-like",
    "code": "module HelloWorld;\r\nbegin\r\n    writeln(\"Hello World\");\r\nend HelloWorld.  "
  },
  {
    "id": "1047",
    "title": "ZPL",
    "description": "ZPL (short for Z-level Programming Language) is an array programming language designed to replace C and C++ programming languages in engineering and scientific applications.",
    "url": "https://en.wikipedia.org/wiki/ZPL_(programming_language)",
    "language_short": "",
    "code": "^XA^FDHello World^XZ~PS"
  },
  {
    "id": "1048",
    "title": "ZScript",
    "description": "",
    "url": "",
    "language_short": "",
    "code": " version \"3.3\"\r\n\r\nvoid HelloWorld()\r\n{\r\n  A_Log(\"Hello World\");\r\n}"
  },
  {
    "id": "1049",
    "title": "ZSH (Z shell)",
    "description": "The Z shell (Zsh) is a Unix shell that can be used as an interactive login shell and as a command interpreter for shell scripting. Zsh is an extended Bourne shell with many improvements, including some features of Bash, ksh, and tcsh.",
    "url": "https://en.wikipedia.org/wiki/Z_shell",
    "language_short": "bash",
    "code": "#!/bin/zsh\r\necho \"Hello, World!\""
  },
  {
    "id": "1050",
    "title": "Zucchini",
    "description": "Zucchini is another minimalist language. In it, everything is a node that sends signals to other nodes.",
    "url": "https://esolangs.org/wiki/Zucchini",
    "language_short": "brainfuck",
    "code": "=0,1.2./.0,1./.3.17. ` /.4.17.`../.5.17.`: /.6.17.`: /.7.17.`::/.8.17`: /.9.17`  /.10.17.:.:/.11.17.`::/.12.17.: `/.13.17.`: /.14.17.`. /.15.17` ./.16.17``/.19.\r\n"
  },
  {
    "id": "1051",
    "title": "zx",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "#!/usr/bin/env zx\r\nconsole.log(\"Hello World\")"
  },
  {
    "id": "1052",
    "title": "μλ (MiLambda)",
    "description": "μλ (MiLambda), is esoteric two dimensional turing-complete programming language. In this languages all instructions are letters of Greek alphabet.",
    "url": "https://esolangs.org/wiki/MiLambda",
    "language_short": "brainfuck",
    "code": "<  EEEEEEEΔΔΘς       v\r\nv  ςΘΔEEEEEEEEEE     >\r\n<  EEEEEEEEEEEδδΘς   v\r\nv  ΘδδEEEEEEEEEEEς   >\r\n<  ς EEEEEEEEEEEΔΘ   v\r\nv  ΘΔΔΔΔEEEEς        >\r\n<  ςEEEΔΔΘ           v\r\nv  ΘδEEEEEEEEEEEEς   >\r\n<  ςEEEEEEEEEEEΔΘ    v\r\nv  ΘΔΔΔΔEEEEEEEEEEEς >\r\n<  ςEEEEEEEEEEEδδΘ   v\r\nv  ΘEEEEEEEEEEς      >\r\n<  ςEEEΔΔΔΘ          λ"
  },
  {
    "id": "1053",
    "title": "قلب",
    "description": "قلب (Levantine Arabic: [ʔalb]), transliterated Qalb, Qlb and Alb, is a functional programming language allowing a programmer to write programs completely in Arabic.",
    "url": "https://en.wikipedia.org/wiki/Qalb_(programming_language)",
    "language_short": "c-like",
    "code": "‫(قول \"مرحبا يا عالم!\")"
  },
  {
    "id": "1054",
    "title": "کوردیی ناوەندی",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "پەیامی \"سڵاو جیهان!\" پیشان بدە لەگەڵ دێڕیکی نوێ.\r\nپرۆگرام بوەستێنە."
  },
  {
    "id": "1055",
    "title": "ᚱᚢᚾᛅᛦ",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "ᛋᚭᚭᚭᚭᚭᚭᚭᚭᚭᚭᚭ\r\nᛁ͗̿ᛁ̊ᛁ̳͗̿ᛁ̹̊ᚹᛁ̿ᛁ̊ᛁ͗ᛁ̊ᛁ̹̊ᛁ̊̿ᛧ"
  },
  {
    "id": "1056",
    "title": "한국어",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "\"안녕 세상아\"와 새로운 줄을 표시하시오.\r\n프로그램 종료."
  },
  {
    "id": "1057",
    "title": "なでしこ",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "「Hello World」と表示"
  },
  {
    "id": "1058",
    "title": "ひまわり",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "「Hello World」と、表示。"
  },
  {
    "id": "1059",
    "title": "上海话",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "嘎讪胡：“Hello World”。"
  },
  {
    "id": "1060",
    "title": "文言",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "吾有一言。曰「「Hello World」」。書之。"
  },
  {
    "id": "1061",
    "title": "易语言",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "调试输出(“Hello World”）"
  },
  {
    "id": "1062",
    "title": "火星文",
    "description": "",
    "url": "",
    "language_short": "",
    "code": "姠屛募潑鎹牸苻賗：【沵恏，迣鎅】。\r\n蔠圵姟珵垿。"
  }
]
